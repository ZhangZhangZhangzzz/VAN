
mpu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800a0d8  0800a0d8  0001a0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a598  0800a598  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a598  0800a598  0001a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a0  0800a5a0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5a4  0800a5a4  0001a5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00000298  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000490  20000490  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c41f  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002269  00000000  00000000  0002c68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b20  00000000  00000000  0002e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000892  00000000  00000000  0002f418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022367  00000000  00000000  0002fcaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010307  00000000  00000000  00052011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7900  00000000  00000000  00062318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004284  00000000  00000000  00129c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0012de9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0bc 	.word	0x0800a0bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800a0bc 	.word	0x0800a0bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_GPIO_Init+0x68>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a16      	ldr	r2, [pc, #88]	; (8001058 <MX_GPIO_Init+0x68>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_GPIO_Init+0x68>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_GPIO_Init+0x68>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <MX_GPIO_Init+0x68>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <MX_GPIO_Init+0x68>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_GPIO_Init+0x68>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <MX_GPIO_Init+0x68>)
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_GPIO_Init+0x68>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_I2C2_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MX_I2C2_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_I2C2_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <MX_I2C2_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_I2C2_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_I2C2_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_I2C2_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <MX_I2C2_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_I2C2_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_I2C2_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_I2C2_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_I2C2_Init+0x50>)
 800109a:	f001 fe65 	bl	8002d68 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 fee4 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000214 	.word	0x20000214
 80010b0:	40005800 	.word	0x40005800
 80010b4:	00061a80 	.word	0x00061a80

080010b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_I2C_MspInit+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12b      	bne.n	8001132 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_I2C_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_I2C_MspInit+0x88>)
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_I2C_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010f6:	2303      	movs	r3, #3
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fa:	2312      	movs	r3, #18
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001106:	2304      	movs	r3, #4
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <HAL_I2C_MspInit+0x8c>)
 8001112:	f001 fc8d 	bl	8002a30 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_I2C_MspInit+0x88>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_I2C_MspInit+0x88>)
 8001120:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_I2C_MspInit+0x88>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40005800 	.word	0x40005800
 8001140:	40023800 	.word	0x40023800
 8001144:	40021400 	.word	0x40021400

08001148 <Angle_Calcu>:
float Angle_X_Final; 		//X最终倾斜角度
float Angle_Y_Final; 		//Y最终倾斜角度

//读取数据预处理
void Angle_Calcu(void)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af02      	add	r7, sp, #8
	float accx,accy,accz;//三方向角加速度值
	//MPU_Get_Accelerometer(&aacx,&aacy,&aacz);	//得到加速度传感器数据
	//MPU_Get_Gyroscope(&gyrox,&gyroy,&gyroz);	//得到陀螺仪数据


	MPU_Get_Gyroscope();
 800114e:	f000 ff63 	bl	8002018 <MPU_Get_Gyroscope>
	MPU_Get_Accelerometer();
 8001152:	f000 ff91 	bl	8002078 <MPU_Get_Accelerometer>

	aacx  = IMU_Data.Accel_X;
 8001156:	4b5c      	ldr	r3, [pc, #368]	; (80012c8 <Angle_Calcu+0x180>)
 8001158:	f9b3 2000 	ldrsh.w	r2, [r3]
 800115c:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <Angle_Calcu+0x184>)
 800115e:	801a      	strh	r2, [r3, #0]
	aacy  = IMU_Data.Accel_Y;
 8001160:	4b59      	ldr	r3, [pc, #356]	; (80012c8 <Angle_Calcu+0x180>)
 8001162:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001166:	4b5a      	ldr	r3, [pc, #360]	; (80012d0 <Angle_Calcu+0x188>)
 8001168:	801a      	strh	r2, [r3, #0]
	aacz  = IMU_Data.Accel_Z;
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <Angle_Calcu+0x180>)
 800116c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001170:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <Angle_Calcu+0x18c>)
 8001172:	801a      	strh	r2, [r3, #0]
	gyrox = IMU_Data.Gyro_X;
 8001174:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <Angle_Calcu+0x180>)
 8001176:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800117a:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <Angle_Calcu+0x190>)
 800117c:	801a      	strh	r2, [r3, #0]
	gyroy = IMU_Data.Gyro_Y;
 800117e:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <Angle_Calcu+0x180>)
 8001180:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001184:	4b55      	ldr	r3, [pc, #340]	; (80012dc <Angle_Calcu+0x194>)
 8001186:	801a      	strh	r2, [r3, #0]
	gyroz = IMU_Data.Gyro_Z;
 8001188:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <Angle_Calcu+0x180>)
 800118a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800118e:	4b54      	ldr	r3, [pc, #336]	; (80012e0 <Angle_Calcu+0x198>)
 8001190:	801a      	strh	r2, [r3, #0]

	//temperature = GYR_TMPU_Get_Temperature();		//得到温度值
	Accel_x = (float)aacx;//x轴加速度值暂存
 8001192:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <Angle_Calcu+0x184>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a0:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <Angle_Calcu+0x19c>)
 80011a2:	edc3 7a00 	vstr	s15, [r3]
	Accel_y = (float)aacy;//y轴加速度值暂存
 80011a6:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <Angle_Calcu+0x188>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <Angle_Calcu+0x1a0>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]
	Accel_z = (float)aacz;//z轴加速度值暂存
 80011ba:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <Angle_Calcu+0x18c>)
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c8:	4b48      	ldr	r3, [pc, #288]	; (80012ec <Angle_Calcu+0x1a4>)
 80011ca:	edc3 7a00 	vstr	s15, [r3]
	Gyro_x  = (float)gyrox;//x轴陀螺仪值暂存
 80011ce:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <Angle_Calcu+0x190>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <Angle_Calcu+0x1a8>)
 80011de:	edc3 7a00 	vstr	s15, [r3]
	Gyro_y  = (float)gyroy;//y轴陀螺仪值暂存
 80011e2:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <Angle_Calcu+0x194>)
 80011e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f0:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <Angle_Calcu+0x1ac>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
	Gyro_z  = (float)gyroz;//z轴陀螺仪值暂存
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <Angle_Calcu+0x198>)
 80011f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001204:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <Angle_Calcu+0x1b0>)
 8001206:	edc3 7a00 	vstr	s15, [r3]

	//2.角加速度原始值处理过程
	//加速度传感器配置寄存器0X1C内写入0x01,设置范围为±2g。换算关系：2^16/4 = 16384LSB/g
	if(Accel_x<32764) accx=Accel_x/16384;//计算x轴加速度
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <Angle_Calcu+0x19c>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80012fc <Angle_Calcu+0x1b4>
 8001214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d509      	bpl.n	8001232 <Angle_Calcu+0xea>
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <Angle_Calcu+0x19c>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001300 <Angle_Calcu+0x1b8>
 8001228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800122c:	edc7 7a03 	vstr	s15, [r7, #12]
 8001230:	e010      	b.n	8001254 <Angle_Calcu+0x10c>
	else              accx=1-(Accel_x-49152)/16384;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <Angle_Calcu+0x19c>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001304 <Angle_Calcu+0x1bc>
 800123c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001240:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001300 <Angle_Calcu+0x1b8>
 8001244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800124c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001250:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Accel_y<32764) accy=Accel_y/16384;//计算y轴加速度
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <Angle_Calcu+0x1a0>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80012fc <Angle_Calcu+0x1b4>
 800125e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	d509      	bpl.n	800127c <Angle_Calcu+0x134>
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <Angle_Calcu+0x1a0>)
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001300 <Angle_Calcu+0x1b8>
 8001272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001276:	edc7 7a02 	vstr	s15, [r7, #8]
 800127a:	e010      	b.n	800129e <Angle_Calcu+0x156>
	else              accy=1-(Accel_y-49152)/16384;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <Angle_Calcu+0x1a0>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001304 <Angle_Calcu+0x1bc>
 8001286:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800128a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001300 <Angle_Calcu+0x1b8>
 800128e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129a:	edc7 7a02 	vstr	s15, [r7, #8]
	if(Accel_z<32764) accz=Accel_z/16384;//计算z轴加速度
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <Angle_Calcu+0x1a4>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80012fc <Angle_Calcu+0x1b4>
 80012a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b0:	d52a      	bpl.n	8001308 <Angle_Calcu+0x1c0>
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <Angle_Calcu+0x1a4>)
 80012b4:	ed93 7a00 	vldr	s14, [r3]
 80012b8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001300 <Angle_Calcu+0x1b8>
 80012bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80012c4:	e02d      	b.n	8001322 <Angle_Calcu+0x1da>
 80012c6:	bf00      	nop
 80012c8:	200002dc 	.word	0x200002dc
 80012cc:	20000268 	.word	0x20000268
 80012d0:	2000026a 	.word	0x2000026a
 80012d4:	2000026c 	.word	0x2000026c
 80012d8:	2000026e 	.word	0x2000026e
 80012dc:	20000270 	.word	0x20000270
 80012e0:	20000272 	.word	0x20000272
 80012e4:	20000274 	.word	0x20000274
 80012e8:	20000278 	.word	0x20000278
 80012ec:	2000027c 	.word	0x2000027c
 80012f0:	20000280 	.word	0x20000280
 80012f4:	20000284 	.word	0x20000284
 80012f8:	20000288 	.word	0x20000288
 80012fc:	46fff800 	.word	0x46fff800
 8001300:	46800000 	.word	0x46800000
 8001304:	47400000 	.word	0x47400000
	else              accz=(Accel_z-49152)/16384;
 8001308:	4bcd      	ldr	r3, [pc, #820]	; (8001640 <Angle_Calcu+0x4f8>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ed9f 7acd 	vldr	s14, [pc, #820]	; 8001644 <Angle_Calcu+0x4fc>
 8001312:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001316:	eddf 6acc 	vldr	s13, [pc, #816]	; 8001648 <Angle_Calcu+0x500>
 800131a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131e:	edc7 7a01 	vstr	s15, [r7, #4]
	//加速度反正切公式计算三个轴和水平面坐标系之间的夹角
	Angle_x_temp=(atan(accy/accz))*180/3.14;
 8001322:	ed97 7a02 	vldr	s14, [r7, #8]
 8001326:	edd7 7a01 	vldr	s15, [r7, #4]
 800132a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800132e:	ee16 0a90 	vmov	r0, s13
 8001332:	f7ff f909 	bl	8000548 <__aeabi_f2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	ec43 2b10 	vmov	d0, r2, r3
 800133e:	f008 fd13 	bl	8009d68 <atan>
 8001342:	ec51 0b10 	vmov	r0, r1, d0
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4bc0      	ldr	r3, [pc, #768]	; (800164c <Angle_Calcu+0x504>)
 800134c:	f7ff f954 	bl	80005f8 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	a3b5      	add	r3, pc, #724	; (adr r3, 8001630 <Angle_Calcu+0x4e8>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff fa75 	bl	800084c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fc3d 	bl	8000be8 <__aeabi_d2f>
 800136e:	4603      	mov	r3, r0
 8001370:	4ab7      	ldr	r2, [pc, #732]	; (8001650 <Angle_Calcu+0x508>)
 8001372:	6013      	str	r3, [r2, #0]
	Angle_y_temp=(atan(accx/accz))*180/3.14;
 8001374:	ed97 7a03 	vldr	s14, [r7, #12]
 8001378:	edd7 7a01 	vldr	s15, [r7, #4]
 800137c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001380:	ee16 0a90 	vmov	r0, s13
 8001384:	f7ff f8e0 	bl	8000548 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	ec43 2b10 	vmov	d0, r2, r3
 8001390:	f008 fcea 	bl	8009d68 <atan>
 8001394:	ec51 0b10 	vmov	r0, r1, d0
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	4bab      	ldr	r3, [pc, #684]	; (800164c <Angle_Calcu+0x504>)
 800139e:	f7ff f92b 	bl	80005f8 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	a3a1      	add	r3, pc, #644	; (adr r3, 8001630 <Angle_Calcu+0x4e8>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fa4c 	bl	800084c <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fc14 	bl	8000be8 <__aeabi_d2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4aa4      	ldr	r2, [pc, #656]	; (8001654 <Angle_Calcu+0x50c>)
 80013c4:	6013      	str	r3, [r2, #0]
	//未经任何处理的原始欧拉角打印
//	Printf("R P :%f , %f \r\n",Angle_x_temp,Angle_y_temp);


	//判断计算后角度的正负号
	if(Accel_x<32764) Angle_y_temp = +Angle_y_temp;
 80013c6:	4ba4      	ldr	r3, [pc, #656]	; (8001658 <Angle_Calcu+0x510>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800165c <Angle_Calcu+0x514>
 80013d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	d503      	bpl.n	80013e2 <Angle_Calcu+0x29a>
 80013da:	4b9e      	ldr	r3, [pc, #632]	; (8001654 <Angle_Calcu+0x50c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a9d      	ldr	r2, [pc, #628]	; (8001654 <Angle_Calcu+0x50c>)
 80013e0:	6013      	str	r3, [r2, #0]
	if(Accel_x>32764) Angle_y_temp = -Angle_y_temp;
 80013e2:	4b9d      	ldr	r3, [pc, #628]	; (8001658 <Angle_Calcu+0x510>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800165c <Angle_Calcu+0x514>
 80013ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	dd07      	ble.n	8001406 <Angle_Calcu+0x2be>
 80013f6:	4b97      	ldr	r3, [pc, #604]	; (8001654 <Angle_Calcu+0x50c>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	eef1 7a67 	vneg.f32	s15, s15
 8001400:	4b94      	ldr	r3, [pc, #592]	; (8001654 <Angle_Calcu+0x50c>)
 8001402:	edc3 7a00 	vstr	s15, [r3]
	if(Accel_y<32764) Angle_x_temp = +Angle_x_temp;
 8001406:	4b96      	ldr	r3, [pc, #600]	; (8001660 <Angle_Calcu+0x518>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800165c <Angle_Calcu+0x514>
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	d503      	bpl.n	8001422 <Angle_Calcu+0x2da>
 800141a:	4b8d      	ldr	r3, [pc, #564]	; (8001650 <Angle_Calcu+0x508>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a8c      	ldr	r2, [pc, #560]	; (8001650 <Angle_Calcu+0x508>)
 8001420:	6013      	str	r3, [r2, #0]
	if(Accel_y>32764) Angle_x_temp = -Angle_x_temp;
 8001422:	4b8f      	ldr	r3, [pc, #572]	; (8001660 <Angle_Calcu+0x518>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800165c <Angle_Calcu+0x514>
 800142c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	dd07      	ble.n	8001446 <Angle_Calcu+0x2fe>
 8001436:	4b86      	ldr	r3, [pc, #536]	; (8001650 <Angle_Calcu+0x508>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	eef1 7a67 	vneg.f32	s15, s15
 8001440:	4b83      	ldr	r3, [pc, #524]	; (8001650 <Angle_Calcu+0x508>)
 8001442:	edc3 7a00 	vstr	s15, [r3]


	//3.角速度原始值处理过程
	//陀螺仪配置寄存器0X1B内写入0x18，设置范围为±2000deg/s。换算关系：2^16/4000=16.4LSB/(°/S)
	//计算角速度
	if(Gyro_x<32768) Gyro_x=-(Gyro_x/16.4);
 8001446:	4b87      	ldr	r3, [pc, #540]	; (8001664 <Angle_Calcu+0x51c>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001668 <Angle_Calcu+0x520>
 8001450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d517      	bpl.n	800148a <Angle_Calcu+0x342>
 800145a:	4b82      	ldr	r3, [pc, #520]	; (8001664 <Angle_Calcu+0x51c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f872 	bl	8000548 <__aeabi_f2d>
 8001464:	a374      	add	r3, pc, #464	; (adr r3, 8001638 <Angle_Calcu+0x4f0>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f9ef 	bl	800084c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fbb7 	bl	8000be8 <__aeabi_d2f>
 800147a:	4603      	mov	r3, r0
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef1 7a67 	vneg.f32	s15, s15
 8001484:	4b77      	ldr	r3, [pc, #476]	; (8001664 <Angle_Calcu+0x51c>)
 8001486:	edc3 7a00 	vstr	s15, [r3]
	if(Gyro_x>32768) Gyro_x=+(65535-Gyro_x)/16.4;
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <Angle_Calcu+0x51c>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001668 <Angle_Calcu+0x520>
 8001494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	dd18      	ble.n	80014d0 <Angle_Calcu+0x388>
 800149e:	4b71      	ldr	r3, [pc, #452]	; (8001664 <Angle_Calcu+0x51c>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800166c <Angle_Calcu+0x524>
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	ee17 0a90 	vmov	r0, s15
 80014b0:	f7ff f84a 	bl	8000548 <__aeabi_f2d>
 80014b4:	a360      	add	r3, pc, #384	; (adr r3, 8001638 <Angle_Calcu+0x4f0>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f9c7 	bl	800084c <__aeabi_ddiv>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fb8f 	bl	8000be8 <__aeabi_d2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a65      	ldr	r2, [pc, #404]	; (8001664 <Angle_Calcu+0x51c>)
 80014ce:	6013      	str	r3, [r2, #0]
	if(Gyro_y<32768) Gyro_y=-(Gyro_y/16.4);
 80014d0:	4b67      	ldr	r3, [pc, #412]	; (8001670 <Angle_Calcu+0x528>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001668 <Angle_Calcu+0x520>
 80014da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d517      	bpl.n	8001514 <Angle_Calcu+0x3cc>
 80014e4:	4b62      	ldr	r3, [pc, #392]	; (8001670 <Angle_Calcu+0x528>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f82d 	bl	8000548 <__aeabi_f2d>
 80014ee:	a352      	add	r3, pc, #328	; (adr r3, 8001638 <Angle_Calcu+0x4f0>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7ff f9aa 	bl	800084c <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb72 	bl	8000be8 <__aeabi_d2f>
 8001504:	4603      	mov	r3, r0
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eef1 7a67 	vneg.f32	s15, s15
 800150e:	4b58      	ldr	r3, [pc, #352]	; (8001670 <Angle_Calcu+0x528>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
	if(Gyro_y>32768) Gyro_y=+(65535-Gyro_y)/16.4;
 8001514:	4b56      	ldr	r3, [pc, #344]	; (8001670 <Angle_Calcu+0x528>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001668 <Angle_Calcu+0x520>
 800151e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	dd18      	ble.n	800155a <Angle_Calcu+0x412>
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <Angle_Calcu+0x528>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800166c <Angle_Calcu+0x524>
 8001532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001536:	ee17 0a90 	vmov	r0, s15
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	a33e      	add	r3, pc, #248	; (adr r3, 8001638 <Angle_Calcu+0x4f0>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f982 	bl	800084c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb4a 	bl	8000be8 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	4a46      	ldr	r2, [pc, #280]	; (8001670 <Angle_Calcu+0x528>)
 8001558:	6013      	str	r3, [r2, #0]
	if(Gyro_z<32768) Gyro_z=-(Gyro_z/16.4);
 800155a:	4b46      	ldr	r3, [pc, #280]	; (8001674 <Angle_Calcu+0x52c>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001668 <Angle_Calcu+0x520>
 8001564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d517      	bpl.n	800159e <Angle_Calcu+0x456>
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <Angle_Calcu+0x52c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe8 	bl	8000548 <__aeabi_f2d>
 8001578:	a32f      	add	r3, pc, #188	; (adr r3, 8001638 <Angle_Calcu+0x4f0>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f965 	bl	800084c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fb2d 	bl	8000be8 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef1 7a67 	vneg.f32	s15, s15
 8001598:	4b36      	ldr	r3, [pc, #216]	; (8001674 <Angle_Calcu+0x52c>)
 800159a:	edc3 7a00 	vstr	s15, [r3]
	if(Gyro_z>32768) Gyro_z=+(65535-Gyro_z)/16.4;
 800159e:	4b35      	ldr	r3, [pc, #212]	; (8001674 <Angle_Calcu+0x52c>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001668 <Angle_Calcu+0x520>
 80015a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	dd18      	ble.n	80015e4 <Angle_Calcu+0x49c>
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <Angle_Calcu+0x52c>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800166c <Angle_Calcu+0x524>
 80015bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c0:	ee17 0a90 	vmov	r0, s15
 80015c4:	f7fe ffc0 	bl	8000548 <__aeabi_f2d>
 80015c8:	a31b      	add	r3, pc, #108	; (adr r3, 8001638 <Angle_Calcu+0x4f0>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff f93d 	bl	800084c <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fb05 	bl	8000be8 <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a24      	ldr	r2, [pc, #144]	; (8001674 <Angle_Calcu+0x52c>)
 80015e2:	6013      	str	r3, [r2, #0]




	//4.调用卡尔曼函数
	Kalman_Filter_X(Angle_x_temp,Gyro_x);  //卡尔曼滤波计算X倾角
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <Angle_Calcu+0x508>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <Angle_Calcu+0x51c>)
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	eef0 0a47 	vmov.f32	s1, s14
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	f000 f854 	bl	80016a4 <Kalman_Filter_X>
	Kalman_Filter_Y(Angle_y_temp,Gyro_y);  //卡尔曼滤波计算Y倾角
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <Angle_Calcu+0x50c>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <Angle_Calcu+0x528>)
 8001604:	ed93 7a00 	vldr	s14, [r3]
 8001608:	eef0 0a47 	vmov.f32	s1, s14
 800160c:	eeb0 0a67 	vmov.f32	s0, s15
 8001610:	f000 f9bc 	bl	800198c <Kalman_Filter_Y>
	Yaw();
 8001614:	f000 fb2e 	bl	8001c74 <Yaw>

	//处理后欧拉角打印
	printf("Roll,Pitch : %f,%f \r\n",Angle_X_Final,Angle_Y_Final);
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <Angle_Calcu+0x530>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff93 	bl	8000548 <__aeabi_f2d>
 8001622:	4604      	mov	r4, r0
 8001624:	460d      	mov	r5, r1
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <Angle_Calcu+0x534>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	e028      	b.n	8001680 <Angle_Calcu+0x538>
 800162e:	bf00      	nop
 8001630:	51eb851f 	.word	0x51eb851f
 8001634:	40091eb8 	.word	0x40091eb8
 8001638:	66666666 	.word	0x66666666
 800163c:	40306666 	.word	0x40306666
 8001640:	2000027c 	.word	0x2000027c
 8001644:	47400000 	.word	0x47400000
 8001648:	46800000 	.word	0x46800000
 800164c:	40668000 	.word	0x40668000
 8001650:	2000028c 	.word	0x2000028c
 8001654:	20000290 	.word	0x20000290
 8001658:	20000274 	.word	0x20000274
 800165c:	46fff800 	.word	0x46fff800
 8001660:	20000278 	.word	0x20000278
 8001664:	20000280 	.word	0x20000280
 8001668:	47000000 	.word	0x47000000
 800166c:	477fff00 	.word	0x477fff00
 8001670:	20000284 	.word	0x20000284
 8001674:	20000288 	.word	0x20000288
 8001678:	20000294 	.word	0x20000294
 800167c:	20000298 	.word	0x20000298
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	e9cd 2300 	strd	r2, r3, [sp]
 800168c:	4622      	mov	r2, r4
 800168e:	462b      	mov	r3, r5
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <Angle_Calcu+0x558>)
 8001692:	f004 febb 	bl	800640c <iprintf>

}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	0800a0d8 	.word	0x0800a0d8

080016a4 <Kalman_Filter_X>:
float K_0, K_1, t_0, t_1;	//卡尔曼增益  K_0:用于计算最优估计值  K_1:用于计算最优估计值的偏差 t_0/1:中间变量
float P[4] ={0,0,0,0};	//过程协方差矩阵的微分矩阵，中间变量
float PP[2][2] = { { 1, 0 },{ 0, 1 } };//过程协方差矩阵P

void Kalman_Filter_X(float Accel,float Gyro) //卡尔曼函数
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ae:	edc7 0a00 	vstr	s1, [r7]
	//步骤一，先验估计
	//公式：X(k|k-1) = AX(k-1|k-1) + BU(k)
	//X = (Angle,Q_bias)
	//A(1,1) = 1,A(1,2) = -dt
	//A(2,1) = 0,A(2,2) = 1
	Angle_X_Final += (Gyro - Q_bias) * dt; //状态方程,角度值等于上次最优角度加角速度减零漂后积分
 80016b2:	4ba4      	ldr	r3, [pc, #656]	; (8001944 <Kalman_Filter_X+0x2a0>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ed97 7a00 	vldr	s14, [r7]
 80016bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c0:	4ba1      	ldr	r3, [pc, #644]	; (8001948 <Kalman_Filter_X+0x2a4>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ca:	4ba0      	ldr	r3, [pc, #640]	; (800194c <Kalman_Filter_X+0x2a8>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d4:	4b9d      	ldr	r3, [pc, #628]	; (800194c <Kalman_Filter_X+0x2a8>)
 80016d6:	edc3 7a00 	vstr	s15, [r3]

	//步骤二，计算过程协方差矩阵的微分矩阵
	//公式：P(k|k-1)=AP(k-1|k-1)A^T + Q
	//Q(1,1) = cov(Angle,Angle)	Q(1,2) = cov(Q_bias,Angle)
	//Q(2,1) = cov(Angle,Q_bias)	Q(2,2) = cov(Q_bias,Q_bias)
	P[0]= Q_angle - PP[0][1] - PP[1][0];
 80016da:	4b9d      	ldr	r3, [pc, #628]	; (8001950 <Kalman_Filter_X+0x2ac>)
 80016dc:	ed93 7a00 	vldr	s14, [r3]
 80016e0:	4b9c      	ldr	r3, [pc, #624]	; (8001954 <Kalman_Filter_X+0x2b0>)
 80016e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ea:	4b9a      	ldr	r3, [pc, #616]	; (8001954 <Kalman_Filter_X+0x2b0>)
 80016ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80016f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f4:	4b98      	ldr	r3, [pc, #608]	; (8001958 <Kalman_Filter_X+0x2b4>)
 80016f6:	edc3 7a00 	vstr	s15, [r3]
	P[1]= -PP[1][1];// 先验估计误差协方差
 80016fa:	4b96      	ldr	r3, [pc, #600]	; (8001954 <Kalman_Filter_X+0x2b0>)
 80016fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001700:	eef1 7a67 	vneg.f32	s15, s15
 8001704:	4b94      	ldr	r3, [pc, #592]	; (8001958 <Kalman_Filter_X+0x2b4>)
 8001706:	edc3 7a01 	vstr	s15, [r3, #4]
	P[2]= -PP[1][1];
 800170a:	4b92      	ldr	r3, [pc, #584]	; (8001954 <Kalman_Filter_X+0x2b0>)
 800170c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001710:	eef1 7a67 	vneg.f32	s15, s15
 8001714:	4b90      	ldr	r3, [pc, #576]	; (8001958 <Kalman_Filter_X+0x2b4>)
 8001716:	edc3 7a02 	vstr	s15, [r3, #8]
	P[3]= Q_gyro;
 800171a:	4b90      	ldr	r3, [pc, #576]	; (800195c <Kalman_Filter_X+0x2b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a8e      	ldr	r2, [pc, #568]	; (8001958 <Kalman_Filter_X+0x2b4>)
 8001720:	60d3      	str	r3, [r2, #12]
	PP[0][0] += P[0] * dt;
 8001722:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <Kalman_Filter_X+0x2b0>)
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	4b8b      	ldr	r3, [pc, #556]	; (8001958 <Kalman_Filter_X+0x2b4>)
 800172a:	edd3 6a00 	vldr	s13, [r3]
 800172e:	4b86      	ldr	r3, [pc, #536]	; (8001948 <Kalman_Filter_X+0x2a4>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173c:	4b85      	ldr	r3, [pc, #532]	; (8001954 <Kalman_Filter_X+0x2b0>)
 800173e:	edc3 7a00 	vstr	s15, [r3]
	PP[0][1] += P[1] * dt;
 8001742:	4b84      	ldr	r3, [pc, #528]	; (8001954 <Kalman_Filter_X+0x2b0>)
 8001744:	ed93 7a01 	vldr	s14, [r3, #4]
 8001748:	4b83      	ldr	r3, [pc, #524]	; (8001958 <Kalman_Filter_X+0x2b4>)
 800174a:	edd3 6a01 	vldr	s13, [r3, #4]
 800174e:	4b7e      	ldr	r3, [pc, #504]	; (8001948 <Kalman_Filter_X+0x2a4>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	4b7d      	ldr	r3, [pc, #500]	; (8001954 <Kalman_Filter_X+0x2b0>)
 800175e:	edc3 7a01 	vstr	s15, [r3, #4]
	PP[1][0] += P[2] * dt;
 8001762:	4b7c      	ldr	r3, [pc, #496]	; (8001954 <Kalman_Filter_X+0x2b0>)
 8001764:	ed93 7a02 	vldr	s14, [r3, #8]
 8001768:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <Kalman_Filter_X+0x2b4>)
 800176a:	edd3 6a02 	vldr	s13, [r3, #8]
 800176e:	4b76      	ldr	r3, [pc, #472]	; (8001948 <Kalman_Filter_X+0x2a4>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	4b75      	ldr	r3, [pc, #468]	; (8001954 <Kalman_Filter_X+0x2b0>)
 800177e:	edc3 7a02 	vstr	s15, [r3, #8]
	PP[1][1] += P[3] * dt;
 8001782:	4b74      	ldr	r3, [pc, #464]	; (8001954 <Kalman_Filter_X+0x2b0>)
 8001784:	ed93 7a03 	vldr	s14, [r3, #12]
 8001788:	4b73      	ldr	r3, [pc, #460]	; (8001958 <Kalman_Filter_X+0x2b4>)
 800178a:	edd3 6a03 	vldr	s13, [r3, #12]
 800178e:	4b6e      	ldr	r3, [pc, #440]	; (8001948 <Kalman_Filter_X+0x2a4>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179c:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <Kalman_Filter_X+0x2b0>)
 800179e:	edc3 7a03 	vstr	s15, [r3, #12]

	//步骤三，计算卡尔曼增益
	//公式：Kg(k)= P(k|k-1)H^T/(HP(k|k-1)H^T+R)
	//Kg = (K_0,K_1) 对应Angle,Q_bias增益
	//H = (1,0)	可由z=HX+v求出z:Accel
	PCt_0 = C_0 * PP[0][0];
 80017a2:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <Kalman_Filter_X+0x2bc>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ae:	4b69      	ldr	r3, [pc, #420]	; (8001954 <Kalman_Filter_X+0x2b0>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <Kalman_Filter_X+0x2c0>)
 80017ba:	edc3 7a00 	vstr	s15, [r3]
	PCt_1 = C_0 * PP[1][0];
 80017be:	4b68      	ldr	r3, [pc, #416]	; (8001960 <Kalman_Filter_X+0x2bc>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ca:	4b62      	ldr	r3, [pc, #392]	; (8001954 <Kalman_Filter_X+0x2b0>)
 80017cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80017d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d4:	4b64      	ldr	r3, [pc, #400]	; (8001968 <Kalman_Filter_X+0x2c4>)
 80017d6:	edc3 7a00 	vstr	s15, [r3]
	E = R_angle + C_0 * PCt_0;
 80017da:	4b61      	ldr	r3, [pc, #388]	; (8001960 <Kalman_Filter_X+0x2bc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e6:	4b5f      	ldr	r3, [pc, #380]	; (8001964 <Kalman_Filter_X+0x2c0>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f0:	4b5e      	ldr	r3, [pc, #376]	; (800196c <Kalman_Filter_X+0x2c8>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fa:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <Kalman_Filter_X+0x2cc>)
 80017fc:	edc3 7a00 	vstr	s15, [r3]
	K_0 = PCt_0 / E;
 8001800:	4b58      	ldr	r3, [pc, #352]	; (8001964 <Kalman_Filter_X+0x2c0>)
 8001802:	edd3 6a00 	vldr	s13, [r3]
 8001806:	4b5a      	ldr	r3, [pc, #360]	; (8001970 <Kalman_Filter_X+0x2cc>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001810:	4b58      	ldr	r3, [pc, #352]	; (8001974 <Kalman_Filter_X+0x2d0>)
 8001812:	edc3 7a00 	vstr	s15, [r3]
	K_1 = PCt_1 / E;
 8001816:	4b54      	ldr	r3, [pc, #336]	; (8001968 <Kalman_Filter_X+0x2c4>)
 8001818:	edd3 6a00 	vldr	s13, [r3]
 800181c:	4b54      	ldr	r3, [pc, #336]	; (8001970 <Kalman_Filter_X+0x2cc>)
 800181e:	ed93 7a00 	vldr	s14, [r3]
 8001822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001826:	4b54      	ldr	r3, [pc, #336]	; (8001978 <Kalman_Filter_X+0x2d4>)
 8001828:	edc3 7a00 	vstr	s15, [r3]

	//步骤四，后验估计误差协方差
	//公式：P(k|k)=(I-Kg(k)H)P(k|k-1)
	//也可写为：P(k|k)=P(k|k-1)-Kg(k)HP(k|k-1)
	t_0 = PCt_0;
 800182c:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <Kalman_Filter_X+0x2c0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a52      	ldr	r2, [pc, #328]	; (800197c <Kalman_Filter_X+0x2d8>)
 8001832:	6013      	str	r3, [r2, #0]
	t_1 = C_0 * PP[0][1];
 8001834:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <Kalman_Filter_X+0x2bc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001840:	4b44      	ldr	r3, [pc, #272]	; (8001954 <Kalman_Filter_X+0x2b0>)
 8001842:	edd3 7a01 	vldr	s15, [r3, #4]
 8001846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184a:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <Kalman_Filter_X+0x2dc>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
	PP[0][0] -= K_0 * t_0;
 8001850:	4b40      	ldr	r3, [pc, #256]	; (8001954 <Kalman_Filter_X+0x2b0>)
 8001852:	ed93 7a00 	vldr	s14, [r3]
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <Kalman_Filter_X+0x2d0>)
 8001858:	edd3 6a00 	vldr	s13, [r3]
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <Kalman_Filter_X+0x2d8>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800186a:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <Kalman_Filter_X+0x2b0>)
 800186c:	edc3 7a00 	vstr	s15, [r3]
	PP[0][1] -= K_0 * t_1;
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <Kalman_Filter_X+0x2b0>)
 8001872:	ed93 7a01 	vldr	s14, [r3, #4]
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <Kalman_Filter_X+0x2d0>)
 8001878:	edd3 6a00 	vldr	s13, [r3]
 800187c:	4b40      	ldr	r3, [pc, #256]	; (8001980 <Kalman_Filter_X+0x2dc>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	4b32      	ldr	r3, [pc, #200]	; (8001954 <Kalman_Filter_X+0x2b0>)
 800188c:	edc3 7a01 	vstr	s15, [r3, #4]
	PP[1][0] -= K_1 * t_0;
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <Kalman_Filter_X+0x2b0>)
 8001892:	ed93 7a02 	vldr	s14, [r3, #8]
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <Kalman_Filter_X+0x2d4>)
 8001898:	edd3 6a00 	vldr	s13, [r3]
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <Kalman_Filter_X+0x2d8>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <Kalman_Filter_X+0x2b0>)
 80018ac:	edc3 7a02 	vstr	s15, [r3, #8]
	PP[1][1] -= K_1 * t_1;
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <Kalman_Filter_X+0x2b0>)
 80018b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <Kalman_Filter_X+0x2d4>)
 80018b8:	edd3 6a00 	vldr	s13, [r3]
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <Kalman_Filter_X+0x2dc>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <Kalman_Filter_X+0x2b0>)
 80018cc:	edc3 7a03 	vstr	s15, [r3, #12]

	//步骤五，计算最优角速度值
	//公式：X(k|k)= X(k|k-1)+Kg(k)(Z(k)-X(k|k-1))
	Angle_err = Accel - Angle_X_Final;	//Z(k)先验估计 计算角度偏差
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <Kalman_Filter_X+0x2a8>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <Kalman_Filter_X+0x2e0>)
 80018e0:	edc3 7a00 	vstr	s15, [r3]
	Angle_X_Final += K_0 * Angle_err;	 //后验估计，给出最优估计值
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <Kalman_Filter_X+0x2d0>)
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <Kalman_Filter_X+0x2e0>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <Kalman_Filter_X+0x2a8>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <Kalman_Filter_X+0x2a8>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
	Q_bias        += K_1 * Angle_err;	 //后验估计，跟新最优估计值偏差
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <Kalman_Filter_X+0x2d4>)
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <Kalman_Filter_X+0x2e0>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <Kalman_Filter_X+0x2a0>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <Kalman_Filter_X+0x2a0>)
 8001920:	edc3 7a00 	vstr	s15, [r3]
	Gyro_x         = Gyro - Q_bias;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <Kalman_Filter_X+0x2a0>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ed97 7a00 	vldr	s14, [r7]
 800192e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <Kalman_Filter_X+0x2e4>)
 8001934:	edc3 7a00 	vstr	s15, [r3]


}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	2000029c 	.word	0x2000029c
 8001948:	2000000c 	.word	0x2000000c
 800194c:	20000294 	.word	0x20000294
 8001950:	20000000 	.word	0x20000000
 8001954:	20000014 	.word	0x20000014
 8001958:	200002c0 	.word	0x200002c0
 800195c:	20000004 	.word	0x20000004
 8001960:	20000010 	.word	0x20000010
 8001964:	200002a4 	.word	0x200002a4
 8001968:	200002a8 	.word	0x200002a8
 800196c:	20000008 	.word	0x20000008
 8001970:	200002ac 	.word	0x200002ac
 8001974:	200002b0 	.word	0x200002b0
 8001978:	200002b4 	.word	0x200002b4
 800197c:	200002b8 	.word	0x200002b8
 8001980:	200002bc 	.word	0x200002bc
 8001984:	200002a0 	.word	0x200002a0
 8001988:	20000280 	.word	0x20000280

0800198c <Kalman_Filter_Y>:

void Kalman_Filter_Y(float Accel,float Gyro)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	ed87 0a01 	vstr	s0, [r7, #4]
 8001996:	edc7 0a00 	vstr	s1, [r7]
	Angle_Y_Final += (Gyro - Q_bias) * dt;
 800199a:	4ba4      	ldr	r3, [pc, #656]	; (8001c2c <Kalman_Filter_Y+0x2a0>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ed97 7a00 	vldr	s14, [r7]
 80019a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a8:	4ba1      	ldr	r3, [pc, #644]	; (8001c30 <Kalman_Filter_Y+0x2a4>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b2:	4ba0      	ldr	r3, [pc, #640]	; (8001c34 <Kalman_Filter_Y+0x2a8>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019bc:	4b9d      	ldr	r3, [pc, #628]	; (8001c34 <Kalman_Filter_Y+0x2a8>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
	P[0]=Q_angle - PP[0][1] - PP[1][0];
 80019c2:	4b9d      	ldr	r3, [pc, #628]	; (8001c38 <Kalman_Filter_Y+0x2ac>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b9c      	ldr	r3, [pc, #624]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 80019ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d2:	4b9a      	ldr	r3, [pc, #616]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 80019d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019dc:	4b98      	ldr	r3, [pc, #608]	; (8001c40 <Kalman_Filter_Y+0x2b4>)
 80019de:	edc3 7a00 	vstr	s15, [r3]
	P[1]=-PP[1][1];
 80019e2:	4b96      	ldr	r3, [pc, #600]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 80019e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80019e8:	eef1 7a67 	vneg.f32	s15, s15
 80019ec:	4b94      	ldr	r3, [pc, #592]	; (8001c40 <Kalman_Filter_Y+0x2b4>)
 80019ee:	edc3 7a01 	vstr	s15, [r3, #4]
	P[2]=-PP[1][1];
 80019f2:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 80019f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80019f8:	eef1 7a67 	vneg.f32	s15, s15
 80019fc:	4b90      	ldr	r3, [pc, #576]	; (8001c40 <Kalman_Filter_Y+0x2b4>)
 80019fe:	edc3 7a02 	vstr	s15, [r3, #8]
	P[3]=Q_gyro;
 8001a02:	4b90      	ldr	r3, [pc, #576]	; (8001c44 <Kalman_Filter_Y+0x2b8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a8e      	ldr	r2, [pc, #568]	; (8001c40 <Kalman_Filter_Y+0x2b4>)
 8001a08:	60d3      	str	r3, [r2, #12]
	PP[0][0] += P[0] * dt;
 8001a0a:	4b8c      	ldr	r3, [pc, #560]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001a0c:	ed93 7a00 	vldr	s14, [r3]
 8001a10:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <Kalman_Filter_Y+0x2b4>)
 8001a12:	edd3 6a00 	vldr	s13, [r3]
 8001a16:	4b86      	ldr	r3, [pc, #536]	; (8001c30 <Kalman_Filter_Y+0x2a4>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a24:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]
	PP[0][1] += P[1] * dt;
 8001a2a:	4b84      	ldr	r3, [pc, #528]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001a2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a30:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <Kalman_Filter_Y+0x2b4>)
 8001a32:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a36:	4b7e      	ldr	r3, [pc, #504]	; (8001c30 <Kalman_Filter_Y+0x2a4>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	4b7d      	ldr	r3, [pc, #500]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001a46:	edc3 7a01 	vstr	s15, [r3, #4]
	PP[1][0] += P[2] * dt;
 8001a4a:	4b7c      	ldr	r3, [pc, #496]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001a4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a50:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <Kalman_Filter_Y+0x2b4>)
 8001a52:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a56:	4b76      	ldr	r3, [pc, #472]	; (8001c30 <Kalman_Filter_Y+0x2a4>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	4b75      	ldr	r3, [pc, #468]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001a66:	edc3 7a02 	vstr	s15, [r3, #8]
	PP[1][1] += P[3] * dt;
 8001a6a:	4b74      	ldr	r3, [pc, #464]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001a6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a70:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <Kalman_Filter_Y+0x2b4>)
 8001a72:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a76:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <Kalman_Filter_Y+0x2a4>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a84:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001a86:	edc3 7a03 	vstr	s15, [r3, #12]
	Angle_err = Accel - Angle_Y_Final;
 8001a8a:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <Kalman_Filter_Y+0x2a8>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a98:	4b6b      	ldr	r3, [pc, #428]	; (8001c48 <Kalman_Filter_Y+0x2bc>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]
	PCt_0 = C_0 * PP[0][0];
 8001a9e:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <Kalman_Filter_Y+0x2c0>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aaa:	4b64      	ldr	r3, [pc, #400]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <Kalman_Filter_Y+0x2c4>)
 8001ab6:	edc3 7a00 	vstr	s15, [r3]
	PCt_1 = C_0 * PP[1][0];
 8001aba:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <Kalman_Filter_Y+0x2c0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001ac8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad0:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <Kalman_Filter_Y+0x2c8>)
 8001ad2:	edc3 7a00 	vstr	s15, [r3]
	E = R_angle + C_0 * PCt_0;
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <Kalman_Filter_Y+0x2c0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	ee07 3a90 	vmov	s15, r3
 8001ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <Kalman_Filter_Y+0x2c4>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aec:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <Kalman_Filter_Y+0x2cc>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <Kalman_Filter_Y+0x2d0>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
	K_0 = PCt_0 / E;
 8001afc:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <Kalman_Filter_Y+0x2c4>)
 8001afe:	edd3 6a00 	vldr	s13, [r3]
 8001b02:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <Kalman_Filter_Y+0x2d0>)
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0c:	4b54      	ldr	r3, [pc, #336]	; (8001c60 <Kalman_Filter_Y+0x2d4>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
	K_1 = PCt_1 / E;
 8001b12:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <Kalman_Filter_Y+0x2c8>)
 8001b14:	edd3 6a00 	vldr	s13, [r3]
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <Kalman_Filter_Y+0x2d0>)
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b22:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <Kalman_Filter_Y+0x2d8>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
	t_0 = PCt_0;
 8001b28:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <Kalman_Filter_Y+0x2c4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	; (8001c68 <Kalman_Filter_Y+0x2dc>)
 8001b2e:	6013      	str	r3, [r2, #0]
	t_1 = C_0 * PP[0][1];
 8001b30:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <Kalman_Filter_Y+0x2c0>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001b3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b46:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <Kalman_Filter_Y+0x2e0>)
 8001b48:	edc3 7a00 	vstr	s15, [r3]
	PP[0][0] -= K_0 * t_0;
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001b4e:	ed93 7a00 	vldr	s14, [r3]
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <Kalman_Filter_Y+0x2d4>)
 8001b54:	edd3 6a00 	vldr	s13, [r3]
 8001b58:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <Kalman_Filter_Y+0x2dc>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001b68:	edc3 7a00 	vstr	s15, [r3]
	PP[0][1] -= K_0 * t_1;
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001b6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <Kalman_Filter_Y+0x2d4>)
 8001b74:	edd3 6a00 	vldr	s13, [r3]
 8001b78:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <Kalman_Filter_Y+0x2e0>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001b88:	edc3 7a01 	vstr	s15, [r3, #4]
	PP[1][0] -= K_1 * t_0;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001b8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b92:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <Kalman_Filter_Y+0x2d8>)
 8001b94:	edd3 6a00 	vldr	s13, [r3]
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <Kalman_Filter_Y+0x2dc>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001ba8:	edc3 7a02 	vstr	s15, [r3, #8]
	PP[1][1] -= K_1 * t_1;
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001bae:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <Kalman_Filter_Y+0x2d8>)
 8001bb4:	edd3 6a00 	vldr	s13, [r3]
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <Kalman_Filter_Y+0x2e0>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <Kalman_Filter_Y+0x2b0>)
 8001bc8:	edc3 7a03 	vstr	s15, [r3, #12]
	Angle_Y_Final	+= K_0 * Angle_err;
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <Kalman_Filter_Y+0x2d4>)
 8001bce:	ed93 7a00 	vldr	s14, [r3]
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <Kalman_Filter_Y+0x2bc>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <Kalman_Filter_Y+0x2a8>)
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <Kalman_Filter_Y+0x2a8>)
 8001be8:	edc3 7a00 	vstr	s15, [r3]
	Q_bias	+= K_1 * Angle_err;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <Kalman_Filter_Y+0x2d8>)
 8001bee:	ed93 7a00 	vldr	s14, [r3]
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <Kalman_Filter_Y+0x2bc>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <Kalman_Filter_Y+0x2a0>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <Kalman_Filter_Y+0x2a0>)
 8001c08:	edc3 7a00 	vstr	s15, [r3]
	Gyro_y   = Gyro - Q_bias;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <Kalman_Filter_Y+0x2a0>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ed97 7a00 	vldr	s14, [r7]
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <Kalman_Filter_Y+0x2e4>)
 8001c1c:	edc3 7a00 	vstr	s15, [r3]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	2000029c 	.word	0x2000029c
 8001c30:	2000000c 	.word	0x2000000c
 8001c34:	20000298 	.word	0x20000298
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000014 	.word	0x20000014
 8001c40:	200002c0 	.word	0x200002c0
 8001c44:	20000004 	.word	0x20000004
 8001c48:	200002a0 	.word	0x200002a0
 8001c4c:	20000010 	.word	0x20000010
 8001c50:	200002a4 	.word	0x200002a4
 8001c54:	200002a8 	.word	0x200002a8
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	200002ac 	.word	0x200002ac
 8001c60:	200002b0 	.word	0x200002b0
 8001c64:	200002b4 	.word	0x200002b4
 8001c68:	200002b8 	.word	0x200002b8
 8001c6c:	200002bc 	.word	0x200002bc
 8001c70:	20000284 	.word	0x20000284

08001c74 <Yaw>:

void Yaw (void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
		static const float dt = 0.20 ;
		static const int ZERO_OFFSET_COUT  = (1/dt) ;
		static int g_GetZeroOffset =0;
		static float gyroZ_offset = 0.0f;
		if(g_GetZeroOffset ++ < ZERO_OFFSET_COUT)
 8001c78:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <Yaw+0xe0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	4935      	ldr	r1, [pc, #212]	; (8001d54 <Yaw+0xe0>)
 8001c80:	600a      	str	r2, [r1, #0]
 8001c82:	4a35      	ldr	r2, [pc, #212]	; (8001d58 <Yaw+0xe4>)
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	da0f      	bge.n	8001caa <Yaw+0x36>
		{
			gyroZ_offset += Gyro_z * dt ;
 8001c8a:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <Yaw+0xe8>)
 8001c8c:	ed93 7a00 	vldr	s14, [r3]
 8001c90:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <Yaw+0xec>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9a:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <Yaw+0xf0>)
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <Yaw+0xf0>)
 8001ca6:	edc3 7a00 	vstr	s15, [r3]
		}
		Gyro_z -= gyroZ_offset;
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <Yaw+0xe8>)
 8001cac:	ed93 7a00 	vldr	s14, [r3]
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <Yaw+0xf0>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <Yaw+0xe8>)
 8001cbc:	edc3 7a00 	vstr	s15, [r3]

		static float Angle_Z_Final;
		if(g_GetZeroOffset > ZERO_OFFSET_COUT)
 8001cc0:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <Yaw+0xe0>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <Yaw+0xe4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dd41      	ble.n	8001d50 <Yaw+0xdc>
		{
			Angle_Z_Final += Gyro_z *dt ;
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <Yaw+0xe8>)
 8001cce:	ed93 7a00 	vldr	s14, [r3]
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <Yaw+0xec>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <Yaw+0xf4>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <Yaw+0xf4>)
 8001ce8:	edc3 7a00 	vstr	s15, [r3]
			if(Angle_Z_Final > 360) Angle_Z_Final -= 360 ;
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <Yaw+0xf4>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001d6c <Yaw+0xf8>
 8001cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	dd09      	ble.n	8001d14 <Yaw+0xa0>
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <Yaw+0xf4>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001d6c <Yaw+0xf8>
 8001d0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <Yaw+0xf4>)
 8001d10:	edc3 7a00 	vstr	s15, [r3]
			if(Angle_Z_Final <-360) Angle_Z_Final += 360 ;
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <Yaw+0xf4>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d70 <Yaw+0xfc>
 8001d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	d509      	bpl.n	8001d3c <Yaw+0xc8>
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <Yaw+0xf4>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001d6c <Yaw+0xf8>
 8001d32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <Yaw+0xf4>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]

			printf("Yaw: %f \r\n,",Angle_Z_Final);
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <Yaw+0xf4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fc01 	bl	8000548 <__aeabi_f2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	480a      	ldr	r0, [pc, #40]	; (8001d74 <Yaw+0x100>)
 8001d4c:	f004 fb5e 	bl	800640c <iprintf>
		}


}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200002d0 	.word	0x200002d0
 8001d58:	0800a10c 	.word	0x0800a10c
 8001d5c:	20000288 	.word	0x20000288
 8001d60:	0800a110 	.word	0x0800a110
 8001d64:	200002d4 	.word	0x200002d4
 8001d68:	200002d8 	.word	0x200002d8
 8001d6c:	43b40000 	.word	0x43b40000
 8001d70:	c3b40000 	.word	0xc3b40000
 8001d74:	0800a0f0 	.word	0x0800a0f0

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7c:	f000 fc1e 	bl	80025bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d80:	f000 f80c 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d84:	f7ff f934 	bl	8000ff0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001d88:	f7ff f968 	bl	800105c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001d8c:	f000 fb52 	bl	8002434 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8001d90:	f000 f874 	bl	8001e7c <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Angle_Calcu();
 8001d94:	f7ff f9d8 	bl	8001148 <Angle_Calcu>
 8001d98:	e7fc      	b.n	8001d94 <main+0x1c>
	...

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	; 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	2230      	movs	r2, #48	; 0x30
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 fba3 	bl	80064f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <SystemClock_Config+0xcc>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <SystemClock_Config+0xcc>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <SystemClock_Config+0xcc>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <SystemClock_Config+0xd0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <SystemClock_Config+0xd0>)
 8001de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <SystemClock_Config+0xd0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e00:	2310      	movs	r3, #16
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e04:	2302      	movs	r3, #2
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e10:	23a8      	movs	r3, #168	; 0xa8
 8001e12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e14:	2302      	movs	r3, #2
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1c:	f107 0320 	add.w	r3, r7, #32
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 ff61 	bl	8003ce8 <HAL_RCC_OscConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e2c:	f000 f820 	bl	8001e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e30:	230f      	movs	r3, #15
 8001e32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e34:	2302      	movs	r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 f9c2 	bl	80041d8 <HAL_RCC_ClockConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e5a:	f000 f809 	bl	8001e70 <Error_Handler>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3750      	adds	r7, #80	; 0x50
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <Error_Handler+0x8>
	...

08001e7c <MPU6050_Init>:

//初始化MPU6050
//返回值:0,成功
//    其他,错误代码
uint8_t MPU6050_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
  uint8_t res;
  extern I2C_HandleTypeDef hi2c2;
  HAL_I2C_Init(&hi2c2);
 8001e82:	4823      	ldr	r0, [pc, #140]	; (8001f10 <MPU6050_Init+0x94>)
 8001e84:	f000 ff70 	bl	8002d68 <HAL_I2C_Init>
  MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X80);	//复位MPU6050
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	206b      	movs	r0, #107	; 0x6b
 8001e8c:	f000 f946 	bl	800211c <MPU_Write_Byte>
  MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X00);	//唤醒MPU6050
 8001e90:	2100      	movs	r1, #0
 8001e92:	206b      	movs	r0, #107	; 0x6b
 8001e94:	f000 f942 	bl	800211c <MPU_Write_Byte>
  MPU_Set_Gyro_Fsr(3);					//陀螺仪传感器,±2000dps
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f83f 	bl	8001f1c <MPU_Set_Gyro_Fsr>
  MPU_Set_Accel_Fsr(0);					//加速度传感器,±2g
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f84d 	bl	8001f3e <MPU_Set_Accel_Fsr>
  MPU_Set_Rate(50);						//设置采样率50Hz
 8001ea4:	2032      	movs	r0, #50	; 0x32
 8001ea6:	f000 f88c 	bl	8001fc2 <MPU_Set_Rate>
  MPU_Write_Byte(MPU_INT_EN_REG,0X00);	//关闭所有中断
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2038      	movs	r0, #56	; 0x38
 8001eae:	f000 f935 	bl	800211c <MPU_Write_Byte>
  MPU_Write_Byte(MPU_USER_CTRL_REG,0X00);	//I2C主模式关闭
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	206a      	movs	r0, #106	; 0x6a
 8001eb6:	f000 f931 	bl	800211c <MPU_Write_Byte>
  MPU_Write_Byte(MPU_FIFO_EN_REG,0X00);	//关闭FIFO
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2023      	movs	r0, #35	; 0x23
 8001ebe:	f000 f92d 	bl	800211c <MPU_Write_Byte>
  MPU_Write_Byte(MPU_INTBP_CFG_REG,0X80);	//INT引脚低电平有效
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	2037      	movs	r0, #55	; 0x37
 8001ec6:	f000 f929 	bl	800211c <MPU_Write_Byte>
  res=MPU_Read_Byte(MPU_DEVICE_ID_REG);
 8001eca:	2075      	movs	r0, #117	; 0x75
 8001ecc:	f000 f94c 	bl	8002168 <MPU_Read_Byte>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
 printf("MPU6050:0x%2x\r\n",res);
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480e      	ldr	r0, [pc, #56]	; (8001f14 <MPU6050_Init+0x98>)
 8001eda:	f004 fa97 	bl	800640c <iprintf>
  if(res==MPU_ADDR)//器件ID正确
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b68      	cmp	r3, #104	; 0x68
 8001ee2:	d10f      	bne.n	8001f04 <MPU6050_Init+0x88>
  {
    MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X01);	//设置CLKSEL,PLL X轴为参考
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	206b      	movs	r0, #107	; 0x6b
 8001ee8:	f000 f918 	bl	800211c <MPU_Write_Byte>
    MPU_Write_Byte(MPU_PWR_MGMT2_REG,0X00);	//加速度与陀螺仪都工作
 8001eec:	2100      	movs	r1, #0
 8001eee:	206c      	movs	r0, #108	; 0x6c
 8001ef0:	f000 f914 	bl	800211c <MPU_Write_Byte>
    MPU_Set_Rate(50);						//设置采样率为50Hz
 8001ef4:	2032      	movs	r0, #50	; 0x32
 8001ef6:	f000 f864 	bl	8001fc2 <MPU_Set_Rate>
  }else

		return 1;

  Exam_i = 1;
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <MPU6050_Init+0x9c>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]

  return 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <MPU6050_Init+0x8a>
		return 1;
 8001f04:	2301      	movs	r3, #1
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000214 	.word	0x20000214
 8001f14:	0800a0fc 	.word	0x0800a0fc
 8001f18:	200002f4 	.word	0x200002f4

08001f1c <MPU_Set_Gyro_Fsr>:
//设置MPU6050陀螺仪传感器满量程范围
//fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_GYRO_CFG_REG,fsr<<3);//设置陀螺仪满量程范围
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	201b      	movs	r0, #27
 8001f30:	f000 f8f4 	bl	800211c <MPU_Write_Byte>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <MPU_Set_Accel_Fsr>:
//设置MPU6050加速度传感器满量程范围
//fsr:0,±2g;1,±4g;2,±8g;3,±16g
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG,fsr<<3);//设置加速度传感器满量程范围
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	4619      	mov	r1, r3
 8001f50:	201c      	movs	r0, #28
 8001f52:	f000 f8e3 	bl	800211c <MPU_Write_Byte>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <MPU_Set_LPF>:
//设置MPU6050的数字低通滤波器
//lpf:数字低通滤波频率(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_LPF(uint16_t lpf)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
	uint8_t data=0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
	if(lpf>=188)data=1;
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	2bbb      	cmp	r3, #187	; 0xbb
 8001f72:	d902      	bls.n	8001f7a <MPU_Set_LPF+0x1a>
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e019      	b.n	8001fae <MPU_Set_LPF+0x4e>
	else if(lpf>=98)data=2;
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	2b61      	cmp	r3, #97	; 0x61
 8001f7e:	d902      	bls.n	8001f86 <MPU_Set_LPF+0x26>
 8001f80:	2302      	movs	r3, #2
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e013      	b.n	8001fae <MPU_Set_LPF+0x4e>
	else if(lpf>=42)data=3;
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	2b29      	cmp	r3, #41	; 0x29
 8001f8a:	d902      	bls.n	8001f92 <MPU_Set_LPF+0x32>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e00d      	b.n	8001fae <MPU_Set_LPF+0x4e>
	else if(lpf>=20)data=4;
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	2b13      	cmp	r3, #19
 8001f96:	d902      	bls.n	8001f9e <MPU_Set_LPF+0x3e>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e007      	b.n	8001fae <MPU_Set_LPF+0x4e>
	else if(lpf>=10)data=5;
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b09      	cmp	r3, #9
 8001fa2:	d902      	bls.n	8001faa <MPU_Set_LPF+0x4a>
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e001      	b.n	8001fae <MPU_Set_LPF+0x4e>
	else data=6;
 8001faa:	2306      	movs	r3, #6
 8001fac:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG,data);//设置数字低通滤波器
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	201a      	movs	r0, #26
 8001fb4:	f000 f8b2 	bl	800211c <MPU_Write_Byte>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <MPU_Set_Rate>:
//设置MPU6050的采样率(假定Fs=1KHz)
//rate:4~1000(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Rate(uint16_t rate)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	if(rate>1000)rate=1000;
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd2:	d902      	bls.n	8001fda <MPU_Set_Rate+0x18>
 8001fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd8:	80fb      	strh	r3, [r7, #6]
	if(rate<4)rate=4;
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d801      	bhi.n	8001fe4 <MPU_Set_Rate+0x22>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	80fb      	strh	r3, [r7, #6]
	data=1000/rate-1;
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fea:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
	data=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,data);	//设置数字低通滤波器
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	2019      	movs	r0, #25
 8001ffa:	f000 f88f 	bl	800211c <MPU_Write_Byte>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
 	return MPU_Set_LPF(rate/2);	//自动设置LPF为采样率的一半
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	085b      	lsrs	r3, r3, #1
 8002006:	b29b      	uxth	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ffa9 	bl	8001f60 <MPU_Set_LPF>
 800200e:	4603      	mov	r3, r0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <MPU_Get_Gyroscope>:
//得到陀螺仪值(原始值)
//gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Get_Gyroscope(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
    uint8_t buf[6],res;
	res=MPU_Read_Len(MPU_GYRO_XOUTH_REG,6,buf);
 800201e:	463b      	mov	r3, r7
 8002020:	461a      	mov	r2, r3
 8002022:	2106      	movs	r1, #6
 8002024:	2043      	movs	r0, #67	; 0x43
 8002026:	f000 f857 	bl	80020d8 <MPU_Read_Len>
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
	if(res==0)
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d11a      	bne.n	800206a <MPU_Get_Gyroscope+0x52>
	{
		IMU_Data.Gyro_X=(((uint16_t)buf[0]<<8)|buf[1]);
 8002034:	783b      	ldrb	r3, [r7, #0]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	b21a      	sxth	r2, r3
 800203a:	787b      	ldrb	r3, [r7, #1]
 800203c:	b21b      	sxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	b21a      	sxth	r2, r3
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MPU_Get_Gyroscope+0x5c>)
 8002044:	80da      	strh	r2, [r3, #6]
		IMU_Data.Gyro_Y=(((uint16_t)buf[2]<<8)|buf[3]) ;
 8002046:	78bb      	ldrb	r3, [r7, #2]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	b21a      	sxth	r2, r3
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	b21b      	sxth	r3, r3
 8002050:	4313      	orrs	r3, r2
 8002052:	b21a      	sxth	r2, r3
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <MPU_Get_Gyroscope+0x5c>)
 8002056:	811a      	strh	r2, [r3, #8]
		IMU_Data.Gyro_Z=(((uint16_t)buf[4]<<8)|buf[5]) ;
 8002058:	793b      	ldrb	r3, [r7, #4]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21a      	sxth	r2, r3
 800205e:	797b      	ldrb	r3, [r7, #5]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b21a      	sxth	r2, r3
 8002066:	4b03      	ldr	r3, [pc, #12]	; (8002074 <MPU_Get_Gyroscope+0x5c>)
 8002068:	815a      	strh	r2, [r3, #10]
	}

    return res;
 800206a:	79fb      	ldrb	r3, [r7, #7]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200002dc 	.word	0x200002dc

08002078 <MPU_Get_Accelerometer>:
//得到加速度值(原始值)
//ax,ay,az:陀螺仪x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Get_Accelerometer(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
    uint8_t buf[6],res;
	res=MPU_Read_Len(MPU_ACCEL_XOUTH_REG,6,buf);
 800207e:	463b      	mov	r3, r7
 8002080:	461a      	mov	r2, r3
 8002082:	2106      	movs	r1, #6
 8002084:	203b      	movs	r0, #59	; 0x3b
 8002086:	f000 f827 	bl	80020d8 <MPU_Read_Len>
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
	if(res==0)
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d11a      	bne.n	80020ca <MPU_Get_Accelerometer+0x52>
	{
		IMU_Data.Accel_X=((uint16_t)buf[0]<<8)|buf[1];
 8002094:	783b      	ldrb	r3, [r7, #0]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b21a      	sxth	r2, r3
 800209a:	787b      	ldrb	r3, [r7, #1]
 800209c:	b21b      	sxth	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <MPU_Get_Accelerometer+0x5c>)
 80020a4:	801a      	strh	r2, [r3, #0]
		IMU_Data.Accel_Y=((uint16_t)buf[2]<<8)|buf[3];
 80020a6:	78bb      	ldrb	r3, [r7, #2]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <MPU_Get_Accelerometer+0x5c>)
 80020b6:	805a      	strh	r2, [r3, #2]
		IMU_Data.Accel_Z=((uint16_t)buf[4]<<8)|buf[5];
 80020b8:	793b      	ldrb	r3, [r7, #4]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	b21a      	sxth	r2, r3
 80020be:	797b      	ldrb	r3, [r7, #5]
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <MPU_Get_Accelerometer+0x5c>)
 80020c8:	809a      	strh	r2, [r3, #4]
	}
    return res;
 80020ca:	79fb      	ldrb	r3, [r7, #7]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200002dc 	.word	0x200002dc

080020d8 <MPU_Read_Len>:
//len:要读取的长度
//buf:读取到的数据存储区
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Read_Len(uint8_t reg,uint8_t len,uint8_t *buf)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af04      	add	r7, sp, #16
 80020de:	4603      	mov	r3, r0
 80020e0:	603a      	str	r2, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	460b      	mov	r3, r1
 80020e6:	71bb      	strb	r3, [r7, #6]
  extern I2C_HandleTypeDef hi2c2;
  HAL_I2C_Mem_Read(&hi2c2, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 0xfff);
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	f640 71ff 	movw	r1, #4095	; 0xfff
 80020f4:	9102      	str	r1, [sp, #8]
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2301      	movs	r3, #1
 80020fe:	21d1      	movs	r1, #209	; 0xd1
 8002100:	4805      	ldr	r0, [pc, #20]	; (8002118 <MPU_Read_Len+0x40>)
 8002102:	f001 f86f 	bl	80031e4 <HAL_I2C_Mem_Read>
  HAL_Delay(100);
 8002106:	2064      	movs	r0, #100	; 0x64
 8002108:	f000 faca 	bl	80026a0 <HAL_Delay>

  return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000214 	.word	0x20000214

0800211c <MPU_Write_Byte>:
//reg:寄存器地址
//data:数据
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Write_Byte(uint8_t reg,uint8_t data)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af04      	add	r7, sp, #16
 8002122:	4603      	mov	r3, r0
 8002124:	460a      	mov	r2, r1
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	4613      	mov	r3, r2
 800212a:	71bb      	strb	r3, [r7, #6]
  extern I2C_HandleTypeDef hi2c2;
  unsigned char W_Data=0;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]

  W_Data = data;
 8002130:	79bb      	ldrb	r3, [r7, #6]
 8002132:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, &W_Data, 1, 0xfff);
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	b29a      	uxth	r2, r3
 8002138:	f640 73ff 	movw	r3, #4095	; 0xfff
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	2301      	movs	r3, #1
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	f107 030f 	add.w	r3, r7, #15
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2301      	movs	r3, #1
 800214a:	21d0      	movs	r1, #208	; 0xd0
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <MPU_Write_Byte+0x48>)
 800214e:	f000 ff4f 	bl	8002ff0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8002152:	2064      	movs	r0, #100	; 0x64
 8002154:	f000 faa4 	bl	80026a0 <HAL_Delay>

  return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000214 	.word	0x20000214

08002168 <MPU_Read_Byte>:
//IIC读一个字节
//reg:寄存器地址
//返回值:读到的数据
uint8_t MPU_Read_Byte(uint8_t reg)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af04      	add	r7, sp, #16
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  extern I2C_HandleTypeDef hi2c2;
  unsigned char R_Data=0;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Mem_Read(&hi2c2, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, &R_Data, 1, 0xfff);
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	b29a      	uxth	r2, r3
 800217a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	2301      	movs	r3, #1
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	f107 030f 	add.w	r3, r7, #15
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	21d1      	movs	r1, #209	; 0xd1
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MPU_Read_Byte+0x3c>)
 8002190:	f001 f828 	bl	80031e4 <HAL_I2C_Mem_Read>
  HAL_Delay(100);
 8002194:	2064      	movs	r0, #100	; 0x64
 8002196:	f000 fa83 	bl	80026a0 <HAL_Delay>

  return R_Data;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000214 	.word	0x20000214

080021a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_MspInit+0x4c>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <HAL_MspInit+0x4c>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_MspInit+0x4c>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_MspInit+0x4c>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <HAL_MspInit+0x4c>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_MspInit+0x4c>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800

080021f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <NMI_Handler+0x4>

080021fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <HardFault_Handler+0x4>

08002204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <MemManage_Handler+0x4>

0800220a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <BusFault_Handler+0x4>

08002210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <UsageFault_Handler+0x4>

08002216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002244:	f000 fa0c 	bl	8002660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <USART1_IRQHandler+0x10>)
 8002252:	f002 fa81 	bl	8004758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200002fc 	.word	0x200002fc

08002260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return 1;
 8002264:	2301      	movs	r3, #1
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_kill>:

int _kill(int pid, int sig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800227a:	f004 f98f 	bl	800659c <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2216      	movs	r2, #22
 8002282:	601a      	str	r2, [r3, #0]
  return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_exit>:

void _exit (int status)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffe7 	bl	8002270 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022a2:	e7fe      	b.n	80022a2 <_exit+0x12>

080022a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e00a      	b.n	80022cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022b6:	f3af 8000 	nop.w
 80022ba:	4601      	mov	r1, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf0      	blt.n	80022b6 <_read+0x12>
  }

  return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e009      	b.n	8002304 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f889 	bl	8002410 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf1      	blt.n	80022f0 <_write+0x12>
  }
  return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_close>:

int _close(int file)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233e:	605a      	str	r2, [r3, #4]
  return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_isatty>:

int _isatty(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f004 f8f4 	bl	800659c <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20020000 	.word	0x20020000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	200002f8 	.word	0x200002f8
 80023e8:	20000490 	.word	0x20000490

080023ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8002418:	1d39      	adds	r1, r7, #4
 800241a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241e:	2201      	movs	r2, #1
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <__io_putchar+0x20>)
 8002422:	f002 f906 	bl	8004632 <HAL_UART_Transmit>
    return ch;
 8002426:	687b      	ldr	r3, [r7, #4]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200002fc 	.word	0x200002fc

08002434 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_USART1_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800246c:	f002 f894 	bl	8004598 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f7ff fcfb 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200002fc 	.word	0x200002fc
 8002484:	40011000 	.word	0x40011000

08002488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <HAL_UART_MspInit+0xd0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d152      	bne.n	8002550 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_UART_MspInit+0xd4>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a2a      	ldr	r2, [pc, #168]	; (800255c <HAL_UART_MspInit+0xd4>)
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_UART_MspInit+0xd4>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_UART_MspInit+0xd4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a23      	ldr	r2, [pc, #140]	; (800255c <HAL_UART_MspInit+0xd4>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_UART_MspInit+0xd4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_UART_MspInit+0xd4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_UART_MspInit+0xd4>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_UART_MspInit+0xd4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800250e:	2307      	movs	r3, #7
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	4811      	ldr	r0, [pc, #68]	; (8002560 <HAL_UART_MspInit+0xd8>)
 800251a:	f000 fa89 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800251e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002530:	2307      	movs	r3, #7
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4619      	mov	r1, r3
 800253a:	480a      	ldr	r0, [pc, #40]	; (8002564 <HAL_UART_MspInit+0xdc>)
 800253c:	f000 fa78 	bl	8002a30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002540:	2200      	movs	r2, #0
 8002542:	2100      	movs	r1, #0
 8002544:	2025      	movs	r0, #37	; 0x25
 8002546:	f000 f9aa 	bl	800289e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800254a:	2025      	movs	r0, #37	; 0x25
 800254c:	f000 f9c3 	bl	80028d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002550:	bf00      	nop
 8002552:	3728      	adds	r7, #40	; 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40011000 	.word	0x40011000
 800255c:	40023800 	.word	0x40023800
 8002560:	40020400 	.word	0x40020400
 8002564:	40020000 	.word	0x40020000

08002568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800256c:	480d      	ldr	r0, [pc, #52]	; (80025a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800256e:	490e      	ldr	r1, [pc, #56]	; (80025a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002570:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002574:	e002      	b.n	800257c <LoopCopyDataInit>

08002576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257a:	3304      	adds	r3, #4

0800257c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800257c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002580:	d3f9      	bcc.n	8002576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002584:	4c0b      	ldr	r4, [pc, #44]	; (80025b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002588:	e001      	b.n	800258e <LoopFillZerobss>

0800258a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800258c:	3204      	adds	r2, #4

0800258e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002590:	d3fb      	bcc.n	800258a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002592:	f7ff ff2b 	bl	80023ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002596:	f004 f807 	bl	80065a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259a:	f7ff fbed 	bl	8001d78 <main>
  bx  lr    
 800259e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80025ac:	0800a5a8 	.word	0x0800a5a8
  ldr r2, =_sbss
 80025b0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80025b4:	20000490 	.word	0x20000490

080025b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC_IRQHandler>
	...

080025bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_Init+0x40>)
 80025c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_Init+0x40>)
 80025d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_Init+0x40>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f000 f94f 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ea:	200f      	movs	r0, #15
 80025ec:	f000 f808 	bl	8002600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f0:	f7ff fdda 	bl	80021a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00

08002600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_InitTick+0x54>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_InitTick+0x58>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002616:	fbb3 f3f1 	udiv	r3, r3, r1
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f967 	bl	80028f2 <HAL_SYSTICK_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00e      	b.n	800264c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d80a      	bhi.n	800264a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002634:	2200      	movs	r2, #0
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f000 f92f 	bl	800289e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <HAL_InitTick+0x5c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	e000      	b.n	800264c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000024 	.word	0x20000024
 8002658:	2000002c 	.word	0x2000002c
 800265c:	20000028 	.word	0x20000028

08002660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_IncTick+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_IncTick+0x24>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <HAL_IncTick+0x24>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	2000002c 	.word	0x2000002c
 8002684:	20000340 	.word	0x20000340

08002688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_GetTick+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000340 	.word	0x20000340

080026a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff ffee 	bl	8002688 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d005      	beq.n	80026c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_Delay+0x44>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026c6:	bf00      	nop
 80026c8:	f7ff ffde 	bl	8002688 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d8f7      	bhi.n	80026c8 <HAL_Delay+0x28>
  {
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000002c 	.word	0x2000002c

080026e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	; (800272c <__NVIC_SetPriorityGrouping+0x44>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <__NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	2b00      	cmp	r3, #0
 800275c:	db0b      	blt.n	8002776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	4907      	ldr	r1, [pc, #28]	; (8002784 <__NVIC_EnableIRQ+0x38>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2001      	movs	r0, #1
 800276e:	fa00 f202 	lsl.w	r2, r0, r2
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	; (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002854:	d301      	bcc.n	800285a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <SysTick_Config+0x40>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002862:	210f      	movs	r1, #15
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f7ff ff8e 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <SysTick_Config+0x40>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <SysTick_Config+0x40>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff29 	bl	80026e8 <__NVIC_SetPriorityGrouping>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b0:	f7ff ff3e 	bl	8002730 <__NVIC_GetPriorityGrouping>
 80028b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7ff ff8e 	bl	80027dc <NVIC_EncodePriority>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff5d 	bl	8002788 <__NVIC_SetPriority>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff31 	bl	800274c <__NVIC_EnableIRQ>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ffa2 	bl	8002844 <SysTick_Config>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff feb6 	bl	8002688 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d008      	beq.n	800293c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e052      	b.n	80029e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0216 	bic.w	r2, r2, #22
 800294a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <HAL_DMA_Abort+0x62>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0208 	bic.w	r2, r2, #8
 800297a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298c:	e013      	b.n	80029b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800298e:	f7ff fe7b 	bl	8002688 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b05      	cmp	r3, #5
 800299a:	d90c      	bls.n	80029b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e015      	b.n	80029e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e4      	bne.n	800298e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	223f      	movs	r2, #63	; 0x3f
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d004      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e00c      	b.n	8002a22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e16b      	b.n	8002d24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f040 815a 	bne.w	8002d1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d005      	beq.n	8002a82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d130      	bne.n	8002ae4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 0201 	and.w	r2, r3, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d017      	beq.n	8002b20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d123      	bne.n	8002b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	08da      	lsrs	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3208      	adds	r2, #8
 8002b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	69b9      	ldr	r1, [r7, #24]
 8002b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0203 	and.w	r2, r3, #3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80b4 	beq.w	8002d1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b60      	ldr	r3, [pc, #384]	; (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4a5f      	ldr	r2, [pc, #380]	; (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	; (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd2:	4a5b      	ldr	r2, [pc, #364]	; (8002d40 <HAL_GPIO_Init+0x310>)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_GPIO_Init+0x314>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d02b      	beq.n	8002c56 <HAL_GPIO_Init+0x226>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_GPIO_Init+0x318>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d025      	beq.n	8002c52 <HAL_GPIO_Init+0x222>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_GPIO_Init+0x31c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01f      	beq.n	8002c4e <HAL_GPIO_Init+0x21e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_GPIO_Init+0x320>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d019      	beq.n	8002c4a <HAL_GPIO_Init+0x21a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4e      	ldr	r2, [pc, #312]	; (8002d54 <HAL_GPIO_Init+0x324>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x216>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4d      	ldr	r2, [pc, #308]	; (8002d58 <HAL_GPIO_Init+0x328>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x212>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4c      	ldr	r2, [pc, #304]	; (8002d5c <HAL_GPIO_Init+0x32c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x20e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <HAL_GPIO_Init+0x330>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x20a>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e00e      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	e00c      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c3e:	2306      	movs	r3, #6
 8002c40:	e00a      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c42:	2305      	movs	r3, #5
 8002c44:	e008      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c56:	2300      	movs	r3, #0
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	f002 0203 	and.w	r2, r2, #3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4093      	lsls	r3, r2
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c68:	4935      	ldr	r1, [pc, #212]	; (8002d40 <HAL_GPIO_Init+0x310>)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c76:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9a:	4a32      	ldr	r2, [pc, #200]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca0:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cee:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d18:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	f67f ae90 	bls.w	8002a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	40020c00 	.word	0x40020c00
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40021400 	.word	0x40021400
 8002d5c:	40021800 	.word	0x40021800
 8002d60:	40021c00 	.word	0x40021c00
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e12b      	b.n	8002fd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe f992 	bl	80010b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dcc:	f001 fbbc 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 8002dd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a81      	ldr	r2, [pc, #516]	; (8002fdc <HAL_I2C_Init+0x274>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d807      	bhi.n	8002dec <HAL_I2C_Init+0x84>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a80      	ldr	r2, [pc, #512]	; (8002fe0 <HAL_I2C_Init+0x278>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bf94      	ite	ls
 8002de4:	2301      	movls	r3, #1
 8002de6:	2300      	movhi	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e006      	b.n	8002dfa <HAL_I2C_Init+0x92>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a7d      	ldr	r2, [pc, #500]	; (8002fe4 <HAL_I2C_Init+0x27c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bf94      	ite	ls
 8002df4:	2301      	movls	r3, #1
 8002df6:	2300      	movhi	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0e7      	b.n	8002fd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a78      	ldr	r2, [pc, #480]	; (8002fe8 <HAL_I2C_Init+0x280>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0c9b      	lsrs	r3, r3, #18
 8002e0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a6a      	ldr	r2, [pc, #424]	; (8002fdc <HAL_I2C_Init+0x274>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d802      	bhi.n	8002e3c <HAL_I2C_Init+0xd4>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	e009      	b.n	8002e50 <HAL_I2C_Init+0xe8>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	4a69      	ldr	r2, [pc, #420]	; (8002fec <HAL_I2C_Init+0x284>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	3301      	adds	r3, #1
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	495c      	ldr	r1, [pc, #368]	; (8002fdc <HAL_I2C_Init+0x274>)
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	d819      	bhi.n	8002ea4 <HAL_I2C_Init+0x13c>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e59      	subs	r1, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7e:	1c59      	adds	r1, r3, #1
 8002e80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e84:	400b      	ands	r3, r1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_I2C_Init+0x138>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1e59      	subs	r1, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9e:	e051      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	e04f      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d111      	bne.n	8002ed0 <HAL_I2C_Init+0x168>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e012      	b.n	8002ef6 <HAL_I2C_Init+0x18e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1e58      	subs	r0, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	0099      	lsls	r1, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Init+0x196>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e022      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10e      	bne.n	8002f24 <HAL_I2C_Init+0x1bc>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1e58      	subs	r0, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	440b      	add	r3, r1
 8002f14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f22:	e00f      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e58      	subs	r0, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	0099      	lsls	r1, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	6809      	ldr	r1, [r1, #0]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6911      	ldr	r1, [r2, #16]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68d2      	ldr	r2, [r2, #12]
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	000186a0 	.word	0x000186a0
 8002fe0:	001e847f 	.word	0x001e847f
 8002fe4:	003d08ff 	.word	0x003d08ff
 8002fe8:	431bde83 	.word	0x431bde83
 8002fec:	10624dd3 	.word	0x10624dd3

08002ff0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	817b      	strh	r3, [r7, #10]
 8003002:	460b      	mov	r3, r1
 8003004:	813b      	strh	r3, [r7, #8]
 8003006:	4613      	mov	r3, r2
 8003008:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800300a:	f7ff fb3d 	bl	8002688 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b20      	cmp	r3, #32
 800301a:	f040 80d9 	bne.w	80031d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2319      	movs	r3, #25
 8003024:	2201      	movs	r2, #1
 8003026:	496d      	ldr	r1, [pc, #436]	; (80031dc <HAL_I2C_Mem_Write+0x1ec>)
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fc7f 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003034:	2302      	movs	r3, #2
 8003036:	e0cc      	b.n	80031d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_I2C_Mem_Write+0x56>
 8003042:	2302      	movs	r3, #2
 8003044:	e0c5      	b.n	80031d2 <HAL_I2C_Mem_Write+0x1e2>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d007      	beq.n	800306c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800307a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2221      	movs	r2, #33	; 0x21
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2240      	movs	r2, #64	; 0x40
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a3a      	ldr	r2, [r7, #32]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a4d      	ldr	r2, [pc, #308]	; (80031e0 <HAL_I2C_Mem_Write+0x1f0>)
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ae:	88f8      	ldrh	r0, [r7, #6]
 80030b0:	893a      	ldrh	r2, [r7, #8]
 80030b2:	8979      	ldrh	r1, [r7, #10]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	4603      	mov	r3, r0
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fab6 	bl	8003630 <I2C_RequestMemoryWrite>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d052      	beq.n	8003170 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e081      	b.n	80031d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fd00 	bl	8003ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d107      	bne.n	80030f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e06b      	b.n	80031d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d11b      	bne.n	8003170 <HAL_I2C_Mem_Write+0x180>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1aa      	bne.n	80030ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fcec 	bl	8003b5a <I2C_WaitOnBTFFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00d      	beq.n	80031a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2b04      	cmp	r3, #4
 800318e:	d107      	bne.n	80031a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e016      	b.n	80031d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	00100002 	.word	0x00100002
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	4608      	mov	r0, r1
 80031ee:	4611      	mov	r1, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	817b      	strh	r3, [r7, #10]
 80031f6:	460b      	mov	r3, r1
 80031f8:	813b      	strh	r3, [r7, #8]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031fe:	f7ff fa43 	bl	8002688 <HAL_GetTick>
 8003202:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b20      	cmp	r3, #32
 800320e:	f040 8208 	bne.w	8003622 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2319      	movs	r3, #25
 8003218:	2201      	movs	r2, #1
 800321a:	497b      	ldr	r1, [pc, #492]	; (8003408 <HAL_I2C_Mem_Read+0x224>)
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fb85 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
 800322a:	e1fb      	b.n	8003624 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_I2C_Mem_Read+0x56>
 8003236:	2302      	movs	r3, #2
 8003238:	e1f4      	b.n	8003624 <HAL_I2C_Mem_Read+0x440>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d007      	beq.n	8003260 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2222      	movs	r2, #34	; 0x22
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2240      	movs	r2, #64	; 0x40
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a5b      	ldr	r2, [pc, #364]	; (800340c <HAL_I2C_Mem_Read+0x228>)
 80032a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032a2:	88f8      	ldrh	r0, [r7, #6]
 80032a4:	893a      	ldrh	r2, [r7, #8]
 80032a6:	8979      	ldrh	r1, [r7, #10]
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	4603      	mov	r3, r0
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fa52 	bl	800375c <I2C_RequestMemoryRead>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e1b0      	b.n	8003624 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d113      	bne.n	80032f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	623b      	str	r3, [r7, #32]
 80032de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e184      	b.n	80035fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d11b      	bne.n	8003332 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e164      	b.n	80035fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	2b02      	cmp	r3, #2
 8003338:	d11b      	bne.n	8003372 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003348:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003358:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	e144      	b.n	80035fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003388:	e138      	b.n	80035fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	2b03      	cmp	r3, #3
 8003390:	f200 80f1 	bhi.w	8003576 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	2b01      	cmp	r3, #1
 800339a:	d123      	bne.n	80033e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fc1b 	bl	8003bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e139      	b.n	8003624 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033e2:	e10b      	b.n	80035fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d14e      	bne.n	800348a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	2200      	movs	r2, #0
 80033f4:	4906      	ldr	r1, [pc, #24]	; (8003410 <HAL_I2C_Mem_Read+0x22c>)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa98 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e10e      	b.n	8003624 <HAL_I2C_Mem_Read+0x440>
 8003406:	bf00      	nop
 8003408:	00100002 	.word	0x00100002
 800340c:	ffff0000 	.word	0xffff0000
 8003410:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003488:	e0b8      	b.n	80035fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	2200      	movs	r2, #0
 8003492:	4966      	ldr	r1, [pc, #408]	; (800362c <HAL_I2C_Mem_Read+0x448>)
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 fa49 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0bf      	b.n	8003624 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	2200      	movs	r2, #0
 80034ee:	494f      	ldr	r1, [pc, #316]	; (800362c <HAL_I2C_Mem_Read+0x448>)
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fa1b 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e091      	b.n	8003624 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003574:	e042      	b.n	80035fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fb2e 	bl	8003bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e04c      	b.n	8003624 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d118      	bne.n	80035fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f aec2 	bne.w	800338a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3728      	adds	r7, #40	; 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	00010004 	.word	0x00010004

08003630 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	4608      	mov	r0, r1
 800363a:	4611      	mov	r1, r2
 800363c:	461a      	mov	r2, r3
 800363e:	4603      	mov	r3, r0
 8003640:	817b      	strh	r3, [r7, #10]
 8003642:	460b      	mov	r3, r1
 8003644:	813b      	strh	r3, [r7, #8]
 8003646:	4613      	mov	r3, r2
 8003648:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	2200      	movs	r2, #0
 8003662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f960 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003680:	d103      	bne.n	800368a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e05f      	b.n	800374e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800369c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	492d      	ldr	r1, [pc, #180]	; (8003758 <I2C_RequestMemoryWrite+0x128>)
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f998 	bl	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e04c      	b.n	800374e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036cc:	6a39      	ldr	r1, [r7, #32]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fa02 	bl	8003ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d107      	bne.n	80036f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e02b      	b.n	800374e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036fc:	893b      	ldrh	r3, [r7, #8]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	611a      	str	r2, [r3, #16]
 8003706:	e021      	b.n	800374c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003708:	893b      	ldrh	r3, [r7, #8]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	b29b      	uxth	r3, r3
 800370e:	b2da      	uxtb	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	6a39      	ldr	r1, [r7, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f9dc 	bl	8003ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b04      	cmp	r3, #4
 800372c:	d107      	bne.n	800373e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e005      	b.n	800374e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003742:	893b      	ldrh	r3, [r7, #8]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	00010002 	.word	0x00010002

0800375c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	461a      	mov	r2, r3
 800376a:	4603      	mov	r3, r0
 800376c:	817b      	strh	r3, [r7, #10]
 800376e:	460b      	mov	r3, r1
 8003770:	813b      	strh	r3, [r7, #8]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003794:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2200      	movs	r2, #0
 800379e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f8c2 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037bc:	d103      	bne.n	80037c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0aa      	b.n	8003920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ca:	897b      	ldrh	r3, [r7, #10]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	4952      	ldr	r1, [pc, #328]	; (8003928 <I2C_RequestMemoryRead+0x1cc>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f8fa 	bl	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e097      	b.n	8003920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	6a39      	ldr	r1, [r7, #32]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f964 	bl	8003ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b04      	cmp	r3, #4
 800381c:	d107      	bne.n	800382e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e076      	b.n	8003920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d105      	bne.n	8003844 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003838:	893b      	ldrh	r3, [r7, #8]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	611a      	str	r2, [r3, #16]
 8003842:	e021      	b.n	8003888 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	b29b      	uxth	r3, r3
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	6a39      	ldr	r1, [r7, #32]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f93e 	bl	8003ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2b04      	cmp	r3, #4
 8003868:	d107      	bne.n	800387a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003878:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e050      	b.n	8003920 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800387e:	893b      	ldrh	r3, [r7, #8]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	6a39      	ldr	r1, [r7, #32]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f923 	bl	8003ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00d      	beq.n	80038b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2b04      	cmp	r3, #4
 800389e:	d107      	bne.n	80038b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e035      	b.n	8003920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f82b 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ea:	d103      	bne.n	80038f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e013      	b.n	8003920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	6a3a      	ldr	r2, [r7, #32]
 800390c:	4906      	ldr	r1, [pc, #24]	; (8003928 <I2C_RequestMemoryRead+0x1cc>)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f863 	bl	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	00010002 	.word	0x00010002

0800392c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800393c:	e025      	b.n	800398a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d021      	beq.n	800398a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003946:	f7fe fe9f 	bl	8002688 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d116      	bne.n	800398a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e023      	b.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d10d      	bne.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	43da      	mvns	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	e00c      	b.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d0b6      	beq.n	800393e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e8:	e051      	b.n	8003a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f8:	d123      	bne.n	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e046      	b.n	8003ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d021      	beq.n	8003a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4a:	f7fe fe1d 	bl	8002688 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d302      	bcc.n	8003a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d116      	bne.n	8003a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f043 0220 	orr.w	r2, r3, #32
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e020      	b.n	8003ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10c      	bne.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf14      	ite	ne
 8003aaa:	2301      	movne	r3, #1
 8003aac:	2300      	moveq	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	e00b      	b.n	8003aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	43da      	mvns	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4013      	ands	r3, r2
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d18d      	bne.n	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae4:	e02d      	b.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f8ce 	bl	8003c88 <I2C_IsAcknowledgeFailed>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e02d      	b.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d021      	beq.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fe fdc3 	bl	8002688 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d116      	bne.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0220 	orr.w	r2, r3, #32
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e007      	b.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d1ca      	bne.n	8003ae6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b66:	e02d      	b.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f88d 	bl	8003c88 <I2C_IsAcknowledgeFailed>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e02d      	b.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d021      	beq.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b80:	f7fe fd82 	bl	8002688 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d302      	bcc.n	8003b96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d116      	bne.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e007      	b.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d1ca      	bne.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be8:	e042      	b.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d119      	bne.n	8003c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0210 	mvn.w	r2, #16
 8003c00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e029      	b.n	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2c:	f7fe fd2c 	bl	8002688 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d302      	bcc.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d116      	bne.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e007      	b.n	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d1b5      	bne.n	8003bea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d11b      	bne.n	8003cd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ca8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0204 	orr.w	r2, r3, #4
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e267      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d075      	beq.n	8003df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d06:	4b88      	ldr	r3, [pc, #544]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d00c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b85      	ldr	r3, [pc, #532]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d112      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b82      	ldr	r3, [pc, #520]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	4b7e      	ldr	r3, [pc, #504]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x108>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d157      	bne.n	8003df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e242      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_OscConfig+0x74>
 8003d4e:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a75      	ldr	r2, [pc, #468]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b70      	ldr	r3, [pc, #448]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6f      	ldr	r2, [pc, #444]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b6d      	ldr	r3, [pc, #436]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6c      	ldr	r2, [pc, #432]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d80:	4b69      	ldr	r3, [pc, #420]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a68      	ldr	r2, [pc, #416]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a65      	ldr	r2, [pc, #404]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe fc72 	bl	8002688 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe fc6e 	bl	8002688 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e207      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b5b      	ldr	r3, [pc, #364]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xc0>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fc5e 	bl	8002688 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fc5a 	bl	8002688 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1f3      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xe8>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d063      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b47      	ldr	r3, [pc, #284]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b44      	ldr	r3, [pc, #272]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1c7      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4937      	ldr	r1, [pc, #220]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e03a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x244>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fe fc13 	bl	8002688 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e66:	f7fe fc0f 	bl	8002688 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1a8      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4925      	ldr	r1, [pc, #148]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]
 8003e98:	e015      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9a:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <HAL_RCC_OscConfig+0x244>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fbf2 	bl	8002688 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea8:	f7fe fbee 	bl	8002688 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e187      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d036      	beq.n	8003f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_RCC_OscConfig+0x248>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fe fbd2 	bl	8002688 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee8:	f7fe fbce 	bl	8002688 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e167      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x200>
 8003f06:	e01b      	b.n	8003f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCC_OscConfig+0x248>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fe fbbb 	bl	8002688 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f14:	e00e      	b.n	8003f34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fe fbb7 	bl	8002688 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d907      	bls.n	8003f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e150      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	42470000 	.word	0x42470000
 8003f30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ea      	bne.n	8003f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8097 	beq.w	800407c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f52:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	4b7d      	ldr	r3, [pc, #500]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a7c      	ldr	r2, [pc, #496]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b77      	ldr	r3, [pc, #476]	; (800415c <HAL_RCC_OscConfig+0x474>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d118      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8a:	4b74      	ldr	r3, [pc, #464]	; (800415c <HAL_RCC_OscConfig+0x474>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a73      	ldr	r2, [pc, #460]	; (800415c <HAL_RCC_OscConfig+0x474>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f96:	f7fe fb77 	bl	8002688 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7fe fb73 	bl	8002688 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e10c      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	4b6a      	ldr	r3, [pc, #424]	; (800415c <HAL_RCC_OscConfig+0x474>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2ea>
 8003fc4:	4b64      	ldr	r3, [pc, #400]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	4a63      	ldr	r2, [pc, #396]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd0:	e01c      	b.n	800400c <HAL_RCC_OscConfig+0x324>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x30c>
 8003fda:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a5e      	ldr	r2, [pc, #376]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a5b      	ldr	r2, [pc, #364]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0x324>
 8003ff4:	4b58      	ldr	r3, [pc, #352]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a57      	ldr	r2, [pc, #348]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8004000:	4b55      	ldr	r3, [pc, #340]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4a54      	ldr	r2, [pc, #336]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004006:	f023 0304 	bic.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fe fb38 	bl	8002688 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401a:	e00a      	b.n	8004032 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401c:	f7fe fb34 	bl	8002688 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0cb      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004032:	4b49      	ldr	r3, [pc, #292]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ee      	beq.n	800401c <HAL_RCC_OscConfig+0x334>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004040:	f7fe fb22 	bl	8002688 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004046:	e00a      	b.n	800405e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fe fb1e 	bl	8002688 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0b5      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405e:	4b3e      	ldr	r3, [pc, #248]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ee      	bne.n	8004048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	4a38      	ldr	r2, [pc, #224]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a1 	beq.w	80041c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b08      	cmp	r3, #8
 8004090:	d05c      	beq.n	800414c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d141      	bne.n	800411e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409a:	4b31      	ldr	r3, [pc, #196]	; (8004160 <HAL_RCC_OscConfig+0x478>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fe faf2 	bl	8002688 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a8:	f7fe faee 	bl	8002688 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e087      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	019b      	lsls	r3, r3, #6
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	3b01      	subs	r3, #1
 80040e0:	041b      	lsls	r3, r3, #16
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	491b      	ldr	r1, [pc, #108]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <HAL_RCC_OscConfig+0x478>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fe fac7 	bl	8002688 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fe fac3 	bl	8002688 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e05c      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x416>
 800411c:	e054      	b.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_RCC_OscConfig+0x478>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fe fab0 	bl	8002688 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe faac 	bl	8002688 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e045      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
 800414a:	e03d      	b.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e038      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
 8004158:	40023800 	.word	0x40023800
 800415c:	40007000 	.word	0x40007000
 8004160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004164:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x4ec>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d028      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d121      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d11a      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004194:	4013      	ands	r3, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800419a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419c:	4293      	cmp	r3, r2
 800419e:	d111      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	3b01      	subs	r3, #1
 80041ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800

080041d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0cc      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b68      	ldr	r3, [pc, #416]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d90c      	bls.n	8004214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b65      	ldr	r3, [pc, #404]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b63      	ldr	r3, [pc, #396]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b8      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800422c:	4b59      	ldr	r3, [pc, #356]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a58      	ldr	r2, [pc, #352]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004244:	4b53      	ldr	r3, [pc, #332]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4a52      	ldr	r2, [pc, #328]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800424e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b50      	ldr	r3, [pc, #320]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	494d      	ldr	r1, [pc, #308]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d044      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d119      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e07f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d003      	beq.n	8004296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004292:	2b03      	cmp	r3, #3
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b3f      	ldr	r3, [pc, #252]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e06f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e067      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b6:	4b37      	ldr	r3, [pc, #220]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4934      	ldr	r1, [pc, #208]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c8:	f7fe f9de 	bl	8002688 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d0:	f7fe f9da 	bl	8002688 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e04f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 020c 	and.w	r2, r3, #12
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1eb      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f8:	4b25      	ldr	r3, [pc, #148]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d20c      	bcs.n	8004320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b22      	ldr	r3, [pc, #136]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b20      	ldr	r3, [pc, #128]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e032      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4916      	ldr	r1, [pc, #88]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	490e      	ldr	r1, [pc, #56]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800435e:	f000 f821 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8004362:	4602      	mov	r2, r0
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	490a      	ldr	r1, [pc, #40]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	5ccb      	ldrb	r3, [r1, r3]
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe f93e 	bl	8002600 <HAL_InitTick>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023c00 	.word	0x40023c00
 8004394:	40023800 	.word	0x40023800
 8004398:	0800a114 	.word	0x0800a114
 800439c:	20000024 	.word	0x20000024
 80043a0:	20000028 	.word	0x20000028

080043a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a8:	b090      	sub	sp, #64	; 0x40
 80043aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
 80043b0:	2300      	movs	r3, #0
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b4:	2300      	movs	r3, #0
 80043b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043bc:	4b59      	ldr	r3, [pc, #356]	; (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d00d      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x40>
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	f200 80a1 	bhi.w	8004510 <HAL_RCC_GetSysClockFreq+0x16c>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x34>
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d003      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0x3a>
 80043d6:	e09b      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4b53      	ldr	r3, [pc, #332]	; (8004528 <HAL_RCC_GetSysClockFreq+0x184>)
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043dc:	e09b      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043de:	4b53      	ldr	r3, [pc, #332]	; (800452c <HAL_RCC_GetSysClockFreq+0x188>)
 80043e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043e2:	e098      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e4:	4b4f      	ldr	r3, [pc, #316]	; (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ee:	4b4d      	ldr	r3, [pc, #308]	; (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d028      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fa:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	2200      	movs	r2, #0
 8004402:	623b      	str	r3, [r7, #32]
 8004404:	627a      	str	r2, [r7, #36]	; 0x24
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800440c:	2100      	movs	r1, #0
 800440e:	4b47      	ldr	r3, [pc, #284]	; (800452c <HAL_RCC_GetSysClockFreq+0x188>)
 8004410:	fb03 f201 	mul.w	r2, r3, r1
 8004414:	2300      	movs	r3, #0
 8004416:	fb00 f303 	mul.w	r3, r0, r3
 800441a:	4413      	add	r3, r2
 800441c:	4a43      	ldr	r2, [pc, #268]	; (800452c <HAL_RCC_GetSysClockFreq+0x188>)
 800441e:	fba0 1202 	umull	r1, r2, r0, r2
 8004422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004424:	460a      	mov	r2, r1
 8004426:	62ba      	str	r2, [r7, #40]	; 0x28
 8004428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442a:	4413      	add	r3, r2
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004430:	2200      	movs	r2, #0
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	61fa      	str	r2, [r7, #28]
 8004436:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800443a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800443e:	f7fc fc23 	bl	8000c88 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4613      	mov	r3, r2
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800444a:	e053      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444c:	4b35      	ldr	r3, [pc, #212]	; (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	2200      	movs	r2, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	617a      	str	r2, [r7, #20]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800445e:	f04f 0b00 	mov.w	fp, #0
 8004462:	4652      	mov	r2, sl
 8004464:	465b      	mov	r3, fp
 8004466:	f04f 0000 	mov.w	r0, #0
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	0159      	lsls	r1, r3, #5
 8004470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004474:	0150      	lsls	r0, r2, #5
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	ebb2 080a 	subs.w	r8, r2, sl
 800447e:	eb63 090b 	sbc.w	r9, r3, fp
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800448e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004492:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004496:	ebb2 0408 	subs.w	r4, r2, r8
 800449a:	eb63 0509 	sbc.w	r5, r3, r9
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	00eb      	lsls	r3, r5, #3
 80044a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ac:	00e2      	lsls	r2, r4, #3
 80044ae:	4614      	mov	r4, r2
 80044b0:	461d      	mov	r5, r3
 80044b2:	eb14 030a 	adds.w	r3, r4, sl
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	eb45 030b 	adc.w	r3, r5, fp
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ca:	4629      	mov	r1, r5
 80044cc:	028b      	lsls	r3, r1, #10
 80044ce:	4621      	mov	r1, r4
 80044d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044d4:	4621      	mov	r1, r4
 80044d6:	028a      	lsls	r2, r1, #10
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044de:	2200      	movs	r2, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	60fa      	str	r2, [r7, #12]
 80044e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e8:	f7fc fbce 	bl	8000c88 <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4613      	mov	r3, r2
 80044f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044f4:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	3301      	adds	r3, #1
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800450e:	e002      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCC_GetSysClockFreq+0x184>)
 8004512:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004518:	4618      	mov	r0, r3
 800451a:	3740      	adds	r7, #64	; 0x40
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
 8004528:	00f42400 	.word	0x00f42400
 800452c:	017d7840 	.word	0x017d7840

08004530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <HAL_RCC_GetHCLKFreq+0x14>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000024 	.word	0x20000024

08004548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800454c:	f7ff fff0 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0a9b      	lsrs	r3, r3, #10
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4903      	ldr	r1, [pc, #12]	; (800456c <HAL_RCC_GetPCLK1Freq+0x24>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40023800 	.word	0x40023800
 800456c:	0800a124 	.word	0x0800a124

08004570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004574:	f7ff ffdc 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0b5b      	lsrs	r3, r3, #13
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4903      	ldr	r1, [pc, #12]	; (8004594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	0800a124 	.word	0x0800a124

08004598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e03f      	b.n	800462a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fd ff62 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2224      	movs	r2, #36	; 0x24
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fd7b 	bl	80050d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b08a      	sub	sp, #40	; 0x28
 8004636:	af02      	add	r7, sp, #8
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	d17c      	bne.n	800474c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_Transmit+0x2c>
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e075      	b.n	800474e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_UART_Transmit+0x3e>
 800466c:	2302      	movs	r3, #2
 800466e:	e06e      	b.n	800474e <HAL_UART_Transmit+0x11c>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2221      	movs	r2, #33	; 0x21
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004686:	f7fd ffff 	bl	8002688 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d108      	bne.n	80046b4 <HAL_UART_Transmit+0x82>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e003      	b.n	80046bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046c4:	e02a      	b.n	800471c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 faf9 	bl	8004cc8 <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e036      	b.n	800474e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10b      	bne.n	80046fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	3302      	adds	r3, #2
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	e007      	b.n	800470e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	3301      	adds	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1cf      	bne.n	80046c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2200      	movs	r2, #0
 800472e:	2140      	movs	r1, #64	; 0x40
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fac9 	bl	8004cc8 <UART_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e006      	b.n	800474e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b0ba      	sub	sp, #232	; 0xe8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004784:	2300      	movs	r3, #0
 8004786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_UART_IRQHandler+0x66>
 80047aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fbd3 	bl	8004f62 <UART_Receive_IT>
      return;
 80047bc:	e256      	b.n	8004c6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80de 	beq.w	8004984 <HAL_UART_IRQHandler+0x22c>
 80047c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80d1 	beq.w	8004984 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_UART_IRQHandler+0xae>
 80047ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f043 0201 	orr.w	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_UART_IRQHandler+0xd2>
 8004812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f043 0202 	orr.w	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_UART_IRQHandler+0xf6>
 8004836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f043 0204 	orr.w	r2, r3, #4
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d011      	beq.n	800487e <HAL_UART_IRQHandler+0x126>
 800485a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d105      	bne.n	8004872 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0208 	orr.w	r2, r3, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 81ed 	beq.w	8004c62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_UART_IRQHandler+0x14e>
 8004894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fb5e 	bl	8004f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <HAL_UART_IRQHandler+0x17a>
 80048ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d04f      	beq.n	8004972 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa66 	bl	8004da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d141      	bne.n	800496a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3314      	adds	r3, #20
 80048ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3314      	adds	r3, #20
 800490e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004912:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800491e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800492a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1d9      	bne.n	80048e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d013      	beq.n	8004962 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	4a7d      	ldr	r2, [pc, #500]	; (8004b34 <HAL_UART_IRQHandler+0x3dc>)
 8004940:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe f84f 	bl	80029ea <HAL_DMA_Abort_IT>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800495c:	4610      	mov	r0, r2
 800495e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	e00e      	b.n	8004980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f99a 	bl	8004c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	e00a      	b.n	8004980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f996 	bl	8004c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	e006      	b.n	8004980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f992 	bl	8004c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800497e:	e170      	b.n	8004c62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	bf00      	nop
    return;
 8004982:	e16e      	b.n	8004c62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	2b01      	cmp	r3, #1
 800498a:	f040 814a 	bne.w	8004c22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 8143 	beq.w	8004c22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800499c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 813c 	beq.w	8004c22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	f040 80b4 	bne.w	8004b38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8140 	beq.w	8004c66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ee:	429a      	cmp	r2, r3
 80049f0:	f080 8139 	bcs.w	8004c66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a06:	f000 8088 	beq.w	8004b1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1d9      	bne.n	8004a0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3314      	adds	r3, #20
 8004a5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3314      	adds	r3, #20
 8004a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e1      	bne.n	8004a56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3314      	adds	r3, #20
 8004a98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ab6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ab8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004abc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e3      	bne.n	8004a92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aea:	f023 0310 	bic.w	r3, r3, #16
 8004aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004afc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004afe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e3      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fd fef8 	bl	800290a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8c0 	bl	8004cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b30:	e099      	b.n	8004c66 <HAL_UART_IRQHandler+0x50e>
 8004b32:	bf00      	nop
 8004b34:	08004e6b 	.word	0x08004e6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 808b 	beq.w	8004c6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 8086 	beq.w	8004c6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	330c      	adds	r3, #12
 8004b64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b82:	647a      	str	r2, [r7, #68]	; 0x44
 8004b84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e3      	bne.n	8004b5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bba:	633a      	str	r2, [r7, #48]	; 0x30
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e3      	bne.n	8004b96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0310 	bic.w	r3, r3, #16
 8004bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c00:	61fa      	str	r2, [r7, #28]
 8004c02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	69b9      	ldr	r1, [r7, #24]
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e3      	bne.n	8004bdc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f848 	bl	8004cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c20:	e023      	b.n	8004c6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_UART_IRQHandler+0x4ea>
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f929 	bl	8004e92 <UART_Transmit_IT>
    return;
 8004c40:	e014      	b.n	8004c6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00e      	beq.n	8004c6c <HAL_UART_IRQHandler+0x514>
 8004c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f969 	bl	8004f32 <UART_EndTransmit_IT>
    return;
 8004c60:	e004      	b.n	8004c6c <HAL_UART_IRQHandler+0x514>
    return;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <HAL_UART_IRQHandler+0x514>
      return;
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <HAL_UART_IRQHandler+0x514>
      return;
 8004c6a:	bf00      	nop
  }
}
 8004c6c:	37e8      	adds	r7, #232	; 0xe8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop

08004c74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b090      	sub	sp, #64	; 0x40
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd8:	e050      	b.n	8004d7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d04c      	beq.n	8004d7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce8:	f7fd fcce 	bl	8002688 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d241      	bcs.n	8004d7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d18:	637a      	str	r2, [r7, #52]	; 0x34
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d4c:	623a      	str	r2, [r7, #32]
 8004d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	69f9      	ldr	r1, [r7, #28]
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e00f      	b.n	8004d9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4013      	ands	r3, r2
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d09f      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3740      	adds	r7, #64	; 0x40
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b095      	sub	sp, #84	; 0x54
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	330c      	adds	r3, #12
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dcc:	643a      	str	r2, [r7, #64]	; 0x40
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e5      	bne.n	8004dac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3314      	adds	r3, #20
 8004de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e5      	bne.n	8004de0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d119      	bne.n	8004e50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f023 0310 	bic.w	r3, r3, #16
 8004e32:	647b      	str	r3, [r7, #68]	; 0x44
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e3c:	61ba      	str	r2, [r7, #24]
 8004e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	613b      	str	r3, [r7, #16]
   return(result);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e5      	bne.n	8004e1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e5e:	bf00      	nop
 8004e60:	3754      	adds	r7, #84	; 0x54
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7ff ff09 	bl	8004c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b21      	cmp	r3, #33	; 0x21
 8004ea4:	d13e      	bne.n	8004f24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	d114      	bne.n	8004eda <UART_Transmit_IT+0x48>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d110      	bne.n	8004eda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ecc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	1c9a      	adds	r2, r3, #2
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	621a      	str	r2, [r3, #32]
 8004ed8:	e008      	b.n	8004eec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	1c59      	adds	r1, r3, #1
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6211      	str	r1, [r2, #32]
 8004ee4:	781a      	ldrb	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10f      	bne.n	8004f20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e000      	b.n	8004f26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
  }
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fe8e 	bl	8004c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b08c      	sub	sp, #48	; 0x30
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b22      	cmp	r3, #34	; 0x22
 8004f74:	f040 80ab 	bne.w	80050ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f80:	d117      	bne.n	8004fb2 <UART_Receive_IT+0x50>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d113      	bne.n	8004fb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	1c9a      	adds	r2, r3, #2
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
 8004fb0:	e026      	b.n	8005000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc4:	d007      	beq.n	8004fd6 <UART_Receive_IT+0x74>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <UART_Receive_IT+0x82>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e008      	b.n	8004ff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29b      	uxth	r3, r3
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4619      	mov	r1, r3
 800500e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005010:	2b00      	cmp	r3, #0
 8005012:	d15a      	bne.n	80050ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0220 	bic.w	r2, r2, #32
 8005022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	2b01      	cmp	r3, #1
 8005052:	d135      	bne.n	80050c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	613b      	str	r3, [r7, #16]
   return(result);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f023 0310 	bic.w	r3, r3, #16
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	330c      	adds	r3, #12
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	623a      	str	r2, [r7, #32]
 800507c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	69f9      	ldr	r1, [r7, #28]
 8005080:	6a3a      	ldr	r2, [r7, #32]
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	61bb      	str	r3, [r7, #24]
   return(result);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e5      	bne.n	800505a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b10      	cmp	r3, #16
 800509a:	d10a      	bne.n	80050b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff fdf9 	bl	8004cb0 <HAL_UARTEx_RxEventCallback>
 80050be:	e002      	b.n	80050c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff fde1 	bl	8004c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e002      	b.n	80050d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e000      	b.n	80050d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050ce:	2302      	movs	r3, #2
  }
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3730      	adds	r7, #48	; 0x30
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050dc:	b0c0      	sub	sp, #256	; 0x100
 80050de:	af00      	add	r7, sp, #0
 80050e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	68d9      	ldr	r1, [r3, #12]
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	ea40 0301 	orr.w	r3, r0, r1
 8005100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	431a      	orrs	r2, r3
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	431a      	orrs	r2, r3
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005130:	f021 010c 	bic.w	r1, r1, #12
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800513e:	430b      	orrs	r3, r1
 8005140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005152:	6999      	ldr	r1, [r3, #24]
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	ea40 0301 	orr.w	r3, r0, r1
 800515e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b8f      	ldr	r3, [pc, #572]	; (80053a4 <UART_SetConfig+0x2cc>)
 8005168:	429a      	cmp	r2, r3
 800516a:	d005      	beq.n	8005178 <UART_SetConfig+0xa0>
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b8d      	ldr	r3, [pc, #564]	; (80053a8 <UART_SetConfig+0x2d0>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d104      	bne.n	8005182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005178:	f7ff f9fa 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 800517c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005180:	e003      	b.n	800518a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005182:	f7ff f9e1 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 8005186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005194:	f040 810c 	bne.w	80053b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800519c:	2200      	movs	r2, #0
 800519e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051aa:	4622      	mov	r2, r4
 80051ac:	462b      	mov	r3, r5
 80051ae:	1891      	adds	r1, r2, r2
 80051b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80051b2:	415b      	adcs	r3, r3
 80051b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051ba:	4621      	mov	r1, r4
 80051bc:	eb12 0801 	adds.w	r8, r2, r1
 80051c0:	4629      	mov	r1, r5
 80051c2:	eb43 0901 	adc.w	r9, r3, r1
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051da:	4690      	mov	r8, r2
 80051dc:	4699      	mov	r9, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	eb18 0303 	adds.w	r3, r8, r3
 80051e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051e8:	462b      	mov	r3, r5
 80051ea:	eb49 0303 	adc.w	r3, r9, r3
 80051ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005206:	460b      	mov	r3, r1
 8005208:	18db      	adds	r3, r3, r3
 800520a:	653b      	str	r3, [r7, #80]	; 0x50
 800520c:	4613      	mov	r3, r2
 800520e:	eb42 0303 	adc.w	r3, r2, r3
 8005212:	657b      	str	r3, [r7, #84]	; 0x54
 8005214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800521c:	f7fb fd34 	bl	8000c88 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4b61      	ldr	r3, [pc, #388]	; (80053ac <UART_SetConfig+0x2d4>)
 8005226:	fba3 2302 	umull	r2, r3, r3, r2
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	011c      	lsls	r4, r3, #4
 800522e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005232:	2200      	movs	r2, #0
 8005234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800523c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005240:	4642      	mov	r2, r8
 8005242:	464b      	mov	r3, r9
 8005244:	1891      	adds	r1, r2, r2
 8005246:	64b9      	str	r1, [r7, #72]	; 0x48
 8005248:	415b      	adcs	r3, r3
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005250:	4641      	mov	r1, r8
 8005252:	eb12 0a01 	adds.w	sl, r2, r1
 8005256:	4649      	mov	r1, r9
 8005258:	eb43 0b01 	adc.w	fp, r3, r1
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800526c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005270:	4692      	mov	sl, r2
 8005272:	469b      	mov	fp, r3
 8005274:	4643      	mov	r3, r8
 8005276:	eb1a 0303 	adds.w	r3, sl, r3
 800527a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800527e:	464b      	mov	r3, r9
 8005280:	eb4b 0303 	adc.w	r3, fp, r3
 8005284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800529c:	460b      	mov	r3, r1
 800529e:	18db      	adds	r3, r3, r3
 80052a0:	643b      	str	r3, [r7, #64]	; 0x40
 80052a2:	4613      	mov	r3, r2
 80052a4:	eb42 0303 	adc.w	r3, r2, r3
 80052a8:	647b      	str	r3, [r7, #68]	; 0x44
 80052aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052b2:	f7fb fce9 	bl	8000c88 <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	4b3b      	ldr	r3, [pc, #236]	; (80053ac <UART_SetConfig+0x2d4>)
 80052be:	fba3 2301 	umull	r2, r3, r3, r1
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	2264      	movs	r2, #100	; 0x64
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	1acb      	subs	r3, r1, r3
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052d2:	4b36      	ldr	r3, [pc, #216]	; (80053ac <UART_SetConfig+0x2d4>)
 80052d4:	fba3 2302 	umull	r2, r3, r3, r2
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052e0:	441c      	add	r4, r3
 80052e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	1891      	adds	r1, r2, r2
 80052fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80052fc:	415b      	adcs	r3, r3
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005304:	4641      	mov	r1, r8
 8005306:	1851      	adds	r1, r2, r1
 8005308:	6339      	str	r1, [r7, #48]	; 0x30
 800530a:	4649      	mov	r1, r9
 800530c:	414b      	adcs	r3, r1
 800530e:	637b      	str	r3, [r7, #52]	; 0x34
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800531c:	4659      	mov	r1, fp
 800531e:	00cb      	lsls	r3, r1, #3
 8005320:	4651      	mov	r1, sl
 8005322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005326:	4651      	mov	r1, sl
 8005328:	00ca      	lsls	r2, r1, #3
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	4603      	mov	r3, r0
 8005330:	4642      	mov	r2, r8
 8005332:	189b      	adds	r3, r3, r2
 8005334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005338:	464b      	mov	r3, r9
 800533a:	460a      	mov	r2, r1
 800533c:	eb42 0303 	adc.w	r3, r2, r3
 8005340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005358:	460b      	mov	r3, r1
 800535a:	18db      	adds	r3, r3, r3
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
 800535e:	4613      	mov	r3, r2
 8005360:	eb42 0303 	adc.w	r3, r2, r3
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800536a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800536e:	f7fb fc8b 	bl	8000c88 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <UART_SetConfig+0x2d4>)
 8005378:	fba3 1302 	umull	r1, r3, r3, r2
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	2164      	movs	r1, #100	; 0x64
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	3332      	adds	r3, #50	; 0x32
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <UART_SetConfig+0x2d4>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	f003 0207 	and.w	r2, r3, #7
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4422      	add	r2, r4
 800539e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053a0:	e106      	b.n	80055b0 <UART_SetConfig+0x4d8>
 80053a2:	bf00      	nop
 80053a4:	40011000 	.word	0x40011000
 80053a8:	40011400 	.word	0x40011400
 80053ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053c2:	4642      	mov	r2, r8
 80053c4:	464b      	mov	r3, r9
 80053c6:	1891      	adds	r1, r2, r2
 80053c8:	6239      	str	r1, [r7, #32]
 80053ca:	415b      	adcs	r3, r3
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053d2:	4641      	mov	r1, r8
 80053d4:	1854      	adds	r4, r2, r1
 80053d6:	4649      	mov	r1, r9
 80053d8:	eb43 0501 	adc.w	r5, r3, r1
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	00eb      	lsls	r3, r5, #3
 80053e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ea:	00e2      	lsls	r2, r4, #3
 80053ec:	4614      	mov	r4, r2
 80053ee:	461d      	mov	r5, r3
 80053f0:	4643      	mov	r3, r8
 80053f2:	18e3      	adds	r3, r4, r3
 80053f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053f8:	464b      	mov	r3, r9
 80053fa:	eb45 0303 	adc.w	r3, r5, r3
 80053fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800540e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800541e:	4629      	mov	r1, r5
 8005420:	008b      	lsls	r3, r1, #2
 8005422:	4621      	mov	r1, r4
 8005424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005428:	4621      	mov	r1, r4
 800542a:	008a      	lsls	r2, r1, #2
 800542c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005430:	f7fb fc2a 	bl	8000c88 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4b60      	ldr	r3, [pc, #384]	; (80055bc <UART_SetConfig+0x4e4>)
 800543a:	fba3 2302 	umull	r2, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	011c      	lsls	r4, r3, #4
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800544c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	1891      	adds	r1, r2, r2
 800545a:	61b9      	str	r1, [r7, #24]
 800545c:	415b      	adcs	r3, r3
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005464:	4641      	mov	r1, r8
 8005466:	1851      	adds	r1, r2, r1
 8005468:	6139      	str	r1, [r7, #16]
 800546a:	4649      	mov	r1, r9
 800546c:	414b      	adcs	r3, r1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800547c:	4659      	mov	r1, fp
 800547e:	00cb      	lsls	r3, r1, #3
 8005480:	4651      	mov	r1, sl
 8005482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005486:	4651      	mov	r1, sl
 8005488:	00ca      	lsls	r2, r1, #3
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	4603      	mov	r3, r0
 8005490:	4642      	mov	r2, r8
 8005492:	189b      	adds	r3, r3, r2
 8005494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005498:	464b      	mov	r3, r9
 800549a:	460a      	mov	r2, r1
 800549c:	eb42 0303 	adc.w	r3, r2, r3
 80054a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054bc:	4649      	mov	r1, r9
 80054be:	008b      	lsls	r3, r1, #2
 80054c0:	4641      	mov	r1, r8
 80054c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c6:	4641      	mov	r1, r8
 80054c8:	008a      	lsls	r2, r1, #2
 80054ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054ce:	f7fb fbdb 	bl	8000c88 <__aeabi_uldivmod>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	4b38      	ldr	r3, [pc, #224]	; (80055bc <UART_SetConfig+0x4e4>)
 80054da:	fba3 2301 	umull	r2, r3, r3, r1
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	2264      	movs	r2, #100	; 0x64
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	1acb      	subs	r3, r1, r3
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	3332      	adds	r3, #50	; 0x32
 80054ec:	4a33      	ldr	r2, [pc, #204]	; (80055bc <UART_SetConfig+0x4e4>)
 80054ee:	fba2 2303 	umull	r2, r3, r2, r3
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054f8:	441c      	add	r4, r3
 80054fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054fe:	2200      	movs	r2, #0
 8005500:	673b      	str	r3, [r7, #112]	; 0x70
 8005502:	677a      	str	r2, [r7, #116]	; 0x74
 8005504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	1891      	adds	r1, r2, r2
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	415b      	adcs	r3, r3
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005518:	4641      	mov	r1, r8
 800551a:	1851      	adds	r1, r2, r1
 800551c:	6039      	str	r1, [r7, #0]
 800551e:	4649      	mov	r1, r9
 8005520:	414b      	adcs	r3, r1
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005530:	4659      	mov	r1, fp
 8005532:	00cb      	lsls	r3, r1, #3
 8005534:	4651      	mov	r1, sl
 8005536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800553a:	4651      	mov	r1, sl
 800553c:	00ca      	lsls	r2, r1, #3
 800553e:	4610      	mov	r0, r2
 8005540:	4619      	mov	r1, r3
 8005542:	4603      	mov	r3, r0
 8005544:	4642      	mov	r2, r8
 8005546:	189b      	adds	r3, r3, r2
 8005548:	66bb      	str	r3, [r7, #104]	; 0x68
 800554a:	464b      	mov	r3, r9
 800554c:	460a      	mov	r2, r1
 800554e:	eb42 0303 	adc.w	r3, r2, r3
 8005552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	663b      	str	r3, [r7, #96]	; 0x60
 800555e:	667a      	str	r2, [r7, #100]	; 0x64
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800556c:	4649      	mov	r1, r9
 800556e:	008b      	lsls	r3, r1, #2
 8005570:	4641      	mov	r1, r8
 8005572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005576:	4641      	mov	r1, r8
 8005578:	008a      	lsls	r2, r1, #2
 800557a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800557e:	f7fb fb83 	bl	8000c88 <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <UART_SetConfig+0x4e4>)
 8005588:	fba3 1302 	umull	r1, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	2164      	movs	r1, #100	; 0x64
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	3332      	adds	r3, #50	; 0x32
 800559a:	4a08      	ldr	r2, [pc, #32]	; (80055bc <UART_SetConfig+0x4e4>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	f003 020f 	and.w	r2, r3, #15
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4422      	add	r2, r4
 80055ae:	609a      	str	r2, [r3, #8]
}
 80055b0:	bf00      	nop
 80055b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055b6:	46bd      	mov	sp, r7
 80055b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055bc:	51eb851f 	.word	0x51eb851f

080055c0 <__cvt>:
 80055c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055c4:	ec55 4b10 	vmov	r4, r5, d0
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	460e      	mov	r6, r1
 80055cc:	4619      	mov	r1, r3
 80055ce:	462b      	mov	r3, r5
 80055d0:	bfbb      	ittet	lt
 80055d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055d6:	461d      	movlt	r5, r3
 80055d8:	2300      	movge	r3, #0
 80055da:	232d      	movlt	r3, #45	; 0x2d
 80055dc:	700b      	strb	r3, [r1, #0]
 80055de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055e4:	4691      	mov	r9, r2
 80055e6:	f023 0820 	bic.w	r8, r3, #32
 80055ea:	bfbc      	itt	lt
 80055ec:	4622      	movlt	r2, r4
 80055ee:	4614      	movlt	r4, r2
 80055f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055f4:	d005      	beq.n	8005602 <__cvt+0x42>
 80055f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055fa:	d100      	bne.n	80055fe <__cvt+0x3e>
 80055fc:	3601      	adds	r6, #1
 80055fe:	2102      	movs	r1, #2
 8005600:	e000      	b.n	8005604 <__cvt+0x44>
 8005602:	2103      	movs	r1, #3
 8005604:	ab03      	add	r3, sp, #12
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	ab02      	add	r3, sp, #8
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	ec45 4b10 	vmov	d0, r4, r5
 8005610:	4653      	mov	r3, sl
 8005612:	4632      	mov	r2, r6
 8005614:	f001 f87c 	bl	8006710 <_dtoa_r>
 8005618:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800561c:	4607      	mov	r7, r0
 800561e:	d102      	bne.n	8005626 <__cvt+0x66>
 8005620:	f019 0f01 	tst.w	r9, #1
 8005624:	d022      	beq.n	800566c <__cvt+0xac>
 8005626:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800562a:	eb07 0906 	add.w	r9, r7, r6
 800562e:	d110      	bne.n	8005652 <__cvt+0x92>
 8005630:	783b      	ldrb	r3, [r7, #0]
 8005632:	2b30      	cmp	r3, #48	; 0x30
 8005634:	d10a      	bne.n	800564c <__cvt+0x8c>
 8005636:	2200      	movs	r2, #0
 8005638:	2300      	movs	r3, #0
 800563a:	4620      	mov	r0, r4
 800563c:	4629      	mov	r1, r5
 800563e:	f7fb fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005642:	b918      	cbnz	r0, 800564c <__cvt+0x8c>
 8005644:	f1c6 0601 	rsb	r6, r6, #1
 8005648:	f8ca 6000 	str.w	r6, [sl]
 800564c:	f8da 3000 	ldr.w	r3, [sl]
 8005650:	4499      	add	r9, r3
 8005652:	2200      	movs	r2, #0
 8005654:	2300      	movs	r3, #0
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fb fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800565e:	b108      	cbz	r0, 8005664 <__cvt+0xa4>
 8005660:	f8cd 900c 	str.w	r9, [sp, #12]
 8005664:	2230      	movs	r2, #48	; 0x30
 8005666:	9b03      	ldr	r3, [sp, #12]
 8005668:	454b      	cmp	r3, r9
 800566a:	d307      	bcc.n	800567c <__cvt+0xbc>
 800566c:	9b03      	ldr	r3, [sp, #12]
 800566e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005670:	1bdb      	subs	r3, r3, r7
 8005672:	4638      	mov	r0, r7
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	b004      	add	sp, #16
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567c:	1c59      	adds	r1, r3, #1
 800567e:	9103      	str	r1, [sp, #12]
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e7f0      	b.n	8005666 <__cvt+0xa6>

08005684 <__exponent>:
 8005684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005686:	4603      	mov	r3, r0
 8005688:	2900      	cmp	r1, #0
 800568a:	bfb8      	it	lt
 800568c:	4249      	neglt	r1, r1
 800568e:	f803 2b02 	strb.w	r2, [r3], #2
 8005692:	bfb4      	ite	lt
 8005694:	222d      	movlt	r2, #45	; 0x2d
 8005696:	222b      	movge	r2, #43	; 0x2b
 8005698:	2909      	cmp	r1, #9
 800569a:	7042      	strb	r2, [r0, #1]
 800569c:	dd2a      	ble.n	80056f4 <__exponent+0x70>
 800569e:	f10d 0207 	add.w	r2, sp, #7
 80056a2:	4617      	mov	r7, r2
 80056a4:	260a      	movs	r6, #10
 80056a6:	4694      	mov	ip, r2
 80056a8:	fb91 f5f6 	sdiv	r5, r1, r6
 80056ac:	fb06 1415 	mls	r4, r6, r5, r1
 80056b0:	3430      	adds	r4, #48	; 0x30
 80056b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80056b6:	460c      	mov	r4, r1
 80056b8:	2c63      	cmp	r4, #99	; 0x63
 80056ba:	f102 32ff 	add.w	r2, r2, #4294967295
 80056be:	4629      	mov	r1, r5
 80056c0:	dcf1      	bgt.n	80056a6 <__exponent+0x22>
 80056c2:	3130      	adds	r1, #48	; 0x30
 80056c4:	f1ac 0402 	sub.w	r4, ip, #2
 80056c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056cc:	1c41      	adds	r1, r0, #1
 80056ce:	4622      	mov	r2, r4
 80056d0:	42ba      	cmp	r2, r7
 80056d2:	d30a      	bcc.n	80056ea <__exponent+0x66>
 80056d4:	f10d 0209 	add.w	r2, sp, #9
 80056d8:	eba2 020c 	sub.w	r2, r2, ip
 80056dc:	42bc      	cmp	r4, r7
 80056de:	bf88      	it	hi
 80056e0:	2200      	movhi	r2, #0
 80056e2:	4413      	add	r3, r2
 80056e4:	1a18      	subs	r0, r3, r0
 80056e6:	b003      	add	sp, #12
 80056e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056f2:	e7ed      	b.n	80056d0 <__exponent+0x4c>
 80056f4:	2330      	movs	r3, #48	; 0x30
 80056f6:	3130      	adds	r1, #48	; 0x30
 80056f8:	7083      	strb	r3, [r0, #2]
 80056fa:	70c1      	strb	r1, [r0, #3]
 80056fc:	1d03      	adds	r3, r0, #4
 80056fe:	e7f1      	b.n	80056e4 <__exponent+0x60>

08005700 <_printf_float>:
 8005700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	ed2d 8b02 	vpush	{d8}
 8005708:	b08d      	sub	sp, #52	; 0x34
 800570a:	460c      	mov	r4, r1
 800570c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005710:	4616      	mov	r6, r2
 8005712:	461f      	mov	r7, r3
 8005714:	4605      	mov	r5, r0
 8005716:	f000 fef7 	bl	8006508 <_localeconv_r>
 800571a:	f8d0 a000 	ldr.w	sl, [r0]
 800571e:	4650      	mov	r0, sl
 8005720:	f7fa fda6 	bl	8000270 <strlen>
 8005724:	2300      	movs	r3, #0
 8005726:	930a      	str	r3, [sp, #40]	; 0x28
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	9305      	str	r3, [sp, #20]
 800572c:	f8d8 3000 	ldr.w	r3, [r8]
 8005730:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005734:	3307      	adds	r3, #7
 8005736:	f023 0307 	bic.w	r3, r3, #7
 800573a:	f103 0208 	add.w	r2, r3, #8
 800573e:	f8c8 2000 	str.w	r2, [r8]
 8005742:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800574a:	9307      	str	r3, [sp, #28]
 800574c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005750:	ee08 0a10 	vmov	s16, r0
 8005754:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800575c:	4b9e      	ldr	r3, [pc, #632]	; (80059d8 <_printf_float+0x2d8>)
 800575e:	f04f 32ff 	mov.w	r2, #4294967295
 8005762:	f7fb f9e3 	bl	8000b2c <__aeabi_dcmpun>
 8005766:	bb88      	cbnz	r0, 80057cc <_printf_float+0xcc>
 8005768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800576c:	4b9a      	ldr	r3, [pc, #616]	; (80059d8 <_printf_float+0x2d8>)
 800576e:	f04f 32ff 	mov.w	r2, #4294967295
 8005772:	f7fb f9bd 	bl	8000af0 <__aeabi_dcmple>
 8005776:	bb48      	cbnz	r0, 80057cc <_printf_float+0xcc>
 8005778:	2200      	movs	r2, #0
 800577a:	2300      	movs	r3, #0
 800577c:	4640      	mov	r0, r8
 800577e:	4649      	mov	r1, r9
 8005780:	f7fb f9ac 	bl	8000adc <__aeabi_dcmplt>
 8005784:	b110      	cbz	r0, 800578c <_printf_float+0x8c>
 8005786:	232d      	movs	r3, #45	; 0x2d
 8005788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800578c:	4a93      	ldr	r2, [pc, #588]	; (80059dc <_printf_float+0x2dc>)
 800578e:	4b94      	ldr	r3, [pc, #592]	; (80059e0 <_printf_float+0x2e0>)
 8005790:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005794:	bf94      	ite	ls
 8005796:	4690      	movls	r8, r2
 8005798:	4698      	movhi	r8, r3
 800579a:	2303      	movs	r3, #3
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	9b05      	ldr	r3, [sp, #20]
 80057a0:	f023 0304 	bic.w	r3, r3, #4
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	f04f 0900 	mov.w	r9, #0
 80057aa:	9700      	str	r7, [sp, #0]
 80057ac:	4633      	mov	r3, r6
 80057ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80057b0:	4621      	mov	r1, r4
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 f9da 	bl	8005b6c <_printf_common>
 80057b8:	3001      	adds	r0, #1
 80057ba:	f040 8090 	bne.w	80058de <_printf_float+0x1de>
 80057be:	f04f 30ff 	mov.w	r0, #4294967295
 80057c2:	b00d      	add	sp, #52	; 0x34
 80057c4:	ecbd 8b02 	vpop	{d8}
 80057c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057cc:	4642      	mov	r2, r8
 80057ce:	464b      	mov	r3, r9
 80057d0:	4640      	mov	r0, r8
 80057d2:	4649      	mov	r1, r9
 80057d4:	f7fb f9aa 	bl	8000b2c <__aeabi_dcmpun>
 80057d8:	b140      	cbz	r0, 80057ec <_printf_float+0xec>
 80057da:	464b      	mov	r3, r9
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bfbc      	itt	lt
 80057e0:	232d      	movlt	r3, #45	; 0x2d
 80057e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057e6:	4a7f      	ldr	r2, [pc, #508]	; (80059e4 <_printf_float+0x2e4>)
 80057e8:	4b7f      	ldr	r3, [pc, #508]	; (80059e8 <_printf_float+0x2e8>)
 80057ea:	e7d1      	b.n	8005790 <_printf_float+0x90>
 80057ec:	6863      	ldr	r3, [r4, #4]
 80057ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057f2:	9206      	str	r2, [sp, #24]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	d13f      	bne.n	8005878 <_printf_float+0x178>
 80057f8:	2306      	movs	r3, #6
 80057fa:	6063      	str	r3, [r4, #4]
 80057fc:	9b05      	ldr	r3, [sp, #20]
 80057fe:	6861      	ldr	r1, [r4, #4]
 8005800:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005804:	2300      	movs	r3, #0
 8005806:	9303      	str	r3, [sp, #12]
 8005808:	ab0a      	add	r3, sp, #40	; 0x28
 800580a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800580e:	ab09      	add	r3, sp, #36	; 0x24
 8005810:	ec49 8b10 	vmov	d0, r8, r9
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	6022      	str	r2, [r4, #0]
 8005818:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800581c:	4628      	mov	r0, r5
 800581e:	f7ff fecf 	bl	80055c0 <__cvt>
 8005822:	9b06      	ldr	r3, [sp, #24]
 8005824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005826:	2b47      	cmp	r3, #71	; 0x47
 8005828:	4680      	mov	r8, r0
 800582a:	d108      	bne.n	800583e <_printf_float+0x13e>
 800582c:	1cc8      	adds	r0, r1, #3
 800582e:	db02      	blt.n	8005836 <_printf_float+0x136>
 8005830:	6863      	ldr	r3, [r4, #4]
 8005832:	4299      	cmp	r1, r3
 8005834:	dd41      	ble.n	80058ba <_printf_float+0x1ba>
 8005836:	f1ab 0302 	sub.w	r3, fp, #2
 800583a:	fa5f fb83 	uxtb.w	fp, r3
 800583e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005842:	d820      	bhi.n	8005886 <_printf_float+0x186>
 8005844:	3901      	subs	r1, #1
 8005846:	465a      	mov	r2, fp
 8005848:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800584c:	9109      	str	r1, [sp, #36]	; 0x24
 800584e:	f7ff ff19 	bl	8005684 <__exponent>
 8005852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005854:	1813      	adds	r3, r2, r0
 8005856:	2a01      	cmp	r2, #1
 8005858:	4681      	mov	r9, r0
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	dc02      	bgt.n	8005864 <_printf_float+0x164>
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	07d2      	lsls	r2, r2, #31
 8005862:	d501      	bpl.n	8005868 <_printf_float+0x168>
 8005864:	3301      	adds	r3, #1
 8005866:	6123      	str	r3, [r4, #16]
 8005868:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800586c:	2b00      	cmp	r3, #0
 800586e:	d09c      	beq.n	80057aa <_printf_float+0xaa>
 8005870:	232d      	movs	r3, #45	; 0x2d
 8005872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005876:	e798      	b.n	80057aa <_printf_float+0xaa>
 8005878:	9a06      	ldr	r2, [sp, #24]
 800587a:	2a47      	cmp	r2, #71	; 0x47
 800587c:	d1be      	bne.n	80057fc <_printf_float+0xfc>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1bc      	bne.n	80057fc <_printf_float+0xfc>
 8005882:	2301      	movs	r3, #1
 8005884:	e7b9      	b.n	80057fa <_printf_float+0xfa>
 8005886:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800588a:	d118      	bne.n	80058be <_printf_float+0x1be>
 800588c:	2900      	cmp	r1, #0
 800588e:	6863      	ldr	r3, [r4, #4]
 8005890:	dd0b      	ble.n	80058aa <_printf_float+0x1aa>
 8005892:	6121      	str	r1, [r4, #16]
 8005894:	b913      	cbnz	r3, 800589c <_printf_float+0x19c>
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	07d0      	lsls	r0, r2, #31
 800589a:	d502      	bpl.n	80058a2 <_printf_float+0x1a2>
 800589c:	3301      	adds	r3, #1
 800589e:	440b      	add	r3, r1
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80058a4:	f04f 0900 	mov.w	r9, #0
 80058a8:	e7de      	b.n	8005868 <_printf_float+0x168>
 80058aa:	b913      	cbnz	r3, 80058b2 <_printf_float+0x1b2>
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	07d2      	lsls	r2, r2, #31
 80058b0:	d501      	bpl.n	80058b6 <_printf_float+0x1b6>
 80058b2:	3302      	adds	r3, #2
 80058b4:	e7f4      	b.n	80058a0 <_printf_float+0x1a0>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e7f2      	b.n	80058a0 <_printf_float+0x1a0>
 80058ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c0:	4299      	cmp	r1, r3
 80058c2:	db05      	blt.n	80058d0 <_printf_float+0x1d0>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	6121      	str	r1, [r4, #16]
 80058c8:	07d8      	lsls	r0, r3, #31
 80058ca:	d5ea      	bpl.n	80058a2 <_printf_float+0x1a2>
 80058cc:	1c4b      	adds	r3, r1, #1
 80058ce:	e7e7      	b.n	80058a0 <_printf_float+0x1a0>
 80058d0:	2900      	cmp	r1, #0
 80058d2:	bfd4      	ite	le
 80058d4:	f1c1 0202 	rsble	r2, r1, #2
 80058d8:	2201      	movgt	r2, #1
 80058da:	4413      	add	r3, r2
 80058dc:	e7e0      	b.n	80058a0 <_printf_float+0x1a0>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	055a      	lsls	r2, r3, #21
 80058e2:	d407      	bmi.n	80058f4 <_printf_float+0x1f4>
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	4642      	mov	r2, r8
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	d12c      	bne.n	800594c <_printf_float+0x24c>
 80058f2:	e764      	b.n	80057be <_printf_float+0xbe>
 80058f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058f8:	f240 80e0 	bls.w	8005abc <_printf_float+0x3bc>
 80058fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005900:	2200      	movs	r2, #0
 8005902:	2300      	movs	r3, #0
 8005904:	f7fb f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005908:	2800      	cmp	r0, #0
 800590a:	d034      	beq.n	8005976 <_printf_float+0x276>
 800590c:	4a37      	ldr	r2, [pc, #220]	; (80059ec <_printf_float+0x2ec>)
 800590e:	2301      	movs	r3, #1
 8005910:	4631      	mov	r1, r6
 8005912:	4628      	mov	r0, r5
 8005914:	47b8      	blx	r7
 8005916:	3001      	adds	r0, #1
 8005918:	f43f af51 	beq.w	80057be <_printf_float+0xbe>
 800591c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005920:	429a      	cmp	r2, r3
 8005922:	db02      	blt.n	800592a <_printf_float+0x22a>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	07d8      	lsls	r0, r3, #31
 8005928:	d510      	bpl.n	800594c <_printf_float+0x24c>
 800592a:	ee18 3a10 	vmov	r3, s16
 800592e:	4652      	mov	r2, sl
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f af41 	beq.w	80057be <_printf_float+0xbe>
 800593c:	f04f 0800 	mov.w	r8, #0
 8005940:	f104 091a 	add.w	r9, r4, #26
 8005944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005946:	3b01      	subs	r3, #1
 8005948:	4543      	cmp	r3, r8
 800594a:	dc09      	bgt.n	8005960 <_printf_float+0x260>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	079b      	lsls	r3, r3, #30
 8005950:	f100 8107 	bmi.w	8005b62 <_printf_float+0x462>
 8005954:	68e0      	ldr	r0, [r4, #12]
 8005956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005958:	4298      	cmp	r0, r3
 800595a:	bfb8      	it	lt
 800595c:	4618      	movlt	r0, r3
 800595e:	e730      	b.n	80057c2 <_printf_float+0xc2>
 8005960:	2301      	movs	r3, #1
 8005962:	464a      	mov	r2, r9
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	47b8      	blx	r7
 800596a:	3001      	adds	r0, #1
 800596c:	f43f af27 	beq.w	80057be <_printf_float+0xbe>
 8005970:	f108 0801 	add.w	r8, r8, #1
 8005974:	e7e6      	b.n	8005944 <_printf_float+0x244>
 8005976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	dc39      	bgt.n	80059f0 <_printf_float+0x2f0>
 800597c:	4a1b      	ldr	r2, [pc, #108]	; (80059ec <_printf_float+0x2ec>)
 800597e:	2301      	movs	r3, #1
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f af19 	beq.w	80057be <_printf_float+0xbe>
 800598c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005990:	4313      	orrs	r3, r2
 8005992:	d102      	bne.n	800599a <_printf_float+0x29a>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	07d9      	lsls	r1, r3, #31
 8005998:	d5d8      	bpl.n	800594c <_printf_float+0x24c>
 800599a:	ee18 3a10 	vmov	r3, s16
 800599e:	4652      	mov	r2, sl
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f af09 	beq.w	80057be <_printf_float+0xbe>
 80059ac:	f04f 0900 	mov.w	r9, #0
 80059b0:	f104 0a1a 	add.w	sl, r4, #26
 80059b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b6:	425b      	negs	r3, r3
 80059b8:	454b      	cmp	r3, r9
 80059ba:	dc01      	bgt.n	80059c0 <_printf_float+0x2c0>
 80059bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059be:	e792      	b.n	80058e6 <_printf_float+0x1e6>
 80059c0:	2301      	movs	r3, #1
 80059c2:	4652      	mov	r2, sl
 80059c4:	4631      	mov	r1, r6
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b8      	blx	r7
 80059ca:	3001      	adds	r0, #1
 80059cc:	f43f aef7 	beq.w	80057be <_printf_float+0xbe>
 80059d0:	f109 0901 	add.w	r9, r9, #1
 80059d4:	e7ee      	b.n	80059b4 <_printf_float+0x2b4>
 80059d6:	bf00      	nop
 80059d8:	7fefffff 	.word	0x7fefffff
 80059dc:	0800a12c 	.word	0x0800a12c
 80059e0:	0800a130 	.word	0x0800a130
 80059e4:	0800a134 	.word	0x0800a134
 80059e8:	0800a138 	.word	0x0800a138
 80059ec:	0800a13c 	.word	0x0800a13c
 80059f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059f4:	429a      	cmp	r2, r3
 80059f6:	bfa8      	it	ge
 80059f8:	461a      	movge	r2, r3
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	4691      	mov	r9, r2
 80059fe:	dc37      	bgt.n	8005a70 <_printf_float+0x370>
 8005a00:	f04f 0b00 	mov.w	fp, #0
 8005a04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a08:	f104 021a 	add.w	r2, r4, #26
 8005a0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a0e:	9305      	str	r3, [sp, #20]
 8005a10:	eba3 0309 	sub.w	r3, r3, r9
 8005a14:	455b      	cmp	r3, fp
 8005a16:	dc33      	bgt.n	8005a80 <_printf_float+0x380>
 8005a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	db3b      	blt.n	8005a98 <_printf_float+0x398>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	07da      	lsls	r2, r3, #31
 8005a24:	d438      	bmi.n	8005a98 <_printf_float+0x398>
 8005a26:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a2a:	eba2 0903 	sub.w	r9, r2, r3
 8005a2e:	9b05      	ldr	r3, [sp, #20]
 8005a30:	1ad2      	subs	r2, r2, r3
 8005a32:	4591      	cmp	r9, r2
 8005a34:	bfa8      	it	ge
 8005a36:	4691      	movge	r9, r2
 8005a38:	f1b9 0f00 	cmp.w	r9, #0
 8005a3c:	dc35      	bgt.n	8005aaa <_printf_float+0x3aa>
 8005a3e:	f04f 0800 	mov.w	r8, #0
 8005a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a46:	f104 0a1a 	add.w	sl, r4, #26
 8005a4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	eba3 0309 	sub.w	r3, r3, r9
 8005a54:	4543      	cmp	r3, r8
 8005a56:	f77f af79 	ble.w	800594c <_printf_float+0x24c>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4628      	mov	r0, r5
 8005a62:	47b8      	blx	r7
 8005a64:	3001      	adds	r0, #1
 8005a66:	f43f aeaa 	beq.w	80057be <_printf_float+0xbe>
 8005a6a:	f108 0801 	add.w	r8, r8, #1
 8005a6e:	e7ec      	b.n	8005a4a <_printf_float+0x34a>
 8005a70:	4613      	mov	r3, r2
 8005a72:	4631      	mov	r1, r6
 8005a74:	4642      	mov	r2, r8
 8005a76:	4628      	mov	r0, r5
 8005a78:	47b8      	blx	r7
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d1c0      	bne.n	8005a00 <_printf_float+0x300>
 8005a7e:	e69e      	b.n	80057be <_printf_float+0xbe>
 8005a80:	2301      	movs	r3, #1
 8005a82:	4631      	mov	r1, r6
 8005a84:	4628      	mov	r0, r5
 8005a86:	9205      	str	r2, [sp, #20]
 8005a88:	47b8      	blx	r7
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f43f ae97 	beq.w	80057be <_printf_float+0xbe>
 8005a90:	9a05      	ldr	r2, [sp, #20]
 8005a92:	f10b 0b01 	add.w	fp, fp, #1
 8005a96:	e7b9      	b.n	8005a0c <_printf_float+0x30c>
 8005a98:	ee18 3a10 	vmov	r3, s16
 8005a9c:	4652      	mov	r2, sl
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d1be      	bne.n	8005a26 <_printf_float+0x326>
 8005aa8:	e689      	b.n	80057be <_printf_float+0xbe>
 8005aaa:	9a05      	ldr	r2, [sp, #20]
 8005aac:	464b      	mov	r3, r9
 8005aae:	4442      	add	r2, r8
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d1c1      	bne.n	8005a3e <_printf_float+0x33e>
 8005aba:	e680      	b.n	80057be <_printf_float+0xbe>
 8005abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005abe:	2a01      	cmp	r2, #1
 8005ac0:	dc01      	bgt.n	8005ac6 <_printf_float+0x3c6>
 8005ac2:	07db      	lsls	r3, r3, #31
 8005ac4:	d53a      	bpl.n	8005b3c <_printf_float+0x43c>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	4642      	mov	r2, r8
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f43f ae74 	beq.w	80057be <_printf_float+0xbe>
 8005ad6:	ee18 3a10 	vmov	r3, s16
 8005ada:	4652      	mov	r2, sl
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f43f ae6b 	beq.w	80057be <_printf_float+0xbe>
 8005ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005aec:	2200      	movs	r2, #0
 8005aee:	2300      	movs	r3, #0
 8005af0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005af4:	f7fa ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005af8:	b9d8      	cbnz	r0, 8005b32 <_printf_float+0x432>
 8005afa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005afe:	f108 0201 	add.w	r2, r8, #1
 8005b02:	4631      	mov	r1, r6
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b8      	blx	r7
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d10e      	bne.n	8005b2a <_printf_float+0x42a>
 8005b0c:	e657      	b.n	80057be <_printf_float+0xbe>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4652      	mov	r2, sl
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	f43f ae50 	beq.w	80057be <_printf_float+0xbe>
 8005b1e:	f108 0801 	add.w	r8, r8, #1
 8005b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	4543      	cmp	r3, r8
 8005b28:	dcf1      	bgt.n	8005b0e <_printf_float+0x40e>
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b30:	e6da      	b.n	80058e8 <_printf_float+0x1e8>
 8005b32:	f04f 0800 	mov.w	r8, #0
 8005b36:	f104 0a1a 	add.w	sl, r4, #26
 8005b3a:	e7f2      	b.n	8005b22 <_printf_float+0x422>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4642      	mov	r2, r8
 8005b40:	e7df      	b.n	8005b02 <_printf_float+0x402>
 8005b42:	2301      	movs	r3, #1
 8005b44:	464a      	mov	r2, r9
 8005b46:	4631      	mov	r1, r6
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f43f ae36 	beq.w	80057be <_printf_float+0xbe>
 8005b52:	f108 0801 	add.w	r8, r8, #1
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b5a:	1a5b      	subs	r3, r3, r1
 8005b5c:	4543      	cmp	r3, r8
 8005b5e:	dcf0      	bgt.n	8005b42 <_printf_float+0x442>
 8005b60:	e6f8      	b.n	8005954 <_printf_float+0x254>
 8005b62:	f04f 0800 	mov.w	r8, #0
 8005b66:	f104 0919 	add.w	r9, r4, #25
 8005b6a:	e7f4      	b.n	8005b56 <_printf_float+0x456>

08005b6c <_printf_common>:
 8005b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b70:	4616      	mov	r6, r2
 8005b72:	4699      	mov	r9, r3
 8005b74:	688a      	ldr	r2, [r1, #8]
 8005b76:	690b      	ldr	r3, [r1, #16]
 8005b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	bfb8      	it	lt
 8005b80:	4613      	movlt	r3, r2
 8005b82:	6033      	str	r3, [r6, #0]
 8005b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b88:	4607      	mov	r7, r0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	b10a      	cbz	r2, 8005b92 <_printf_common+0x26>
 8005b8e:	3301      	adds	r3, #1
 8005b90:	6033      	str	r3, [r6, #0]
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	0699      	lsls	r1, r3, #26
 8005b96:	bf42      	ittt	mi
 8005b98:	6833      	ldrmi	r3, [r6, #0]
 8005b9a:	3302      	addmi	r3, #2
 8005b9c:	6033      	strmi	r3, [r6, #0]
 8005b9e:	6825      	ldr	r5, [r4, #0]
 8005ba0:	f015 0506 	ands.w	r5, r5, #6
 8005ba4:	d106      	bne.n	8005bb4 <_printf_common+0x48>
 8005ba6:	f104 0a19 	add.w	sl, r4, #25
 8005baa:	68e3      	ldr	r3, [r4, #12]
 8005bac:	6832      	ldr	r2, [r6, #0]
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	42ab      	cmp	r3, r5
 8005bb2:	dc26      	bgt.n	8005c02 <_printf_common+0x96>
 8005bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bb8:	1e13      	subs	r3, r2, #0
 8005bba:	6822      	ldr	r2, [r4, #0]
 8005bbc:	bf18      	it	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	0692      	lsls	r2, r2, #26
 8005bc2:	d42b      	bmi.n	8005c1c <_printf_common+0xb0>
 8005bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bc8:	4649      	mov	r1, r9
 8005bca:	4638      	mov	r0, r7
 8005bcc:	47c0      	blx	r8
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d01e      	beq.n	8005c10 <_printf_common+0xa4>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	6922      	ldr	r2, [r4, #16]
 8005bd6:	f003 0306 	and.w	r3, r3, #6
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	bf02      	ittt	eq
 8005bde:	68e5      	ldreq	r5, [r4, #12]
 8005be0:	6833      	ldreq	r3, [r6, #0]
 8005be2:	1aed      	subeq	r5, r5, r3
 8005be4:	68a3      	ldr	r3, [r4, #8]
 8005be6:	bf0c      	ite	eq
 8005be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bec:	2500      	movne	r5, #0
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	bfc4      	itt	gt
 8005bf2:	1a9b      	subgt	r3, r3, r2
 8005bf4:	18ed      	addgt	r5, r5, r3
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	341a      	adds	r4, #26
 8005bfa:	42b5      	cmp	r5, r6
 8005bfc:	d11a      	bne.n	8005c34 <_printf_common+0xc8>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e008      	b.n	8005c14 <_printf_common+0xa8>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4652      	mov	r2, sl
 8005c06:	4649      	mov	r1, r9
 8005c08:	4638      	mov	r0, r7
 8005c0a:	47c0      	blx	r8
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d103      	bne.n	8005c18 <_printf_common+0xac>
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c18:	3501      	adds	r5, #1
 8005c1a:	e7c6      	b.n	8005baa <_printf_common+0x3e>
 8005c1c:	18e1      	adds	r1, r4, r3
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	2030      	movs	r0, #48	; 0x30
 8005c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c26:	4422      	add	r2, r4
 8005c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c30:	3302      	adds	r3, #2
 8005c32:	e7c7      	b.n	8005bc4 <_printf_common+0x58>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4622      	mov	r2, r4
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	47c0      	blx	r8
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d0e6      	beq.n	8005c10 <_printf_common+0xa4>
 8005c42:	3601      	adds	r6, #1
 8005c44:	e7d9      	b.n	8005bfa <_printf_common+0x8e>
	...

08005c48 <_printf_i>:
 8005c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	7e0f      	ldrb	r7, [r1, #24]
 8005c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c50:	2f78      	cmp	r7, #120	; 0x78
 8005c52:	4691      	mov	r9, r2
 8005c54:	4680      	mov	r8, r0
 8005c56:	460c      	mov	r4, r1
 8005c58:	469a      	mov	sl, r3
 8005c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c5e:	d807      	bhi.n	8005c70 <_printf_i+0x28>
 8005c60:	2f62      	cmp	r7, #98	; 0x62
 8005c62:	d80a      	bhi.n	8005c7a <_printf_i+0x32>
 8005c64:	2f00      	cmp	r7, #0
 8005c66:	f000 80d4 	beq.w	8005e12 <_printf_i+0x1ca>
 8005c6a:	2f58      	cmp	r7, #88	; 0x58
 8005c6c:	f000 80c0 	beq.w	8005df0 <_printf_i+0x1a8>
 8005c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c78:	e03a      	b.n	8005cf0 <_printf_i+0xa8>
 8005c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c7e:	2b15      	cmp	r3, #21
 8005c80:	d8f6      	bhi.n	8005c70 <_printf_i+0x28>
 8005c82:	a101      	add	r1, pc, #4	; (adr r1, 8005c88 <_printf_i+0x40>)
 8005c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c88:	08005ce1 	.word	0x08005ce1
 8005c8c:	08005cf5 	.word	0x08005cf5
 8005c90:	08005c71 	.word	0x08005c71
 8005c94:	08005c71 	.word	0x08005c71
 8005c98:	08005c71 	.word	0x08005c71
 8005c9c:	08005c71 	.word	0x08005c71
 8005ca0:	08005cf5 	.word	0x08005cf5
 8005ca4:	08005c71 	.word	0x08005c71
 8005ca8:	08005c71 	.word	0x08005c71
 8005cac:	08005c71 	.word	0x08005c71
 8005cb0:	08005c71 	.word	0x08005c71
 8005cb4:	08005df9 	.word	0x08005df9
 8005cb8:	08005d21 	.word	0x08005d21
 8005cbc:	08005db3 	.word	0x08005db3
 8005cc0:	08005c71 	.word	0x08005c71
 8005cc4:	08005c71 	.word	0x08005c71
 8005cc8:	08005e1b 	.word	0x08005e1b
 8005ccc:	08005c71 	.word	0x08005c71
 8005cd0:	08005d21 	.word	0x08005d21
 8005cd4:	08005c71 	.word	0x08005c71
 8005cd8:	08005c71 	.word	0x08005c71
 8005cdc:	08005dbb 	.word	0x08005dbb
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	602a      	str	r2, [r5, #0]
 8005ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e09f      	b.n	8005e34 <_printf_i+0x1ec>
 8005cf4:	6820      	ldr	r0, [r4, #0]
 8005cf6:	682b      	ldr	r3, [r5, #0]
 8005cf8:	0607      	lsls	r7, r0, #24
 8005cfa:	f103 0104 	add.w	r1, r3, #4
 8005cfe:	6029      	str	r1, [r5, #0]
 8005d00:	d501      	bpl.n	8005d06 <_printf_i+0xbe>
 8005d02:	681e      	ldr	r6, [r3, #0]
 8005d04:	e003      	b.n	8005d0e <_printf_i+0xc6>
 8005d06:	0646      	lsls	r6, r0, #25
 8005d08:	d5fb      	bpl.n	8005d02 <_printf_i+0xba>
 8005d0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d0e:	2e00      	cmp	r6, #0
 8005d10:	da03      	bge.n	8005d1a <_printf_i+0xd2>
 8005d12:	232d      	movs	r3, #45	; 0x2d
 8005d14:	4276      	negs	r6, r6
 8005d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d1a:	485a      	ldr	r0, [pc, #360]	; (8005e84 <_printf_i+0x23c>)
 8005d1c:	230a      	movs	r3, #10
 8005d1e:	e012      	b.n	8005d46 <_printf_i+0xfe>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	6820      	ldr	r0, [r4, #0]
 8005d24:	1d19      	adds	r1, r3, #4
 8005d26:	6029      	str	r1, [r5, #0]
 8005d28:	0605      	lsls	r5, r0, #24
 8005d2a:	d501      	bpl.n	8005d30 <_printf_i+0xe8>
 8005d2c:	681e      	ldr	r6, [r3, #0]
 8005d2e:	e002      	b.n	8005d36 <_printf_i+0xee>
 8005d30:	0641      	lsls	r1, r0, #25
 8005d32:	d5fb      	bpl.n	8005d2c <_printf_i+0xe4>
 8005d34:	881e      	ldrh	r6, [r3, #0]
 8005d36:	4853      	ldr	r0, [pc, #332]	; (8005e84 <_printf_i+0x23c>)
 8005d38:	2f6f      	cmp	r7, #111	; 0x6f
 8005d3a:	bf0c      	ite	eq
 8005d3c:	2308      	moveq	r3, #8
 8005d3e:	230a      	movne	r3, #10
 8005d40:	2100      	movs	r1, #0
 8005d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d46:	6865      	ldr	r5, [r4, #4]
 8005d48:	60a5      	str	r5, [r4, #8]
 8005d4a:	2d00      	cmp	r5, #0
 8005d4c:	bfa2      	ittt	ge
 8005d4e:	6821      	ldrge	r1, [r4, #0]
 8005d50:	f021 0104 	bicge.w	r1, r1, #4
 8005d54:	6021      	strge	r1, [r4, #0]
 8005d56:	b90e      	cbnz	r6, 8005d5c <_printf_i+0x114>
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	d04b      	beq.n	8005df4 <_printf_i+0x1ac>
 8005d5c:	4615      	mov	r5, r2
 8005d5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d62:	fb03 6711 	mls	r7, r3, r1, r6
 8005d66:	5dc7      	ldrb	r7, [r0, r7]
 8005d68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d6c:	4637      	mov	r7, r6
 8005d6e:	42bb      	cmp	r3, r7
 8005d70:	460e      	mov	r6, r1
 8005d72:	d9f4      	bls.n	8005d5e <_printf_i+0x116>
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d10b      	bne.n	8005d90 <_printf_i+0x148>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	07de      	lsls	r6, r3, #31
 8005d7c:	d508      	bpl.n	8005d90 <_printf_i+0x148>
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	6861      	ldr	r1, [r4, #4]
 8005d82:	4299      	cmp	r1, r3
 8005d84:	bfde      	ittt	le
 8005d86:	2330      	movle	r3, #48	; 0x30
 8005d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d90:	1b52      	subs	r2, r2, r5
 8005d92:	6122      	str	r2, [r4, #16]
 8005d94:	f8cd a000 	str.w	sl, [sp]
 8005d98:	464b      	mov	r3, r9
 8005d9a:	aa03      	add	r2, sp, #12
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4640      	mov	r0, r8
 8005da0:	f7ff fee4 	bl	8005b6c <_printf_common>
 8005da4:	3001      	adds	r0, #1
 8005da6:	d14a      	bne.n	8005e3e <_printf_i+0x1f6>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	b004      	add	sp, #16
 8005dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	f043 0320 	orr.w	r3, r3, #32
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	4833      	ldr	r0, [pc, #204]	; (8005e88 <_printf_i+0x240>)
 8005dbc:	2778      	movs	r7, #120	; 0x78
 8005dbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	6829      	ldr	r1, [r5, #0]
 8005dc6:	061f      	lsls	r7, r3, #24
 8005dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dcc:	d402      	bmi.n	8005dd4 <_printf_i+0x18c>
 8005dce:	065f      	lsls	r7, r3, #25
 8005dd0:	bf48      	it	mi
 8005dd2:	b2b6      	uxthmi	r6, r6
 8005dd4:	07df      	lsls	r7, r3, #31
 8005dd6:	bf48      	it	mi
 8005dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8005ddc:	6029      	str	r1, [r5, #0]
 8005dde:	bf48      	it	mi
 8005de0:	6023      	strmi	r3, [r4, #0]
 8005de2:	b91e      	cbnz	r6, 8005dec <_printf_i+0x1a4>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	f023 0320 	bic.w	r3, r3, #32
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	2310      	movs	r3, #16
 8005dee:	e7a7      	b.n	8005d40 <_printf_i+0xf8>
 8005df0:	4824      	ldr	r0, [pc, #144]	; (8005e84 <_printf_i+0x23c>)
 8005df2:	e7e4      	b.n	8005dbe <_printf_i+0x176>
 8005df4:	4615      	mov	r5, r2
 8005df6:	e7bd      	b.n	8005d74 <_printf_i+0x12c>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	6826      	ldr	r6, [r4, #0]
 8005dfc:	6961      	ldr	r1, [r4, #20]
 8005dfe:	1d18      	adds	r0, r3, #4
 8005e00:	6028      	str	r0, [r5, #0]
 8005e02:	0635      	lsls	r5, r6, #24
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	d501      	bpl.n	8005e0c <_printf_i+0x1c4>
 8005e08:	6019      	str	r1, [r3, #0]
 8005e0a:	e002      	b.n	8005e12 <_printf_i+0x1ca>
 8005e0c:	0670      	lsls	r0, r6, #25
 8005e0e:	d5fb      	bpl.n	8005e08 <_printf_i+0x1c0>
 8005e10:	8019      	strh	r1, [r3, #0]
 8005e12:	2300      	movs	r3, #0
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	4615      	mov	r5, r2
 8005e18:	e7bc      	b.n	8005d94 <_printf_i+0x14c>
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	1d1a      	adds	r2, r3, #4
 8005e1e:	602a      	str	r2, [r5, #0]
 8005e20:	681d      	ldr	r5, [r3, #0]
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	2100      	movs	r1, #0
 8005e26:	4628      	mov	r0, r5
 8005e28:	f7fa f9d2 	bl	80001d0 <memchr>
 8005e2c:	b108      	cbz	r0, 8005e32 <_printf_i+0x1ea>
 8005e2e:	1b40      	subs	r0, r0, r5
 8005e30:	6060      	str	r0, [r4, #4]
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	2300      	movs	r3, #0
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3c:	e7aa      	b.n	8005d94 <_printf_i+0x14c>
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	462a      	mov	r2, r5
 8005e42:	4649      	mov	r1, r9
 8005e44:	4640      	mov	r0, r8
 8005e46:	47d0      	blx	sl
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d0ad      	beq.n	8005da8 <_printf_i+0x160>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	079b      	lsls	r3, r3, #30
 8005e50:	d413      	bmi.n	8005e7a <_printf_i+0x232>
 8005e52:	68e0      	ldr	r0, [r4, #12]
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	4298      	cmp	r0, r3
 8005e58:	bfb8      	it	lt
 8005e5a:	4618      	movlt	r0, r3
 8005e5c:	e7a6      	b.n	8005dac <_printf_i+0x164>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4632      	mov	r2, r6
 8005e62:	4649      	mov	r1, r9
 8005e64:	4640      	mov	r0, r8
 8005e66:	47d0      	blx	sl
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d09d      	beq.n	8005da8 <_printf_i+0x160>
 8005e6c:	3501      	adds	r5, #1
 8005e6e:	68e3      	ldr	r3, [r4, #12]
 8005e70:	9903      	ldr	r1, [sp, #12]
 8005e72:	1a5b      	subs	r3, r3, r1
 8005e74:	42ab      	cmp	r3, r5
 8005e76:	dcf2      	bgt.n	8005e5e <_printf_i+0x216>
 8005e78:	e7eb      	b.n	8005e52 <_printf_i+0x20a>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	f104 0619 	add.w	r6, r4, #25
 8005e80:	e7f5      	b.n	8005e6e <_printf_i+0x226>
 8005e82:	bf00      	nop
 8005e84:	0800a13e 	.word	0x0800a13e
 8005e88:	0800a14f 	.word	0x0800a14f

08005e8c <_scanf_float>:
 8005e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	b087      	sub	sp, #28
 8005e92:	4617      	mov	r7, r2
 8005e94:	9303      	str	r3, [sp, #12]
 8005e96:	688b      	ldr	r3, [r1, #8]
 8005e98:	1e5a      	subs	r2, r3, #1
 8005e9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e9e:	bf83      	ittte	hi
 8005ea0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ea4:	195b      	addhi	r3, r3, r5
 8005ea6:	9302      	strhi	r3, [sp, #8]
 8005ea8:	2300      	movls	r3, #0
 8005eaa:	bf86      	itte	hi
 8005eac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005eb0:	608b      	strhi	r3, [r1, #8]
 8005eb2:	9302      	strls	r3, [sp, #8]
 8005eb4:	680b      	ldr	r3, [r1, #0]
 8005eb6:	468b      	mov	fp, r1
 8005eb8:	2500      	movs	r5, #0
 8005eba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005ebe:	f84b 3b1c 	str.w	r3, [fp], #28
 8005ec2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ec6:	4680      	mov	r8, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	465e      	mov	r6, fp
 8005ecc:	46aa      	mov	sl, r5
 8005ece:	46a9      	mov	r9, r5
 8005ed0:	9501      	str	r5, [sp, #4]
 8005ed2:	68a2      	ldr	r2, [r4, #8]
 8005ed4:	b152      	cbz	r2, 8005eec <_scanf_float+0x60>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b4e      	cmp	r3, #78	; 0x4e
 8005edc:	d864      	bhi.n	8005fa8 <_scanf_float+0x11c>
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d83c      	bhi.n	8005f5c <_scanf_float+0xd0>
 8005ee2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ee6:	b2c8      	uxtb	r0, r1
 8005ee8:	280e      	cmp	r0, #14
 8005eea:	d93a      	bls.n	8005f62 <_scanf_float+0xd6>
 8005eec:	f1b9 0f00 	cmp.w	r9, #0
 8005ef0:	d003      	beq.n	8005efa <_scanf_float+0x6e>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005efe:	f1ba 0f01 	cmp.w	sl, #1
 8005f02:	f200 8113 	bhi.w	800612c <_scanf_float+0x2a0>
 8005f06:	455e      	cmp	r6, fp
 8005f08:	f200 8105 	bhi.w	8006116 <_scanf_float+0x28a>
 8005f0c:	2501      	movs	r5, #1
 8005f0e:	4628      	mov	r0, r5
 8005f10:	b007      	add	sp, #28
 8005f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005f1a:	2a0d      	cmp	r2, #13
 8005f1c:	d8e6      	bhi.n	8005eec <_scanf_float+0x60>
 8005f1e:	a101      	add	r1, pc, #4	; (adr r1, 8005f24 <_scanf_float+0x98>)
 8005f20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f24:	08006063 	.word	0x08006063
 8005f28:	08005eed 	.word	0x08005eed
 8005f2c:	08005eed 	.word	0x08005eed
 8005f30:	08005eed 	.word	0x08005eed
 8005f34:	080060c3 	.word	0x080060c3
 8005f38:	0800609b 	.word	0x0800609b
 8005f3c:	08005eed 	.word	0x08005eed
 8005f40:	08005eed 	.word	0x08005eed
 8005f44:	08006071 	.word	0x08006071
 8005f48:	08005eed 	.word	0x08005eed
 8005f4c:	08005eed 	.word	0x08005eed
 8005f50:	08005eed 	.word	0x08005eed
 8005f54:	08005eed 	.word	0x08005eed
 8005f58:	08006029 	.word	0x08006029
 8005f5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005f60:	e7db      	b.n	8005f1a <_scanf_float+0x8e>
 8005f62:	290e      	cmp	r1, #14
 8005f64:	d8c2      	bhi.n	8005eec <_scanf_float+0x60>
 8005f66:	a001      	add	r0, pc, #4	; (adr r0, 8005f6c <_scanf_float+0xe0>)
 8005f68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f6c:	0800601b 	.word	0x0800601b
 8005f70:	08005eed 	.word	0x08005eed
 8005f74:	0800601b 	.word	0x0800601b
 8005f78:	080060af 	.word	0x080060af
 8005f7c:	08005eed 	.word	0x08005eed
 8005f80:	08005fc9 	.word	0x08005fc9
 8005f84:	08006005 	.word	0x08006005
 8005f88:	08006005 	.word	0x08006005
 8005f8c:	08006005 	.word	0x08006005
 8005f90:	08006005 	.word	0x08006005
 8005f94:	08006005 	.word	0x08006005
 8005f98:	08006005 	.word	0x08006005
 8005f9c:	08006005 	.word	0x08006005
 8005fa0:	08006005 	.word	0x08006005
 8005fa4:	08006005 	.word	0x08006005
 8005fa8:	2b6e      	cmp	r3, #110	; 0x6e
 8005faa:	d809      	bhi.n	8005fc0 <_scanf_float+0x134>
 8005fac:	2b60      	cmp	r3, #96	; 0x60
 8005fae:	d8b2      	bhi.n	8005f16 <_scanf_float+0x8a>
 8005fb0:	2b54      	cmp	r3, #84	; 0x54
 8005fb2:	d077      	beq.n	80060a4 <_scanf_float+0x218>
 8005fb4:	2b59      	cmp	r3, #89	; 0x59
 8005fb6:	d199      	bne.n	8005eec <_scanf_float+0x60>
 8005fb8:	2d07      	cmp	r5, #7
 8005fba:	d197      	bne.n	8005eec <_scanf_float+0x60>
 8005fbc:	2508      	movs	r5, #8
 8005fbe:	e029      	b.n	8006014 <_scanf_float+0x188>
 8005fc0:	2b74      	cmp	r3, #116	; 0x74
 8005fc2:	d06f      	beq.n	80060a4 <_scanf_float+0x218>
 8005fc4:	2b79      	cmp	r3, #121	; 0x79
 8005fc6:	e7f6      	b.n	8005fb6 <_scanf_float+0x12a>
 8005fc8:	6821      	ldr	r1, [r4, #0]
 8005fca:	05c8      	lsls	r0, r1, #23
 8005fcc:	d51a      	bpl.n	8006004 <_scanf_float+0x178>
 8005fce:	9b02      	ldr	r3, [sp, #8]
 8005fd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005fd4:	6021      	str	r1, [r4, #0]
 8005fd6:	f109 0901 	add.w	r9, r9, #1
 8005fda:	b11b      	cbz	r3, 8005fe4 <_scanf_float+0x158>
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	3201      	adds	r2, #1
 8005fe0:	9302      	str	r3, [sp, #8]
 8005fe2:	60a2      	str	r2, [r4, #8]
 8005fe4:	68a3      	ldr	r3, [r4, #8]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	3301      	adds	r3, #1
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	f340 8084 	ble.w	8006104 <_scanf_float+0x278>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	3301      	adds	r3, #1
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	e766      	b.n	8005ed2 <_scanf_float+0x46>
 8006004:	eb1a 0f05 	cmn.w	sl, r5
 8006008:	f47f af70 	bne.w	8005eec <_scanf_float+0x60>
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006012:	6022      	str	r2, [r4, #0]
 8006014:	f806 3b01 	strb.w	r3, [r6], #1
 8006018:	e7e4      	b.n	8005fe4 <_scanf_float+0x158>
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	0610      	lsls	r0, r2, #24
 800601e:	f57f af65 	bpl.w	8005eec <_scanf_float+0x60>
 8006022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006026:	e7f4      	b.n	8006012 <_scanf_float+0x186>
 8006028:	f1ba 0f00 	cmp.w	sl, #0
 800602c:	d10e      	bne.n	800604c <_scanf_float+0x1c0>
 800602e:	f1b9 0f00 	cmp.w	r9, #0
 8006032:	d10e      	bne.n	8006052 <_scanf_float+0x1c6>
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800603a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800603e:	d108      	bne.n	8006052 <_scanf_float+0x1c6>
 8006040:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006044:	6022      	str	r2, [r4, #0]
 8006046:	f04f 0a01 	mov.w	sl, #1
 800604a:	e7e3      	b.n	8006014 <_scanf_float+0x188>
 800604c:	f1ba 0f02 	cmp.w	sl, #2
 8006050:	d055      	beq.n	80060fe <_scanf_float+0x272>
 8006052:	2d01      	cmp	r5, #1
 8006054:	d002      	beq.n	800605c <_scanf_float+0x1d0>
 8006056:	2d04      	cmp	r5, #4
 8006058:	f47f af48 	bne.w	8005eec <_scanf_float+0x60>
 800605c:	3501      	adds	r5, #1
 800605e:	b2ed      	uxtb	r5, r5
 8006060:	e7d8      	b.n	8006014 <_scanf_float+0x188>
 8006062:	f1ba 0f01 	cmp.w	sl, #1
 8006066:	f47f af41 	bne.w	8005eec <_scanf_float+0x60>
 800606a:	f04f 0a02 	mov.w	sl, #2
 800606e:	e7d1      	b.n	8006014 <_scanf_float+0x188>
 8006070:	b97d      	cbnz	r5, 8006092 <_scanf_float+0x206>
 8006072:	f1b9 0f00 	cmp.w	r9, #0
 8006076:	f47f af3c 	bne.w	8005ef2 <_scanf_float+0x66>
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006080:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006084:	f47f af39 	bne.w	8005efa <_scanf_float+0x6e>
 8006088:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800608c:	6022      	str	r2, [r4, #0]
 800608e:	2501      	movs	r5, #1
 8006090:	e7c0      	b.n	8006014 <_scanf_float+0x188>
 8006092:	2d03      	cmp	r5, #3
 8006094:	d0e2      	beq.n	800605c <_scanf_float+0x1d0>
 8006096:	2d05      	cmp	r5, #5
 8006098:	e7de      	b.n	8006058 <_scanf_float+0x1cc>
 800609a:	2d02      	cmp	r5, #2
 800609c:	f47f af26 	bne.w	8005eec <_scanf_float+0x60>
 80060a0:	2503      	movs	r5, #3
 80060a2:	e7b7      	b.n	8006014 <_scanf_float+0x188>
 80060a4:	2d06      	cmp	r5, #6
 80060a6:	f47f af21 	bne.w	8005eec <_scanf_float+0x60>
 80060aa:	2507      	movs	r5, #7
 80060ac:	e7b2      	b.n	8006014 <_scanf_float+0x188>
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	0591      	lsls	r1, r2, #22
 80060b2:	f57f af1b 	bpl.w	8005eec <_scanf_float+0x60>
 80060b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80060ba:	6022      	str	r2, [r4, #0]
 80060bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80060c0:	e7a8      	b.n	8006014 <_scanf_float+0x188>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80060c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80060cc:	d006      	beq.n	80060dc <_scanf_float+0x250>
 80060ce:	0550      	lsls	r0, r2, #21
 80060d0:	f57f af0c 	bpl.w	8005eec <_scanf_float+0x60>
 80060d4:	f1b9 0f00 	cmp.w	r9, #0
 80060d8:	f43f af0f 	beq.w	8005efa <_scanf_float+0x6e>
 80060dc:	0591      	lsls	r1, r2, #22
 80060de:	bf58      	it	pl
 80060e0:	9901      	ldrpl	r1, [sp, #4]
 80060e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060e6:	bf58      	it	pl
 80060e8:	eba9 0101 	subpl.w	r1, r9, r1
 80060ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80060f0:	bf58      	it	pl
 80060f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80060f6:	6022      	str	r2, [r4, #0]
 80060f8:	f04f 0900 	mov.w	r9, #0
 80060fc:	e78a      	b.n	8006014 <_scanf_float+0x188>
 80060fe:	f04f 0a03 	mov.w	sl, #3
 8006102:	e787      	b.n	8006014 <_scanf_float+0x188>
 8006104:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006108:	4639      	mov	r1, r7
 800610a:	4640      	mov	r0, r8
 800610c:	4798      	blx	r3
 800610e:	2800      	cmp	r0, #0
 8006110:	f43f aedf 	beq.w	8005ed2 <_scanf_float+0x46>
 8006114:	e6ea      	b.n	8005eec <_scanf_float+0x60>
 8006116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800611a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800611e:	463a      	mov	r2, r7
 8006120:	4640      	mov	r0, r8
 8006122:	4798      	blx	r3
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	3b01      	subs	r3, #1
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	e6ec      	b.n	8005f06 <_scanf_float+0x7a>
 800612c:	1e6b      	subs	r3, r5, #1
 800612e:	2b06      	cmp	r3, #6
 8006130:	d825      	bhi.n	800617e <_scanf_float+0x2f2>
 8006132:	2d02      	cmp	r5, #2
 8006134:	d836      	bhi.n	80061a4 <_scanf_float+0x318>
 8006136:	455e      	cmp	r6, fp
 8006138:	f67f aee8 	bls.w	8005f0c <_scanf_float+0x80>
 800613c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006140:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006144:	463a      	mov	r2, r7
 8006146:	4640      	mov	r0, r8
 8006148:	4798      	blx	r3
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	3b01      	subs	r3, #1
 800614e:	6123      	str	r3, [r4, #16]
 8006150:	e7f1      	b.n	8006136 <_scanf_float+0x2aa>
 8006152:	9802      	ldr	r0, [sp, #8]
 8006154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006158:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800615c:	9002      	str	r0, [sp, #8]
 800615e:	463a      	mov	r2, r7
 8006160:	4640      	mov	r0, r8
 8006162:	4798      	blx	r3
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	3b01      	subs	r3, #1
 8006168:	6123      	str	r3, [r4, #16]
 800616a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800616e:	fa5f fa8a 	uxtb.w	sl, sl
 8006172:	f1ba 0f02 	cmp.w	sl, #2
 8006176:	d1ec      	bne.n	8006152 <_scanf_float+0x2c6>
 8006178:	3d03      	subs	r5, #3
 800617a:	b2ed      	uxtb	r5, r5
 800617c:	1b76      	subs	r6, r6, r5
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	05da      	lsls	r2, r3, #23
 8006182:	d52f      	bpl.n	80061e4 <_scanf_float+0x358>
 8006184:	055b      	lsls	r3, r3, #21
 8006186:	d510      	bpl.n	80061aa <_scanf_float+0x31e>
 8006188:	455e      	cmp	r6, fp
 800618a:	f67f aebf 	bls.w	8005f0c <_scanf_float+0x80>
 800618e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006196:	463a      	mov	r2, r7
 8006198:	4640      	mov	r0, r8
 800619a:	4798      	blx	r3
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	3b01      	subs	r3, #1
 80061a0:	6123      	str	r3, [r4, #16]
 80061a2:	e7f1      	b.n	8006188 <_scanf_float+0x2fc>
 80061a4:	46aa      	mov	sl, r5
 80061a6:	9602      	str	r6, [sp, #8]
 80061a8:	e7df      	b.n	800616a <_scanf_float+0x2de>
 80061aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	2965      	cmp	r1, #101	; 0x65
 80061b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80061b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80061ba:	6123      	str	r3, [r4, #16]
 80061bc:	d00c      	beq.n	80061d8 <_scanf_float+0x34c>
 80061be:	2945      	cmp	r1, #69	; 0x45
 80061c0:	d00a      	beq.n	80061d8 <_scanf_float+0x34c>
 80061c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061c6:	463a      	mov	r2, r7
 80061c8:	4640      	mov	r0, r8
 80061ca:	4798      	blx	r3
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	1eb5      	subs	r5, r6, #2
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061dc:	463a      	mov	r2, r7
 80061de:	4640      	mov	r0, r8
 80061e0:	4798      	blx	r3
 80061e2:	462e      	mov	r6, r5
 80061e4:	6825      	ldr	r5, [r4, #0]
 80061e6:	f015 0510 	ands.w	r5, r5, #16
 80061ea:	d158      	bne.n	800629e <_scanf_float+0x412>
 80061ec:	7035      	strb	r5, [r6, #0]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f8:	d11c      	bne.n	8006234 <_scanf_float+0x3a8>
 80061fa:	9b01      	ldr	r3, [sp, #4]
 80061fc:	454b      	cmp	r3, r9
 80061fe:	eba3 0209 	sub.w	r2, r3, r9
 8006202:	d124      	bne.n	800624e <_scanf_float+0x3c2>
 8006204:	2200      	movs	r2, #0
 8006206:	4659      	mov	r1, fp
 8006208:	4640      	mov	r0, r8
 800620a:	f002 fc2d 	bl	8008a68 <_strtod_r>
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	6821      	ldr	r1, [r4, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f011 0f02 	tst.w	r1, #2
 8006218:	ec57 6b10 	vmov	r6, r7, d0
 800621c:	f103 0204 	add.w	r2, r3, #4
 8006220:	d020      	beq.n	8006264 <_scanf_float+0x3d8>
 8006222:	9903      	ldr	r1, [sp, #12]
 8006224:	600a      	str	r2, [r1, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	e9c3 6700 	strd	r6, r7, [r3]
 800622c:	68e3      	ldr	r3, [r4, #12]
 800622e:	3301      	adds	r3, #1
 8006230:	60e3      	str	r3, [r4, #12]
 8006232:	e66c      	b.n	8005f0e <_scanf_float+0x82>
 8006234:	9b04      	ldr	r3, [sp, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0e4      	beq.n	8006204 <_scanf_float+0x378>
 800623a:	9905      	ldr	r1, [sp, #20]
 800623c:	230a      	movs	r3, #10
 800623e:	462a      	mov	r2, r5
 8006240:	3101      	adds	r1, #1
 8006242:	4640      	mov	r0, r8
 8006244:	f002 fc98 	bl	8008b78 <_strtol_r>
 8006248:	9b04      	ldr	r3, [sp, #16]
 800624a:	9e05      	ldr	r6, [sp, #20]
 800624c:	1ac2      	subs	r2, r0, r3
 800624e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006252:	429e      	cmp	r6, r3
 8006254:	bf28      	it	cs
 8006256:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800625a:	4912      	ldr	r1, [pc, #72]	; (80062a4 <_scanf_float+0x418>)
 800625c:	4630      	mov	r0, r6
 800625e:	f000 f8e7 	bl	8006430 <siprintf>
 8006262:	e7cf      	b.n	8006204 <_scanf_float+0x378>
 8006264:	f011 0f04 	tst.w	r1, #4
 8006268:	9903      	ldr	r1, [sp, #12]
 800626a:	600a      	str	r2, [r1, #0]
 800626c:	d1db      	bne.n	8006226 <_scanf_float+0x39a>
 800626e:	f8d3 8000 	ldr.w	r8, [r3]
 8006272:	ee10 2a10 	vmov	r2, s0
 8006276:	ee10 0a10 	vmov	r0, s0
 800627a:	463b      	mov	r3, r7
 800627c:	4639      	mov	r1, r7
 800627e:	f7fa fc55 	bl	8000b2c <__aeabi_dcmpun>
 8006282:	b128      	cbz	r0, 8006290 <_scanf_float+0x404>
 8006284:	4808      	ldr	r0, [pc, #32]	; (80062a8 <_scanf_float+0x41c>)
 8006286:	f000 f9b5 	bl	80065f4 <nanf>
 800628a:	ed88 0a00 	vstr	s0, [r8]
 800628e:	e7cd      	b.n	800622c <_scanf_float+0x3a0>
 8006290:	4630      	mov	r0, r6
 8006292:	4639      	mov	r1, r7
 8006294:	f7fa fca8 	bl	8000be8 <__aeabi_d2f>
 8006298:	f8c8 0000 	str.w	r0, [r8]
 800629c:	e7c6      	b.n	800622c <_scanf_float+0x3a0>
 800629e:	2500      	movs	r5, #0
 80062a0:	e635      	b.n	8005f0e <_scanf_float+0x82>
 80062a2:	bf00      	nop
 80062a4:	0800a160 	.word	0x0800a160
 80062a8:	0800a4f5 	.word	0x0800a4f5

080062ac <std>:
 80062ac:	2300      	movs	r3, #0
 80062ae:	b510      	push	{r4, lr}
 80062b0:	4604      	mov	r4, r0
 80062b2:	e9c0 3300 	strd	r3, r3, [r0]
 80062b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062ba:	6083      	str	r3, [r0, #8]
 80062bc:	8181      	strh	r1, [r0, #12]
 80062be:	6643      	str	r3, [r0, #100]	; 0x64
 80062c0:	81c2      	strh	r2, [r0, #14]
 80062c2:	6183      	str	r3, [r0, #24]
 80062c4:	4619      	mov	r1, r3
 80062c6:	2208      	movs	r2, #8
 80062c8:	305c      	adds	r0, #92	; 0x5c
 80062ca:	f000 f914 	bl	80064f6 <memset>
 80062ce:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <std+0x38>)
 80062d0:	6263      	str	r3, [r4, #36]	; 0x24
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <std+0x3c>)
 80062d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <std+0x40>)
 80062d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062da:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <std+0x44>)
 80062dc:	6224      	str	r4, [r4, #32]
 80062de:	6323      	str	r3, [r4, #48]	; 0x30
 80062e0:	bd10      	pop	{r4, pc}
 80062e2:	bf00      	nop
 80062e4:	08006471 	.word	0x08006471
 80062e8:	08006493 	.word	0x08006493
 80062ec:	080064cb 	.word	0x080064cb
 80062f0:	080064ef 	.word	0x080064ef

080062f4 <stdio_exit_handler>:
 80062f4:	4a02      	ldr	r2, [pc, #8]	; (8006300 <stdio_exit_handler+0xc>)
 80062f6:	4903      	ldr	r1, [pc, #12]	; (8006304 <stdio_exit_handler+0x10>)
 80062f8:	4803      	ldr	r0, [pc, #12]	; (8006308 <stdio_exit_handler+0x14>)
 80062fa:	f000 b869 	b.w	80063d0 <_fwalk_sglue>
 80062fe:	bf00      	nop
 8006300:	20000030 	.word	0x20000030
 8006304:	080091c1 	.word	0x080091c1
 8006308:	2000003c 	.word	0x2000003c

0800630c <cleanup_stdio>:
 800630c:	6841      	ldr	r1, [r0, #4]
 800630e:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <cleanup_stdio+0x34>)
 8006310:	4299      	cmp	r1, r3
 8006312:	b510      	push	{r4, lr}
 8006314:	4604      	mov	r4, r0
 8006316:	d001      	beq.n	800631c <cleanup_stdio+0x10>
 8006318:	f002 ff52 	bl	80091c0 <_fflush_r>
 800631c:	68a1      	ldr	r1, [r4, #8]
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <cleanup_stdio+0x38>)
 8006320:	4299      	cmp	r1, r3
 8006322:	d002      	beq.n	800632a <cleanup_stdio+0x1e>
 8006324:	4620      	mov	r0, r4
 8006326:	f002 ff4b 	bl	80091c0 <_fflush_r>
 800632a:	68e1      	ldr	r1, [r4, #12]
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <cleanup_stdio+0x3c>)
 800632e:	4299      	cmp	r1, r3
 8006330:	d004      	beq.n	800633c <cleanup_stdio+0x30>
 8006332:	4620      	mov	r0, r4
 8006334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006338:	f002 bf42 	b.w	80091c0 <_fflush_r>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	bf00      	nop
 8006340:	20000344 	.word	0x20000344
 8006344:	200003ac 	.word	0x200003ac
 8006348:	20000414 	.word	0x20000414

0800634c <global_stdio_init.part.0>:
 800634c:	b510      	push	{r4, lr}
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <global_stdio_init.part.0+0x30>)
 8006350:	4c0b      	ldr	r4, [pc, #44]	; (8006380 <global_stdio_init.part.0+0x34>)
 8006352:	4a0c      	ldr	r2, [pc, #48]	; (8006384 <global_stdio_init.part.0+0x38>)
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	4620      	mov	r0, r4
 8006358:	2200      	movs	r2, #0
 800635a:	2104      	movs	r1, #4
 800635c:	f7ff ffa6 	bl	80062ac <std>
 8006360:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006364:	2201      	movs	r2, #1
 8006366:	2109      	movs	r1, #9
 8006368:	f7ff ffa0 	bl	80062ac <std>
 800636c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006370:	2202      	movs	r2, #2
 8006372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006376:	2112      	movs	r1, #18
 8006378:	f7ff bf98 	b.w	80062ac <std>
 800637c:	2000047c 	.word	0x2000047c
 8006380:	20000344 	.word	0x20000344
 8006384:	080062f5 	.word	0x080062f5

08006388 <__sfp_lock_acquire>:
 8006388:	4801      	ldr	r0, [pc, #4]	; (8006390 <__sfp_lock_acquire+0x8>)
 800638a:	f000 b931 	b.w	80065f0 <__retarget_lock_acquire_recursive>
 800638e:	bf00      	nop
 8006390:	20000485 	.word	0x20000485

08006394 <__sfp_lock_release>:
 8006394:	4801      	ldr	r0, [pc, #4]	; (800639c <__sfp_lock_release+0x8>)
 8006396:	f000 b92c 	b.w	80065f2 <__retarget_lock_release_recursive>
 800639a:	bf00      	nop
 800639c:	20000485 	.word	0x20000485

080063a0 <__sinit>:
 80063a0:	b510      	push	{r4, lr}
 80063a2:	4604      	mov	r4, r0
 80063a4:	f7ff fff0 	bl	8006388 <__sfp_lock_acquire>
 80063a8:	6a23      	ldr	r3, [r4, #32]
 80063aa:	b11b      	cbz	r3, 80063b4 <__sinit+0x14>
 80063ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b0:	f7ff bff0 	b.w	8006394 <__sfp_lock_release>
 80063b4:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <__sinit+0x28>)
 80063b6:	6223      	str	r3, [r4, #32]
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <__sinit+0x2c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1f5      	bne.n	80063ac <__sinit+0xc>
 80063c0:	f7ff ffc4 	bl	800634c <global_stdio_init.part.0>
 80063c4:	e7f2      	b.n	80063ac <__sinit+0xc>
 80063c6:	bf00      	nop
 80063c8:	0800630d 	.word	0x0800630d
 80063cc:	2000047c 	.word	0x2000047c

080063d0 <_fwalk_sglue>:
 80063d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063d4:	4607      	mov	r7, r0
 80063d6:	4688      	mov	r8, r1
 80063d8:	4614      	mov	r4, r2
 80063da:	2600      	movs	r6, #0
 80063dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063e0:	f1b9 0901 	subs.w	r9, r9, #1
 80063e4:	d505      	bpl.n	80063f2 <_fwalk_sglue+0x22>
 80063e6:	6824      	ldr	r4, [r4, #0]
 80063e8:	2c00      	cmp	r4, #0
 80063ea:	d1f7      	bne.n	80063dc <_fwalk_sglue+0xc>
 80063ec:	4630      	mov	r0, r6
 80063ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d907      	bls.n	8006408 <_fwalk_sglue+0x38>
 80063f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063fc:	3301      	adds	r3, #1
 80063fe:	d003      	beq.n	8006408 <_fwalk_sglue+0x38>
 8006400:	4629      	mov	r1, r5
 8006402:	4638      	mov	r0, r7
 8006404:	47c0      	blx	r8
 8006406:	4306      	orrs	r6, r0
 8006408:	3568      	adds	r5, #104	; 0x68
 800640a:	e7e9      	b.n	80063e0 <_fwalk_sglue+0x10>

0800640c <iprintf>:
 800640c:	b40f      	push	{r0, r1, r2, r3}
 800640e:	b507      	push	{r0, r1, r2, lr}
 8006410:	4906      	ldr	r1, [pc, #24]	; (800642c <iprintf+0x20>)
 8006412:	ab04      	add	r3, sp, #16
 8006414:	6808      	ldr	r0, [r1, #0]
 8006416:	f853 2b04 	ldr.w	r2, [r3], #4
 800641a:	6881      	ldr	r1, [r0, #8]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	f002 fd2f 	bl	8008e80 <_vfiprintf_r>
 8006422:	b003      	add	sp, #12
 8006424:	f85d eb04 	ldr.w	lr, [sp], #4
 8006428:	b004      	add	sp, #16
 800642a:	4770      	bx	lr
 800642c:	20000088 	.word	0x20000088

08006430 <siprintf>:
 8006430:	b40e      	push	{r1, r2, r3}
 8006432:	b500      	push	{lr}
 8006434:	b09c      	sub	sp, #112	; 0x70
 8006436:	ab1d      	add	r3, sp, #116	; 0x74
 8006438:	9002      	str	r0, [sp, #8]
 800643a:	9006      	str	r0, [sp, #24]
 800643c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006440:	4809      	ldr	r0, [pc, #36]	; (8006468 <siprintf+0x38>)
 8006442:	9107      	str	r1, [sp, #28]
 8006444:	9104      	str	r1, [sp, #16]
 8006446:	4909      	ldr	r1, [pc, #36]	; (800646c <siprintf+0x3c>)
 8006448:	f853 2b04 	ldr.w	r2, [r3], #4
 800644c:	9105      	str	r1, [sp, #20]
 800644e:	6800      	ldr	r0, [r0, #0]
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	a902      	add	r1, sp, #8
 8006454:	f002 fbec 	bl	8008c30 <_svfiprintf_r>
 8006458:	9b02      	ldr	r3, [sp, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	b01c      	add	sp, #112	; 0x70
 8006460:	f85d eb04 	ldr.w	lr, [sp], #4
 8006464:	b003      	add	sp, #12
 8006466:	4770      	bx	lr
 8006468:	20000088 	.word	0x20000088
 800646c:	ffff0208 	.word	0xffff0208

08006470 <__sread>:
 8006470:	b510      	push	{r4, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	f000 f86c 	bl	8006554 <_read_r>
 800647c:	2800      	cmp	r0, #0
 800647e:	bfab      	itete	ge
 8006480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006482:	89a3      	ldrhlt	r3, [r4, #12]
 8006484:	181b      	addge	r3, r3, r0
 8006486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800648a:	bfac      	ite	ge
 800648c:	6563      	strge	r3, [r4, #84]	; 0x54
 800648e:	81a3      	strhlt	r3, [r4, #12]
 8006490:	bd10      	pop	{r4, pc}

08006492 <__swrite>:
 8006492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	461f      	mov	r7, r3
 8006498:	898b      	ldrh	r3, [r1, #12]
 800649a:	05db      	lsls	r3, r3, #23
 800649c:	4605      	mov	r5, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	4616      	mov	r6, r2
 80064a2:	d505      	bpl.n	80064b0 <__swrite+0x1e>
 80064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a8:	2302      	movs	r3, #2
 80064aa:	2200      	movs	r2, #0
 80064ac:	f000 f840 	bl	8006530 <_lseek_r>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	4632      	mov	r2, r6
 80064be:	463b      	mov	r3, r7
 80064c0:	4628      	mov	r0, r5
 80064c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	f000 b857 	b.w	8006578 <_write_r>

080064ca <__sseek>:
 80064ca:	b510      	push	{r4, lr}
 80064cc:	460c      	mov	r4, r1
 80064ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d2:	f000 f82d 	bl	8006530 <_lseek_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	bf15      	itete	ne
 80064dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80064de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064e6:	81a3      	strheq	r3, [r4, #12]
 80064e8:	bf18      	it	ne
 80064ea:	81a3      	strhne	r3, [r4, #12]
 80064ec:	bd10      	pop	{r4, pc}

080064ee <__sclose>:
 80064ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f2:	f000 b80d 	b.w	8006510 <_close_r>

080064f6 <memset>:
 80064f6:	4402      	add	r2, r0
 80064f8:	4603      	mov	r3, r0
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d100      	bne.n	8006500 <memset+0xa>
 80064fe:	4770      	bx	lr
 8006500:	f803 1b01 	strb.w	r1, [r3], #1
 8006504:	e7f9      	b.n	80064fa <memset+0x4>
	...

08006508 <_localeconv_r>:
 8006508:	4800      	ldr	r0, [pc, #0]	; (800650c <_localeconv_r+0x4>)
 800650a:	4770      	bx	lr
 800650c:	2000017c 	.word	0x2000017c

08006510 <_close_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d06      	ldr	r5, [pc, #24]	; (800652c <_close_r+0x1c>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	f7fb fefb 	bl	8002316 <_close>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_close_r+0x1a>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_close_r+0x1a>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000480 	.word	0x20000480

08006530 <_lseek_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d07      	ldr	r5, [pc, #28]	; (8006550 <_lseek_r+0x20>)
 8006534:	4604      	mov	r4, r0
 8006536:	4608      	mov	r0, r1
 8006538:	4611      	mov	r1, r2
 800653a:	2200      	movs	r2, #0
 800653c:	602a      	str	r2, [r5, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	f7fb ff10 	bl	8002364 <_lseek>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_lseek_r+0x1e>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_lseek_r+0x1e>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20000480 	.word	0x20000480

08006554 <_read_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d07      	ldr	r5, [pc, #28]	; (8006574 <_read_r+0x20>)
 8006558:	4604      	mov	r4, r0
 800655a:	4608      	mov	r0, r1
 800655c:	4611      	mov	r1, r2
 800655e:	2200      	movs	r2, #0
 8006560:	602a      	str	r2, [r5, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	f7fb fe9e 	bl	80022a4 <_read>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_read_r+0x1e>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_read_r+0x1e>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20000480 	.word	0x20000480

08006578 <_write_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4d07      	ldr	r5, [pc, #28]	; (8006598 <_write_r+0x20>)
 800657c:	4604      	mov	r4, r0
 800657e:	4608      	mov	r0, r1
 8006580:	4611      	mov	r1, r2
 8006582:	2200      	movs	r2, #0
 8006584:	602a      	str	r2, [r5, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	f7fb fea9 	bl	80022de <_write>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d102      	bne.n	8006596 <_write_r+0x1e>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	b103      	cbz	r3, 8006596 <_write_r+0x1e>
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	20000480 	.word	0x20000480

0800659c <__errno>:
 800659c:	4b01      	ldr	r3, [pc, #4]	; (80065a4 <__errno+0x8>)
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20000088 	.word	0x20000088

080065a8 <__libc_init_array>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4d0d      	ldr	r5, [pc, #52]	; (80065e0 <__libc_init_array+0x38>)
 80065ac:	4c0d      	ldr	r4, [pc, #52]	; (80065e4 <__libc_init_array+0x3c>)
 80065ae:	1b64      	subs	r4, r4, r5
 80065b0:	10a4      	asrs	r4, r4, #2
 80065b2:	2600      	movs	r6, #0
 80065b4:	42a6      	cmp	r6, r4
 80065b6:	d109      	bne.n	80065cc <__libc_init_array+0x24>
 80065b8:	4d0b      	ldr	r5, [pc, #44]	; (80065e8 <__libc_init_array+0x40>)
 80065ba:	4c0c      	ldr	r4, [pc, #48]	; (80065ec <__libc_init_array+0x44>)
 80065bc:	f003 fd7e 	bl	800a0bc <_init>
 80065c0:	1b64      	subs	r4, r4, r5
 80065c2:	10a4      	asrs	r4, r4, #2
 80065c4:	2600      	movs	r6, #0
 80065c6:	42a6      	cmp	r6, r4
 80065c8:	d105      	bne.n	80065d6 <__libc_init_array+0x2e>
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d0:	4798      	blx	r3
 80065d2:	3601      	adds	r6, #1
 80065d4:	e7ee      	b.n	80065b4 <__libc_init_array+0xc>
 80065d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065da:	4798      	blx	r3
 80065dc:	3601      	adds	r6, #1
 80065de:	e7f2      	b.n	80065c6 <__libc_init_array+0x1e>
 80065e0:	0800a5a0 	.word	0x0800a5a0
 80065e4:	0800a5a0 	.word	0x0800a5a0
 80065e8:	0800a5a0 	.word	0x0800a5a0
 80065ec:	0800a5a4 	.word	0x0800a5a4

080065f0 <__retarget_lock_acquire_recursive>:
 80065f0:	4770      	bx	lr

080065f2 <__retarget_lock_release_recursive>:
 80065f2:	4770      	bx	lr

080065f4 <nanf>:
 80065f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80065fc <nanf+0x8>
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	7fc00000 	.word	0x7fc00000

08006600 <quorem>:
 8006600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	6903      	ldr	r3, [r0, #16]
 8006606:	690c      	ldr	r4, [r1, #16]
 8006608:	42a3      	cmp	r3, r4
 800660a:	4607      	mov	r7, r0
 800660c:	db7e      	blt.n	800670c <quorem+0x10c>
 800660e:	3c01      	subs	r4, #1
 8006610:	f101 0814 	add.w	r8, r1, #20
 8006614:	f100 0514 	add.w	r5, r0, #20
 8006618:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006622:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006626:	3301      	adds	r3, #1
 8006628:	429a      	cmp	r2, r3
 800662a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800662e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006632:	fbb2 f6f3 	udiv	r6, r2, r3
 8006636:	d331      	bcc.n	800669c <quorem+0x9c>
 8006638:	f04f 0e00 	mov.w	lr, #0
 800663c:	4640      	mov	r0, r8
 800663e:	46ac      	mov	ip, r5
 8006640:	46f2      	mov	sl, lr
 8006642:	f850 2b04 	ldr.w	r2, [r0], #4
 8006646:	b293      	uxth	r3, r2
 8006648:	fb06 e303 	mla	r3, r6, r3, lr
 800664c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006650:	0c1a      	lsrs	r2, r3, #16
 8006652:	b29b      	uxth	r3, r3
 8006654:	ebaa 0303 	sub.w	r3, sl, r3
 8006658:	f8dc a000 	ldr.w	sl, [ip]
 800665c:	fa13 f38a 	uxtah	r3, r3, sl
 8006660:	fb06 220e 	mla	r2, r6, lr, r2
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	9b00      	ldr	r3, [sp, #0]
 8006668:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800666c:	b292      	uxth	r2, r2
 800666e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006672:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006676:	f8bd 3000 	ldrh.w	r3, [sp]
 800667a:	4581      	cmp	r9, r0
 800667c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006680:	f84c 3b04 	str.w	r3, [ip], #4
 8006684:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006688:	d2db      	bcs.n	8006642 <quorem+0x42>
 800668a:	f855 300b 	ldr.w	r3, [r5, fp]
 800668e:	b92b      	cbnz	r3, 800669c <quorem+0x9c>
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	3b04      	subs	r3, #4
 8006694:	429d      	cmp	r5, r3
 8006696:	461a      	mov	r2, r3
 8006698:	d32c      	bcc.n	80066f4 <quorem+0xf4>
 800669a:	613c      	str	r4, [r7, #16]
 800669c:	4638      	mov	r0, r7
 800669e:	f001 f9ef 	bl	8007a80 <__mcmp>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	db22      	blt.n	80066ec <quorem+0xec>
 80066a6:	3601      	adds	r6, #1
 80066a8:	4629      	mov	r1, r5
 80066aa:	2000      	movs	r0, #0
 80066ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80066b0:	f8d1 c000 	ldr.w	ip, [r1]
 80066b4:	b293      	uxth	r3, r2
 80066b6:	1ac3      	subs	r3, r0, r3
 80066b8:	0c12      	lsrs	r2, r2, #16
 80066ba:	fa13 f38c 	uxtah	r3, r3, ip
 80066be:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80066c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066cc:	45c1      	cmp	r9, r8
 80066ce:	f841 3b04 	str.w	r3, [r1], #4
 80066d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066d6:	d2e9      	bcs.n	80066ac <quorem+0xac>
 80066d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066e0:	b922      	cbnz	r2, 80066ec <quorem+0xec>
 80066e2:	3b04      	subs	r3, #4
 80066e4:	429d      	cmp	r5, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	d30a      	bcc.n	8006700 <quorem+0x100>
 80066ea:	613c      	str	r4, [r7, #16]
 80066ec:	4630      	mov	r0, r6
 80066ee:	b003      	add	sp, #12
 80066f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	3b04      	subs	r3, #4
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	d1ce      	bne.n	800669a <quorem+0x9a>
 80066fc:	3c01      	subs	r4, #1
 80066fe:	e7c9      	b.n	8006694 <quorem+0x94>
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	3b04      	subs	r3, #4
 8006704:	2a00      	cmp	r2, #0
 8006706:	d1f0      	bne.n	80066ea <quorem+0xea>
 8006708:	3c01      	subs	r4, #1
 800670a:	e7eb      	b.n	80066e4 <quorem+0xe4>
 800670c:	2000      	movs	r0, #0
 800670e:	e7ee      	b.n	80066ee <quorem+0xee>

08006710 <_dtoa_r>:
 8006710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	ed2d 8b04 	vpush	{d8-d9}
 8006718:	69c5      	ldr	r5, [r0, #28]
 800671a:	b093      	sub	sp, #76	; 0x4c
 800671c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006720:	ec57 6b10 	vmov	r6, r7, d0
 8006724:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006728:	9107      	str	r1, [sp, #28]
 800672a:	4604      	mov	r4, r0
 800672c:	920a      	str	r2, [sp, #40]	; 0x28
 800672e:	930d      	str	r3, [sp, #52]	; 0x34
 8006730:	b975      	cbnz	r5, 8006750 <_dtoa_r+0x40>
 8006732:	2010      	movs	r0, #16
 8006734:	f000 fe2a 	bl	800738c <malloc>
 8006738:	4602      	mov	r2, r0
 800673a:	61e0      	str	r0, [r4, #28]
 800673c:	b920      	cbnz	r0, 8006748 <_dtoa_r+0x38>
 800673e:	4bae      	ldr	r3, [pc, #696]	; (80069f8 <_dtoa_r+0x2e8>)
 8006740:	21ef      	movs	r1, #239	; 0xef
 8006742:	48ae      	ldr	r0, [pc, #696]	; (80069fc <_dtoa_r+0x2ec>)
 8006744:	f002 fe4c 	bl	80093e0 <__assert_func>
 8006748:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800674c:	6005      	str	r5, [r0, #0]
 800674e:	60c5      	str	r5, [r0, #12]
 8006750:	69e3      	ldr	r3, [r4, #28]
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	b151      	cbz	r1, 800676c <_dtoa_r+0x5c>
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	604a      	str	r2, [r1, #4]
 800675a:	2301      	movs	r3, #1
 800675c:	4093      	lsls	r3, r2
 800675e:	608b      	str	r3, [r1, #8]
 8006760:	4620      	mov	r0, r4
 8006762:	f000 ff07 	bl	8007574 <_Bfree>
 8006766:	69e3      	ldr	r3, [r4, #28]
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	1e3b      	subs	r3, r7, #0
 800676e:	bfbb      	ittet	lt
 8006770:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006774:	9303      	strlt	r3, [sp, #12]
 8006776:	2300      	movge	r3, #0
 8006778:	2201      	movlt	r2, #1
 800677a:	bfac      	ite	ge
 800677c:	f8c8 3000 	strge.w	r3, [r8]
 8006780:	f8c8 2000 	strlt.w	r2, [r8]
 8006784:	4b9e      	ldr	r3, [pc, #632]	; (8006a00 <_dtoa_r+0x2f0>)
 8006786:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800678a:	ea33 0308 	bics.w	r3, r3, r8
 800678e:	d11b      	bne.n	80067c8 <_dtoa_r+0xb8>
 8006790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006792:	f242 730f 	movw	r3, #9999	; 0x270f
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800679c:	4333      	orrs	r3, r6
 800679e:	f000 8593 	beq.w	80072c8 <_dtoa_r+0xbb8>
 80067a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067a4:	b963      	cbnz	r3, 80067c0 <_dtoa_r+0xb0>
 80067a6:	4b97      	ldr	r3, [pc, #604]	; (8006a04 <_dtoa_r+0x2f4>)
 80067a8:	e027      	b.n	80067fa <_dtoa_r+0xea>
 80067aa:	4b97      	ldr	r3, [pc, #604]	; (8006a08 <_dtoa_r+0x2f8>)
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	3308      	adds	r3, #8
 80067b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	9800      	ldr	r0, [sp, #0]
 80067b6:	b013      	add	sp, #76	; 0x4c
 80067b8:	ecbd 8b04 	vpop	{d8-d9}
 80067bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c0:	4b90      	ldr	r3, [pc, #576]	; (8006a04 <_dtoa_r+0x2f4>)
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	3303      	adds	r3, #3
 80067c6:	e7f3      	b.n	80067b0 <_dtoa_r+0xa0>
 80067c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	ec51 0b17 	vmov	r0, r1, d7
 80067d2:	eeb0 8a47 	vmov.f32	s16, s14
 80067d6:	eef0 8a67 	vmov.f32	s17, s15
 80067da:	2300      	movs	r3, #0
 80067dc:	f7fa f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e0:	4681      	mov	r9, r0
 80067e2:	b160      	cbz	r0, 80067fe <_dtoa_r+0xee>
 80067e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067e6:	2301      	movs	r3, #1
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8568 	beq.w	80072c2 <_dtoa_r+0xbb2>
 80067f2:	4b86      	ldr	r3, [pc, #536]	; (8006a0c <_dtoa_r+0x2fc>)
 80067f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	e7da      	b.n	80067b4 <_dtoa_r+0xa4>
 80067fe:	aa10      	add	r2, sp, #64	; 0x40
 8006800:	a911      	add	r1, sp, #68	; 0x44
 8006802:	4620      	mov	r0, r4
 8006804:	eeb0 0a48 	vmov.f32	s0, s16
 8006808:	eef0 0a68 	vmov.f32	s1, s17
 800680c:	f001 fa4e 	bl	8007cac <__d2b>
 8006810:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006814:	4682      	mov	sl, r0
 8006816:	2d00      	cmp	r5, #0
 8006818:	d07f      	beq.n	800691a <_dtoa_r+0x20a>
 800681a:	ee18 3a90 	vmov	r3, s17
 800681e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006822:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006826:	ec51 0b18 	vmov	r0, r1, d8
 800682a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800682e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006832:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006836:	4619      	mov	r1, r3
 8006838:	2200      	movs	r2, #0
 800683a:	4b75      	ldr	r3, [pc, #468]	; (8006a10 <_dtoa_r+0x300>)
 800683c:	f7f9 fd24 	bl	8000288 <__aeabi_dsub>
 8006840:	a367      	add	r3, pc, #412	; (adr r3, 80069e0 <_dtoa_r+0x2d0>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f7f9 fed7 	bl	80005f8 <__aeabi_dmul>
 800684a:	a367      	add	r3, pc, #412	; (adr r3, 80069e8 <_dtoa_r+0x2d8>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f7f9 fd1c 	bl	800028c <__adddf3>
 8006854:	4606      	mov	r6, r0
 8006856:	4628      	mov	r0, r5
 8006858:	460f      	mov	r7, r1
 800685a:	f7f9 fe63 	bl	8000524 <__aeabi_i2d>
 800685e:	a364      	add	r3, pc, #400	; (adr r3, 80069f0 <_dtoa_r+0x2e0>)
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	f7f9 fec8 	bl	80005f8 <__aeabi_dmul>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4630      	mov	r0, r6
 800686e:	4639      	mov	r1, r7
 8006870:	f7f9 fd0c 	bl	800028c <__adddf3>
 8006874:	4606      	mov	r6, r0
 8006876:	460f      	mov	r7, r1
 8006878:	f7fa f96e 	bl	8000b58 <__aeabi_d2iz>
 800687c:	2200      	movs	r2, #0
 800687e:	4683      	mov	fp, r0
 8006880:	2300      	movs	r3, #0
 8006882:	4630      	mov	r0, r6
 8006884:	4639      	mov	r1, r7
 8006886:	f7fa f929 	bl	8000adc <__aeabi_dcmplt>
 800688a:	b148      	cbz	r0, 80068a0 <_dtoa_r+0x190>
 800688c:	4658      	mov	r0, fp
 800688e:	f7f9 fe49 	bl	8000524 <__aeabi_i2d>
 8006892:	4632      	mov	r2, r6
 8006894:	463b      	mov	r3, r7
 8006896:	f7fa f917 	bl	8000ac8 <__aeabi_dcmpeq>
 800689a:	b908      	cbnz	r0, 80068a0 <_dtoa_r+0x190>
 800689c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068a0:	f1bb 0f16 	cmp.w	fp, #22
 80068a4:	d857      	bhi.n	8006956 <_dtoa_r+0x246>
 80068a6:	4b5b      	ldr	r3, [pc, #364]	; (8006a14 <_dtoa_r+0x304>)
 80068a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	ec51 0b18 	vmov	r0, r1, d8
 80068b4:	f7fa f912 	bl	8000adc <__aeabi_dcmplt>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d04e      	beq.n	800695a <_dtoa_r+0x24a>
 80068bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068c0:	2300      	movs	r3, #0
 80068c2:	930c      	str	r3, [sp, #48]	; 0x30
 80068c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068c6:	1b5b      	subs	r3, r3, r5
 80068c8:	1e5a      	subs	r2, r3, #1
 80068ca:	bf45      	ittet	mi
 80068cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80068d0:	9305      	strmi	r3, [sp, #20]
 80068d2:	2300      	movpl	r3, #0
 80068d4:	2300      	movmi	r3, #0
 80068d6:	9206      	str	r2, [sp, #24]
 80068d8:	bf54      	ite	pl
 80068da:	9305      	strpl	r3, [sp, #20]
 80068dc:	9306      	strmi	r3, [sp, #24]
 80068de:	f1bb 0f00 	cmp.w	fp, #0
 80068e2:	db3c      	blt.n	800695e <_dtoa_r+0x24e>
 80068e4:	9b06      	ldr	r3, [sp, #24]
 80068e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80068ea:	445b      	add	r3, fp
 80068ec:	9306      	str	r3, [sp, #24]
 80068ee:	2300      	movs	r3, #0
 80068f0:	9308      	str	r3, [sp, #32]
 80068f2:	9b07      	ldr	r3, [sp, #28]
 80068f4:	2b09      	cmp	r3, #9
 80068f6:	d868      	bhi.n	80069ca <_dtoa_r+0x2ba>
 80068f8:	2b05      	cmp	r3, #5
 80068fa:	bfc4      	itt	gt
 80068fc:	3b04      	subgt	r3, #4
 80068fe:	9307      	strgt	r3, [sp, #28]
 8006900:	9b07      	ldr	r3, [sp, #28]
 8006902:	f1a3 0302 	sub.w	r3, r3, #2
 8006906:	bfcc      	ite	gt
 8006908:	2500      	movgt	r5, #0
 800690a:	2501      	movle	r5, #1
 800690c:	2b03      	cmp	r3, #3
 800690e:	f200 8085 	bhi.w	8006a1c <_dtoa_r+0x30c>
 8006912:	e8df f003 	tbb	[pc, r3]
 8006916:	3b2e      	.short	0x3b2e
 8006918:	5839      	.short	0x5839
 800691a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800691e:	441d      	add	r5, r3
 8006920:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006924:	2b20      	cmp	r3, #32
 8006926:	bfc1      	itttt	gt
 8006928:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800692c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006930:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006934:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006938:	bfd6      	itet	le
 800693a:	f1c3 0320 	rsble	r3, r3, #32
 800693e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006942:	fa06 f003 	lslle.w	r0, r6, r3
 8006946:	f7f9 fddd 	bl	8000504 <__aeabi_ui2d>
 800694a:	2201      	movs	r2, #1
 800694c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006950:	3d01      	subs	r5, #1
 8006952:	920e      	str	r2, [sp, #56]	; 0x38
 8006954:	e76f      	b.n	8006836 <_dtoa_r+0x126>
 8006956:	2301      	movs	r3, #1
 8006958:	e7b3      	b.n	80068c2 <_dtoa_r+0x1b2>
 800695a:	900c      	str	r0, [sp, #48]	; 0x30
 800695c:	e7b2      	b.n	80068c4 <_dtoa_r+0x1b4>
 800695e:	9b05      	ldr	r3, [sp, #20]
 8006960:	eba3 030b 	sub.w	r3, r3, fp
 8006964:	9305      	str	r3, [sp, #20]
 8006966:	f1cb 0300 	rsb	r3, fp, #0
 800696a:	9308      	str	r3, [sp, #32]
 800696c:	2300      	movs	r3, #0
 800696e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006970:	e7bf      	b.n	80068f2 <_dtoa_r+0x1e2>
 8006972:	2300      	movs	r3, #0
 8006974:	9309      	str	r3, [sp, #36]	; 0x24
 8006976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006978:	2b00      	cmp	r3, #0
 800697a:	dc52      	bgt.n	8006a22 <_dtoa_r+0x312>
 800697c:	2301      	movs	r3, #1
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	461a      	mov	r2, r3
 8006984:	920a      	str	r2, [sp, #40]	; 0x28
 8006986:	e00b      	b.n	80069a0 <_dtoa_r+0x290>
 8006988:	2301      	movs	r3, #1
 800698a:	e7f3      	b.n	8006974 <_dtoa_r+0x264>
 800698c:	2300      	movs	r3, #0
 800698e:	9309      	str	r3, [sp, #36]	; 0x24
 8006990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006992:	445b      	add	r3, fp
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	3301      	adds	r3, #1
 8006998:	2b01      	cmp	r3, #1
 800699a:	9304      	str	r3, [sp, #16]
 800699c:	bfb8      	it	lt
 800699e:	2301      	movlt	r3, #1
 80069a0:	69e0      	ldr	r0, [r4, #28]
 80069a2:	2100      	movs	r1, #0
 80069a4:	2204      	movs	r2, #4
 80069a6:	f102 0614 	add.w	r6, r2, #20
 80069aa:	429e      	cmp	r6, r3
 80069ac:	d93d      	bls.n	8006a2a <_dtoa_r+0x31a>
 80069ae:	6041      	str	r1, [r0, #4]
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 fd9f 	bl	80074f4 <_Balloc>
 80069b6:	9000      	str	r0, [sp, #0]
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d139      	bne.n	8006a30 <_dtoa_r+0x320>
 80069bc:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <_dtoa_r+0x308>)
 80069be:	4602      	mov	r2, r0
 80069c0:	f240 11af 	movw	r1, #431	; 0x1af
 80069c4:	e6bd      	b.n	8006742 <_dtoa_r+0x32>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e7e1      	b.n	800698e <_dtoa_r+0x27e>
 80069ca:	2501      	movs	r5, #1
 80069cc:	2300      	movs	r3, #0
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	9509      	str	r5, [sp, #36]	; 0x24
 80069d2:	f04f 33ff 	mov.w	r3, #4294967295
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	2200      	movs	r2, #0
 80069dc:	2312      	movs	r3, #18
 80069de:	e7d1      	b.n	8006984 <_dtoa_r+0x274>
 80069e0:	636f4361 	.word	0x636f4361
 80069e4:	3fd287a7 	.word	0x3fd287a7
 80069e8:	8b60c8b3 	.word	0x8b60c8b3
 80069ec:	3fc68a28 	.word	0x3fc68a28
 80069f0:	509f79fb 	.word	0x509f79fb
 80069f4:	3fd34413 	.word	0x3fd34413
 80069f8:	0800a172 	.word	0x0800a172
 80069fc:	0800a189 	.word	0x0800a189
 8006a00:	7ff00000 	.word	0x7ff00000
 8006a04:	0800a16e 	.word	0x0800a16e
 8006a08:	0800a165 	.word	0x0800a165
 8006a0c:	0800a13d 	.word	0x0800a13d
 8006a10:	3ff80000 	.word	0x3ff80000
 8006a14:	0800a278 	.word	0x0800a278
 8006a18:	0800a1e1 	.word	0x0800a1e1
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a20:	e7d7      	b.n	80069d2 <_dtoa_r+0x2c2>
 8006a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	9304      	str	r3, [sp, #16]
 8006a28:	e7ba      	b.n	80069a0 <_dtoa_r+0x290>
 8006a2a:	3101      	adds	r1, #1
 8006a2c:	0052      	lsls	r2, r2, #1
 8006a2e:	e7ba      	b.n	80069a6 <_dtoa_r+0x296>
 8006a30:	69e3      	ldr	r3, [r4, #28]
 8006a32:	9a00      	ldr	r2, [sp, #0]
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	2b0e      	cmp	r3, #14
 8006a3a:	f200 80a8 	bhi.w	8006b8e <_dtoa_r+0x47e>
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	f000 80a5 	beq.w	8006b8e <_dtoa_r+0x47e>
 8006a44:	f1bb 0f00 	cmp.w	fp, #0
 8006a48:	dd38      	ble.n	8006abc <_dtoa_r+0x3ac>
 8006a4a:	4bc0      	ldr	r3, [pc, #768]	; (8006d4c <_dtoa_r+0x63c>)
 8006a4c:	f00b 020f 	and.w	r2, fp, #15
 8006a50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006a58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006a60:	d019      	beq.n	8006a96 <_dtoa_r+0x386>
 8006a62:	4bbb      	ldr	r3, [pc, #748]	; (8006d50 <_dtoa_r+0x640>)
 8006a64:	ec51 0b18 	vmov	r0, r1, d8
 8006a68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a6c:	f7f9 feee 	bl	800084c <__aeabi_ddiv>
 8006a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a74:	f008 080f 	and.w	r8, r8, #15
 8006a78:	2503      	movs	r5, #3
 8006a7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006d50 <_dtoa_r+0x640>
 8006a7e:	f1b8 0f00 	cmp.w	r8, #0
 8006a82:	d10a      	bne.n	8006a9a <_dtoa_r+0x38a>
 8006a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a88:	4632      	mov	r2, r6
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	f7f9 fede 	bl	800084c <__aeabi_ddiv>
 8006a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a94:	e02b      	b.n	8006aee <_dtoa_r+0x3de>
 8006a96:	2502      	movs	r5, #2
 8006a98:	e7ef      	b.n	8006a7a <_dtoa_r+0x36a>
 8006a9a:	f018 0f01 	tst.w	r8, #1
 8006a9e:	d008      	beq.n	8006ab2 <_dtoa_r+0x3a2>
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006aa8:	f7f9 fda6 	bl	80005f8 <__aeabi_dmul>
 8006aac:	3501      	adds	r5, #1
 8006aae:	4606      	mov	r6, r0
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ab6:	f109 0908 	add.w	r9, r9, #8
 8006aba:	e7e0      	b.n	8006a7e <_dtoa_r+0x36e>
 8006abc:	f000 809f 	beq.w	8006bfe <_dtoa_r+0x4ee>
 8006ac0:	f1cb 0600 	rsb	r6, fp, #0
 8006ac4:	4ba1      	ldr	r3, [pc, #644]	; (8006d4c <_dtoa_r+0x63c>)
 8006ac6:	4fa2      	ldr	r7, [pc, #648]	; (8006d50 <_dtoa_r+0x640>)
 8006ac8:	f006 020f 	and.w	r2, r6, #15
 8006acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	ec51 0b18 	vmov	r0, r1, d8
 8006ad8:	f7f9 fd8e 	bl	80005f8 <__aeabi_dmul>
 8006adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae0:	1136      	asrs	r6, r6, #4
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2502      	movs	r5, #2
 8006ae6:	2e00      	cmp	r6, #0
 8006ae8:	d17e      	bne.n	8006be8 <_dtoa_r+0x4d8>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1d0      	bne.n	8006a90 <_dtoa_r+0x380>
 8006aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006af0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8084 	beq.w	8006c02 <_dtoa_r+0x4f2>
 8006afa:	4b96      	ldr	r3, [pc, #600]	; (8006d54 <_dtoa_r+0x644>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	4640      	mov	r0, r8
 8006b00:	4649      	mov	r1, r9
 8006b02:	f7f9 ffeb 	bl	8000adc <__aeabi_dcmplt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d07b      	beq.n	8006c02 <_dtoa_r+0x4f2>
 8006b0a:	9b04      	ldr	r3, [sp, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d078      	beq.n	8006c02 <_dtoa_r+0x4f2>
 8006b10:	9b01      	ldr	r3, [sp, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	dd39      	ble.n	8006b8a <_dtoa_r+0x47a>
 8006b16:	4b90      	ldr	r3, [pc, #576]	; (8006d58 <_dtoa_r+0x648>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	f7f9 fd6b 	bl	80005f8 <__aeabi_dmul>
 8006b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b26:	9e01      	ldr	r6, [sp, #4]
 8006b28:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b32:	4628      	mov	r0, r5
 8006b34:	f7f9 fcf6 	bl	8000524 <__aeabi_i2d>
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	4b86      	ldr	r3, [pc, #536]	; (8006d5c <_dtoa_r+0x64c>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	f7f9 fba2 	bl	800028c <__adddf3>
 8006b48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b50:	9303      	str	r3, [sp, #12]
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d158      	bne.n	8006c08 <_dtoa_r+0x4f8>
 8006b56:	4b82      	ldr	r3, [pc, #520]	; (8006d60 <_dtoa_r+0x650>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fb93 	bl	8000288 <__aeabi_dsub>
 8006b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b66:	4680      	mov	r8, r0
 8006b68:	4689      	mov	r9, r1
 8006b6a:	f7f9 ffd5 	bl	8000b18 <__aeabi_dcmpgt>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f040 8296 	bne.w	80070a0 <_dtoa_r+0x990>
 8006b74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006b78:	4640      	mov	r0, r8
 8006b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b7e:	4649      	mov	r1, r9
 8006b80:	f7f9 ffac 	bl	8000adc <__aeabi_dcmplt>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f040 8289 	bne.w	800709c <_dtoa_r+0x98c>
 8006b8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f2c0 814e 	blt.w	8006e32 <_dtoa_r+0x722>
 8006b96:	f1bb 0f0e 	cmp.w	fp, #14
 8006b9a:	f300 814a 	bgt.w	8006e32 <_dtoa_r+0x722>
 8006b9e:	4b6b      	ldr	r3, [pc, #428]	; (8006d4c <_dtoa_r+0x63c>)
 8006ba0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f280 80dc 	bge.w	8006d68 <_dtoa_r+0x658>
 8006bb0:	9b04      	ldr	r3, [sp, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f300 80d8 	bgt.w	8006d68 <_dtoa_r+0x658>
 8006bb8:	f040 826f 	bne.w	800709a <_dtoa_r+0x98a>
 8006bbc:	4b68      	ldr	r3, [pc, #416]	; (8006d60 <_dtoa_r+0x650>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	f7f9 fd18 	bl	80005f8 <__aeabi_dmul>
 8006bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bcc:	f7f9 ff9a 	bl	8000b04 <__aeabi_dcmpge>
 8006bd0:	9e04      	ldr	r6, [sp, #16]
 8006bd2:	4637      	mov	r7, r6
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f040 8245 	bne.w	8007064 <_dtoa_r+0x954>
 8006bda:	9d00      	ldr	r5, [sp, #0]
 8006bdc:	2331      	movs	r3, #49	; 0x31
 8006bde:	f805 3b01 	strb.w	r3, [r5], #1
 8006be2:	f10b 0b01 	add.w	fp, fp, #1
 8006be6:	e241      	b.n	800706c <_dtoa_r+0x95c>
 8006be8:	07f2      	lsls	r2, r6, #31
 8006bea:	d505      	bpl.n	8006bf8 <_dtoa_r+0x4e8>
 8006bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf0:	f7f9 fd02 	bl	80005f8 <__aeabi_dmul>
 8006bf4:	3501      	adds	r5, #1
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	1076      	asrs	r6, r6, #1
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	e773      	b.n	8006ae6 <_dtoa_r+0x3d6>
 8006bfe:	2502      	movs	r5, #2
 8006c00:	e775      	b.n	8006aee <_dtoa_r+0x3de>
 8006c02:	9e04      	ldr	r6, [sp, #16]
 8006c04:	465f      	mov	r7, fp
 8006c06:	e792      	b.n	8006b2e <_dtoa_r+0x41e>
 8006c08:	9900      	ldr	r1, [sp, #0]
 8006c0a:	4b50      	ldr	r3, [pc, #320]	; (8006d4c <_dtoa_r+0x63c>)
 8006c0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c10:	4431      	add	r1, r6
 8006c12:	9102      	str	r1, [sp, #8]
 8006c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c16:	eeb0 9a47 	vmov.f32	s18, s14
 8006c1a:	eef0 9a67 	vmov.f32	s19, s15
 8006c1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c26:	2900      	cmp	r1, #0
 8006c28:	d044      	beq.n	8006cb4 <_dtoa_r+0x5a4>
 8006c2a:	494e      	ldr	r1, [pc, #312]	; (8006d64 <_dtoa_r+0x654>)
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	f7f9 fe0d 	bl	800084c <__aeabi_ddiv>
 8006c32:	ec53 2b19 	vmov	r2, r3, d9
 8006c36:	f7f9 fb27 	bl	8000288 <__aeabi_dsub>
 8006c3a:	9d00      	ldr	r5, [sp, #0]
 8006c3c:	ec41 0b19 	vmov	d9, r0, r1
 8006c40:	4649      	mov	r1, r9
 8006c42:	4640      	mov	r0, r8
 8006c44:	f7f9 ff88 	bl	8000b58 <__aeabi_d2iz>
 8006c48:	4606      	mov	r6, r0
 8006c4a:	f7f9 fc6b 	bl	8000524 <__aeabi_i2d>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f7f9 fb17 	bl	8000288 <__aeabi_dsub>
 8006c5a:	3630      	adds	r6, #48	; 0x30
 8006c5c:	f805 6b01 	strb.w	r6, [r5], #1
 8006c60:	ec53 2b19 	vmov	r2, r3, d9
 8006c64:	4680      	mov	r8, r0
 8006c66:	4689      	mov	r9, r1
 8006c68:	f7f9 ff38 	bl	8000adc <__aeabi_dcmplt>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d164      	bne.n	8006d3a <_dtoa_r+0x62a>
 8006c70:	4642      	mov	r2, r8
 8006c72:	464b      	mov	r3, r9
 8006c74:	4937      	ldr	r1, [pc, #220]	; (8006d54 <_dtoa_r+0x644>)
 8006c76:	2000      	movs	r0, #0
 8006c78:	f7f9 fb06 	bl	8000288 <__aeabi_dsub>
 8006c7c:	ec53 2b19 	vmov	r2, r3, d9
 8006c80:	f7f9 ff2c 	bl	8000adc <__aeabi_dcmplt>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	f040 80b6 	bne.w	8006df6 <_dtoa_r+0x6e6>
 8006c8a:	9b02      	ldr	r3, [sp, #8]
 8006c8c:	429d      	cmp	r5, r3
 8006c8e:	f43f af7c 	beq.w	8006b8a <_dtoa_r+0x47a>
 8006c92:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <_dtoa_r+0x648>)
 8006c94:	ec51 0b19 	vmov	r0, r1, d9
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f7f9 fcad 	bl	80005f8 <__aeabi_dmul>
 8006c9e:	4b2e      	ldr	r3, [pc, #184]	; (8006d58 <_dtoa_r+0x648>)
 8006ca0:	ec41 0b19 	vmov	d9, r0, r1
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	4649      	mov	r1, r9
 8006caa:	f7f9 fca5 	bl	80005f8 <__aeabi_dmul>
 8006cae:	4680      	mov	r8, r0
 8006cb0:	4689      	mov	r9, r1
 8006cb2:	e7c5      	b.n	8006c40 <_dtoa_r+0x530>
 8006cb4:	ec51 0b17 	vmov	r0, r1, d7
 8006cb8:	f7f9 fc9e 	bl	80005f8 <__aeabi_dmul>
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	9d00      	ldr	r5, [sp, #0]
 8006cc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cc2:	ec41 0b19 	vmov	d9, r0, r1
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	4640      	mov	r0, r8
 8006cca:	f7f9 ff45 	bl	8000b58 <__aeabi_d2iz>
 8006cce:	4606      	mov	r6, r0
 8006cd0:	f7f9 fc28 	bl	8000524 <__aeabi_i2d>
 8006cd4:	3630      	adds	r6, #48	; 0x30
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	f7f9 fad3 	bl	8000288 <__aeabi_dsub>
 8006ce2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ce6:	9b02      	ldr	r3, [sp, #8]
 8006ce8:	429d      	cmp	r5, r3
 8006cea:	4680      	mov	r8, r0
 8006cec:	4689      	mov	r9, r1
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	d124      	bne.n	8006d3e <_dtoa_r+0x62e>
 8006cf4:	4b1b      	ldr	r3, [pc, #108]	; (8006d64 <_dtoa_r+0x654>)
 8006cf6:	ec51 0b19 	vmov	r0, r1, d9
 8006cfa:	f7f9 fac7 	bl	800028c <__adddf3>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	f7f9 ff07 	bl	8000b18 <__aeabi_dcmpgt>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d173      	bne.n	8006df6 <_dtoa_r+0x6e6>
 8006d0e:	ec53 2b19 	vmov	r2, r3, d9
 8006d12:	4914      	ldr	r1, [pc, #80]	; (8006d64 <_dtoa_r+0x654>)
 8006d14:	2000      	movs	r0, #0
 8006d16:	f7f9 fab7 	bl	8000288 <__aeabi_dsub>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4640      	mov	r0, r8
 8006d20:	4649      	mov	r1, r9
 8006d22:	f7f9 fedb 	bl	8000adc <__aeabi_dcmplt>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f43f af2f 	beq.w	8006b8a <_dtoa_r+0x47a>
 8006d2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d2e:	1e6b      	subs	r3, r5, #1
 8006d30:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d36:	2b30      	cmp	r3, #48	; 0x30
 8006d38:	d0f8      	beq.n	8006d2c <_dtoa_r+0x61c>
 8006d3a:	46bb      	mov	fp, r7
 8006d3c:	e04a      	b.n	8006dd4 <_dtoa_r+0x6c4>
 8006d3e:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <_dtoa_r+0x648>)
 8006d40:	f7f9 fc5a 	bl	80005f8 <__aeabi_dmul>
 8006d44:	4680      	mov	r8, r0
 8006d46:	4689      	mov	r9, r1
 8006d48:	e7bd      	b.n	8006cc6 <_dtoa_r+0x5b6>
 8006d4a:	bf00      	nop
 8006d4c:	0800a278 	.word	0x0800a278
 8006d50:	0800a250 	.word	0x0800a250
 8006d54:	3ff00000 	.word	0x3ff00000
 8006d58:	40240000 	.word	0x40240000
 8006d5c:	401c0000 	.word	0x401c0000
 8006d60:	40140000 	.word	0x40140000
 8006d64:	3fe00000 	.word	0x3fe00000
 8006d68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d6c:	9d00      	ldr	r5, [sp, #0]
 8006d6e:	4642      	mov	r2, r8
 8006d70:	464b      	mov	r3, r9
 8006d72:	4630      	mov	r0, r6
 8006d74:	4639      	mov	r1, r7
 8006d76:	f7f9 fd69 	bl	800084c <__aeabi_ddiv>
 8006d7a:	f7f9 feed 	bl	8000b58 <__aeabi_d2iz>
 8006d7e:	9001      	str	r0, [sp, #4]
 8006d80:	f7f9 fbd0 	bl	8000524 <__aeabi_i2d>
 8006d84:	4642      	mov	r2, r8
 8006d86:	464b      	mov	r3, r9
 8006d88:	f7f9 fc36 	bl	80005f8 <__aeabi_dmul>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4630      	mov	r0, r6
 8006d92:	4639      	mov	r1, r7
 8006d94:	f7f9 fa78 	bl	8000288 <__aeabi_dsub>
 8006d98:	9e01      	ldr	r6, [sp, #4]
 8006d9a:	9f04      	ldr	r7, [sp, #16]
 8006d9c:	3630      	adds	r6, #48	; 0x30
 8006d9e:	f805 6b01 	strb.w	r6, [r5], #1
 8006da2:	9e00      	ldr	r6, [sp, #0]
 8006da4:	1bae      	subs	r6, r5, r6
 8006da6:	42b7      	cmp	r7, r6
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	d134      	bne.n	8006e18 <_dtoa_r+0x708>
 8006dae:	f7f9 fa6d 	bl	800028c <__adddf3>
 8006db2:	4642      	mov	r2, r8
 8006db4:	464b      	mov	r3, r9
 8006db6:	4606      	mov	r6, r0
 8006db8:	460f      	mov	r7, r1
 8006dba:	f7f9 fead 	bl	8000b18 <__aeabi_dcmpgt>
 8006dbe:	b9c8      	cbnz	r0, 8006df4 <_dtoa_r+0x6e4>
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	f7f9 fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dcc:	b110      	cbz	r0, 8006dd4 <_dtoa_r+0x6c4>
 8006dce:	9b01      	ldr	r3, [sp, #4]
 8006dd0:	07db      	lsls	r3, r3, #31
 8006dd2:	d40f      	bmi.n	8006df4 <_dtoa_r+0x6e4>
 8006dd4:	4651      	mov	r1, sl
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 fbcc 	bl	8007574 <_Bfree>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006de0:	702b      	strb	r3, [r5, #0]
 8006de2:	f10b 0301 	add.w	r3, fp, #1
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f43f ace2 	beq.w	80067b4 <_dtoa_r+0xa4>
 8006df0:	601d      	str	r5, [r3, #0]
 8006df2:	e4df      	b.n	80067b4 <_dtoa_r+0xa4>
 8006df4:	465f      	mov	r7, fp
 8006df6:	462b      	mov	r3, r5
 8006df8:	461d      	mov	r5, r3
 8006dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dfe:	2a39      	cmp	r2, #57	; 0x39
 8006e00:	d106      	bne.n	8006e10 <_dtoa_r+0x700>
 8006e02:	9a00      	ldr	r2, [sp, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d1f7      	bne.n	8006df8 <_dtoa_r+0x6e8>
 8006e08:	9900      	ldr	r1, [sp, #0]
 8006e0a:	2230      	movs	r2, #48	; 0x30
 8006e0c:	3701      	adds	r7, #1
 8006e0e:	700a      	strb	r2, [r1, #0]
 8006e10:	781a      	ldrb	r2, [r3, #0]
 8006e12:	3201      	adds	r2, #1
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	e790      	b.n	8006d3a <_dtoa_r+0x62a>
 8006e18:	4ba3      	ldr	r3, [pc, #652]	; (80070a8 <_dtoa_r+0x998>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f7f9 fbec 	bl	80005f8 <__aeabi_dmul>
 8006e20:	2200      	movs	r2, #0
 8006e22:	2300      	movs	r3, #0
 8006e24:	4606      	mov	r6, r0
 8006e26:	460f      	mov	r7, r1
 8006e28:	f7f9 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d09e      	beq.n	8006d6e <_dtoa_r+0x65e>
 8006e30:	e7d0      	b.n	8006dd4 <_dtoa_r+0x6c4>
 8006e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e34:	2a00      	cmp	r2, #0
 8006e36:	f000 80ca 	beq.w	8006fce <_dtoa_r+0x8be>
 8006e3a:	9a07      	ldr	r2, [sp, #28]
 8006e3c:	2a01      	cmp	r2, #1
 8006e3e:	f300 80ad 	bgt.w	8006f9c <_dtoa_r+0x88c>
 8006e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	f000 80a5 	beq.w	8006f94 <_dtoa_r+0x884>
 8006e4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e4e:	9e08      	ldr	r6, [sp, #32]
 8006e50:	9d05      	ldr	r5, [sp, #20]
 8006e52:	9a05      	ldr	r2, [sp, #20]
 8006e54:	441a      	add	r2, r3
 8006e56:	9205      	str	r2, [sp, #20]
 8006e58:	9a06      	ldr	r2, [sp, #24]
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	441a      	add	r2, r3
 8006e5e:	4620      	mov	r0, r4
 8006e60:	9206      	str	r2, [sp, #24]
 8006e62:	f000 fc87 	bl	8007774 <__i2b>
 8006e66:	4607      	mov	r7, r0
 8006e68:	b165      	cbz	r5, 8006e84 <_dtoa_r+0x774>
 8006e6a:	9b06      	ldr	r3, [sp, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dd09      	ble.n	8006e84 <_dtoa_r+0x774>
 8006e70:	42ab      	cmp	r3, r5
 8006e72:	9a05      	ldr	r2, [sp, #20]
 8006e74:	bfa8      	it	ge
 8006e76:	462b      	movge	r3, r5
 8006e78:	1ad2      	subs	r2, r2, r3
 8006e7a:	9205      	str	r2, [sp, #20]
 8006e7c:	9a06      	ldr	r2, [sp, #24]
 8006e7e:	1aed      	subs	r5, r5, r3
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	9306      	str	r3, [sp, #24]
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	b1f3      	cbz	r3, 8006ec6 <_dtoa_r+0x7b6>
 8006e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 80a3 	beq.w	8006fd6 <_dtoa_r+0x8c6>
 8006e90:	2e00      	cmp	r6, #0
 8006e92:	dd10      	ble.n	8006eb6 <_dtoa_r+0x7a6>
 8006e94:	4639      	mov	r1, r7
 8006e96:	4632      	mov	r2, r6
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 fd2b 	bl	80078f4 <__pow5mult>
 8006e9e:	4652      	mov	r2, sl
 8006ea0:	4601      	mov	r1, r0
 8006ea2:	4607      	mov	r7, r0
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f000 fc7b 	bl	80077a0 <__multiply>
 8006eaa:	4651      	mov	r1, sl
 8006eac:	4680      	mov	r8, r0
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 fb60 	bl	8007574 <_Bfree>
 8006eb4:	46c2      	mov	sl, r8
 8006eb6:	9b08      	ldr	r3, [sp, #32]
 8006eb8:	1b9a      	subs	r2, r3, r6
 8006eba:	d004      	beq.n	8006ec6 <_dtoa_r+0x7b6>
 8006ebc:	4651      	mov	r1, sl
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f000 fd18 	bl	80078f4 <__pow5mult>
 8006ec4:	4682      	mov	sl, r0
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fc53 	bl	8007774 <__i2b>
 8006ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	f340 8081 	ble.w	8006fda <_dtoa_r+0x8ca>
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4601      	mov	r1, r0
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 fd09 	bl	80078f4 <__pow5mult>
 8006ee2:	9b07      	ldr	r3, [sp, #28]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	dd7a      	ble.n	8006fe0 <_dtoa_r+0x8d0>
 8006eea:	f04f 0800 	mov.w	r8, #0
 8006eee:	6933      	ldr	r3, [r6, #16]
 8006ef0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ef4:	6918      	ldr	r0, [r3, #16]
 8006ef6:	f000 fbef 	bl	80076d8 <__hi0bits>
 8006efa:	f1c0 0020 	rsb	r0, r0, #32
 8006efe:	9b06      	ldr	r3, [sp, #24]
 8006f00:	4418      	add	r0, r3
 8006f02:	f010 001f 	ands.w	r0, r0, #31
 8006f06:	f000 8094 	beq.w	8007032 <_dtoa_r+0x922>
 8006f0a:	f1c0 0320 	rsb	r3, r0, #32
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	f340 8085 	ble.w	800701e <_dtoa_r+0x90e>
 8006f14:	9b05      	ldr	r3, [sp, #20]
 8006f16:	f1c0 001c 	rsb	r0, r0, #28
 8006f1a:	4403      	add	r3, r0
 8006f1c:	9305      	str	r3, [sp, #20]
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	4403      	add	r3, r0
 8006f22:	4405      	add	r5, r0
 8006f24:	9306      	str	r3, [sp, #24]
 8006f26:	9b05      	ldr	r3, [sp, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	dd05      	ble.n	8006f38 <_dtoa_r+0x828>
 8006f2c:	4651      	mov	r1, sl
 8006f2e:	461a      	mov	r2, r3
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fd39 	bl	80079a8 <__lshift>
 8006f36:	4682      	mov	sl, r0
 8006f38:	9b06      	ldr	r3, [sp, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dd05      	ble.n	8006f4a <_dtoa_r+0x83a>
 8006f3e:	4631      	mov	r1, r6
 8006f40:	461a      	mov	r2, r3
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 fd30 	bl	80079a8 <__lshift>
 8006f48:	4606      	mov	r6, r0
 8006f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d072      	beq.n	8007036 <_dtoa_r+0x926>
 8006f50:	4631      	mov	r1, r6
 8006f52:	4650      	mov	r0, sl
 8006f54:	f000 fd94 	bl	8007a80 <__mcmp>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	da6c      	bge.n	8007036 <_dtoa_r+0x926>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4651      	mov	r1, sl
 8006f60:	220a      	movs	r2, #10
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 fb28 	bl	80075b8 <__multadd>
 8006f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f6e:	4682      	mov	sl, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 81b0 	beq.w	80072d6 <_dtoa_r+0xbc6>
 8006f76:	2300      	movs	r3, #0
 8006f78:	4639      	mov	r1, r7
 8006f7a:	220a      	movs	r2, #10
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 fb1b 	bl	80075b8 <__multadd>
 8006f82:	9b01      	ldr	r3, [sp, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	4607      	mov	r7, r0
 8006f88:	f300 8096 	bgt.w	80070b8 <_dtoa_r+0x9a8>
 8006f8c:	9b07      	ldr	r3, [sp, #28]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	dc59      	bgt.n	8007046 <_dtoa_r+0x936>
 8006f92:	e091      	b.n	80070b8 <_dtoa_r+0x9a8>
 8006f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f9a:	e758      	b.n	8006e4e <_dtoa_r+0x73e>
 8006f9c:	9b04      	ldr	r3, [sp, #16]
 8006f9e:	1e5e      	subs	r6, r3, #1
 8006fa0:	9b08      	ldr	r3, [sp, #32]
 8006fa2:	42b3      	cmp	r3, r6
 8006fa4:	bfbf      	itttt	lt
 8006fa6:	9b08      	ldrlt	r3, [sp, #32]
 8006fa8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006faa:	9608      	strlt	r6, [sp, #32]
 8006fac:	1af3      	sublt	r3, r6, r3
 8006fae:	bfb4      	ite	lt
 8006fb0:	18d2      	addlt	r2, r2, r3
 8006fb2:	1b9e      	subge	r6, r3, r6
 8006fb4:	9b04      	ldr	r3, [sp, #16]
 8006fb6:	bfbc      	itt	lt
 8006fb8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006fba:	2600      	movlt	r6, #0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfb7      	itett	lt
 8006fc0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006fc4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006fc8:	1a9d      	sublt	r5, r3, r2
 8006fca:	2300      	movlt	r3, #0
 8006fcc:	e741      	b.n	8006e52 <_dtoa_r+0x742>
 8006fce:	9e08      	ldr	r6, [sp, #32]
 8006fd0:	9d05      	ldr	r5, [sp, #20]
 8006fd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fd4:	e748      	b.n	8006e68 <_dtoa_r+0x758>
 8006fd6:	9a08      	ldr	r2, [sp, #32]
 8006fd8:	e770      	b.n	8006ebc <_dtoa_r+0x7ac>
 8006fda:	9b07      	ldr	r3, [sp, #28]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	dc19      	bgt.n	8007014 <_dtoa_r+0x904>
 8006fe0:	9b02      	ldr	r3, [sp, #8]
 8006fe2:	b9bb      	cbnz	r3, 8007014 <_dtoa_r+0x904>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fea:	b99b      	cbnz	r3, 8007014 <_dtoa_r+0x904>
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ff2:	0d1b      	lsrs	r3, r3, #20
 8006ff4:	051b      	lsls	r3, r3, #20
 8006ff6:	b183      	cbz	r3, 800701a <_dtoa_r+0x90a>
 8006ff8:	9b05      	ldr	r3, [sp, #20]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	9305      	str	r3, [sp, #20]
 8006ffe:	9b06      	ldr	r3, [sp, #24]
 8007000:	3301      	adds	r3, #1
 8007002:	9306      	str	r3, [sp, #24]
 8007004:	f04f 0801 	mov.w	r8, #1
 8007008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800700a:	2b00      	cmp	r3, #0
 800700c:	f47f af6f 	bne.w	8006eee <_dtoa_r+0x7de>
 8007010:	2001      	movs	r0, #1
 8007012:	e774      	b.n	8006efe <_dtoa_r+0x7ee>
 8007014:	f04f 0800 	mov.w	r8, #0
 8007018:	e7f6      	b.n	8007008 <_dtoa_r+0x8f8>
 800701a:	4698      	mov	r8, r3
 800701c:	e7f4      	b.n	8007008 <_dtoa_r+0x8f8>
 800701e:	d082      	beq.n	8006f26 <_dtoa_r+0x816>
 8007020:	9a05      	ldr	r2, [sp, #20]
 8007022:	331c      	adds	r3, #28
 8007024:	441a      	add	r2, r3
 8007026:	9205      	str	r2, [sp, #20]
 8007028:	9a06      	ldr	r2, [sp, #24]
 800702a:	441a      	add	r2, r3
 800702c:	441d      	add	r5, r3
 800702e:	9206      	str	r2, [sp, #24]
 8007030:	e779      	b.n	8006f26 <_dtoa_r+0x816>
 8007032:	4603      	mov	r3, r0
 8007034:	e7f4      	b.n	8007020 <_dtoa_r+0x910>
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	dc37      	bgt.n	80070ac <_dtoa_r+0x99c>
 800703c:	9b07      	ldr	r3, [sp, #28]
 800703e:	2b02      	cmp	r3, #2
 8007040:	dd34      	ble.n	80070ac <_dtoa_r+0x99c>
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	b963      	cbnz	r3, 8007064 <_dtoa_r+0x954>
 800704a:	4631      	mov	r1, r6
 800704c:	2205      	movs	r2, #5
 800704e:	4620      	mov	r0, r4
 8007050:	f000 fab2 	bl	80075b8 <__multadd>
 8007054:	4601      	mov	r1, r0
 8007056:	4606      	mov	r6, r0
 8007058:	4650      	mov	r0, sl
 800705a:	f000 fd11 	bl	8007a80 <__mcmp>
 800705e:	2800      	cmp	r0, #0
 8007060:	f73f adbb 	bgt.w	8006bda <_dtoa_r+0x4ca>
 8007064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007066:	9d00      	ldr	r5, [sp, #0]
 8007068:	ea6f 0b03 	mvn.w	fp, r3
 800706c:	f04f 0800 	mov.w	r8, #0
 8007070:	4631      	mov	r1, r6
 8007072:	4620      	mov	r0, r4
 8007074:	f000 fa7e 	bl	8007574 <_Bfree>
 8007078:	2f00      	cmp	r7, #0
 800707a:	f43f aeab 	beq.w	8006dd4 <_dtoa_r+0x6c4>
 800707e:	f1b8 0f00 	cmp.w	r8, #0
 8007082:	d005      	beq.n	8007090 <_dtoa_r+0x980>
 8007084:	45b8      	cmp	r8, r7
 8007086:	d003      	beq.n	8007090 <_dtoa_r+0x980>
 8007088:	4641      	mov	r1, r8
 800708a:	4620      	mov	r0, r4
 800708c:	f000 fa72 	bl	8007574 <_Bfree>
 8007090:	4639      	mov	r1, r7
 8007092:	4620      	mov	r0, r4
 8007094:	f000 fa6e 	bl	8007574 <_Bfree>
 8007098:	e69c      	b.n	8006dd4 <_dtoa_r+0x6c4>
 800709a:	2600      	movs	r6, #0
 800709c:	4637      	mov	r7, r6
 800709e:	e7e1      	b.n	8007064 <_dtoa_r+0x954>
 80070a0:	46bb      	mov	fp, r7
 80070a2:	4637      	mov	r7, r6
 80070a4:	e599      	b.n	8006bda <_dtoa_r+0x4ca>
 80070a6:	bf00      	nop
 80070a8:	40240000 	.word	0x40240000
 80070ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 80c8 	beq.w	8007244 <_dtoa_r+0xb34>
 80070b4:	9b04      	ldr	r3, [sp, #16]
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	2d00      	cmp	r5, #0
 80070ba:	dd05      	ble.n	80070c8 <_dtoa_r+0x9b8>
 80070bc:	4639      	mov	r1, r7
 80070be:	462a      	mov	r2, r5
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fc71 	bl	80079a8 <__lshift>
 80070c6:	4607      	mov	r7, r0
 80070c8:	f1b8 0f00 	cmp.w	r8, #0
 80070cc:	d05b      	beq.n	8007186 <_dtoa_r+0xa76>
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fa0f 	bl	80074f4 <_Balloc>
 80070d6:	4605      	mov	r5, r0
 80070d8:	b928      	cbnz	r0, 80070e6 <_dtoa_r+0x9d6>
 80070da:	4b83      	ldr	r3, [pc, #524]	; (80072e8 <_dtoa_r+0xbd8>)
 80070dc:	4602      	mov	r2, r0
 80070de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80070e2:	f7ff bb2e 	b.w	8006742 <_dtoa_r+0x32>
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	3202      	adds	r2, #2
 80070ea:	0092      	lsls	r2, r2, #2
 80070ec:	f107 010c 	add.w	r1, r7, #12
 80070f0:	300c      	adds	r0, #12
 80070f2:	f002 f95f 	bl	80093b4 <memcpy>
 80070f6:	2201      	movs	r2, #1
 80070f8:	4629      	mov	r1, r5
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 fc54 	bl	80079a8 <__lshift>
 8007100:	9b00      	ldr	r3, [sp, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	e9dd 2300 	ldrd	r2, r3, [sp]
 800710a:	4413      	add	r3, r2
 800710c:	9308      	str	r3, [sp, #32]
 800710e:	9b02      	ldr	r3, [sp, #8]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	46b8      	mov	r8, r7
 8007116:	9306      	str	r3, [sp, #24]
 8007118:	4607      	mov	r7, r0
 800711a:	9b04      	ldr	r3, [sp, #16]
 800711c:	4631      	mov	r1, r6
 800711e:	3b01      	subs	r3, #1
 8007120:	4650      	mov	r0, sl
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	f7ff fa6c 	bl	8006600 <quorem>
 8007128:	4641      	mov	r1, r8
 800712a:	9002      	str	r0, [sp, #8]
 800712c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007130:	4650      	mov	r0, sl
 8007132:	f000 fca5 	bl	8007a80 <__mcmp>
 8007136:	463a      	mov	r2, r7
 8007138:	9005      	str	r0, [sp, #20]
 800713a:	4631      	mov	r1, r6
 800713c:	4620      	mov	r0, r4
 800713e:	f000 fcbb 	bl	8007ab8 <__mdiff>
 8007142:	68c2      	ldr	r2, [r0, #12]
 8007144:	4605      	mov	r5, r0
 8007146:	bb02      	cbnz	r2, 800718a <_dtoa_r+0xa7a>
 8007148:	4601      	mov	r1, r0
 800714a:	4650      	mov	r0, sl
 800714c:	f000 fc98 	bl	8007a80 <__mcmp>
 8007150:	4602      	mov	r2, r0
 8007152:	4629      	mov	r1, r5
 8007154:	4620      	mov	r0, r4
 8007156:	9209      	str	r2, [sp, #36]	; 0x24
 8007158:	f000 fa0c 	bl	8007574 <_Bfree>
 800715c:	9b07      	ldr	r3, [sp, #28]
 800715e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007160:	9d04      	ldr	r5, [sp, #16]
 8007162:	ea43 0102 	orr.w	r1, r3, r2
 8007166:	9b06      	ldr	r3, [sp, #24]
 8007168:	4319      	orrs	r1, r3
 800716a:	d110      	bne.n	800718e <_dtoa_r+0xa7e>
 800716c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007170:	d029      	beq.n	80071c6 <_dtoa_r+0xab6>
 8007172:	9b05      	ldr	r3, [sp, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	dd02      	ble.n	800717e <_dtoa_r+0xa6e>
 8007178:	9b02      	ldr	r3, [sp, #8]
 800717a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	f883 9000 	strb.w	r9, [r3]
 8007184:	e774      	b.n	8007070 <_dtoa_r+0x960>
 8007186:	4638      	mov	r0, r7
 8007188:	e7ba      	b.n	8007100 <_dtoa_r+0x9f0>
 800718a:	2201      	movs	r2, #1
 800718c:	e7e1      	b.n	8007152 <_dtoa_r+0xa42>
 800718e:	9b05      	ldr	r3, [sp, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	db04      	blt.n	800719e <_dtoa_r+0xa8e>
 8007194:	9907      	ldr	r1, [sp, #28]
 8007196:	430b      	orrs	r3, r1
 8007198:	9906      	ldr	r1, [sp, #24]
 800719a:	430b      	orrs	r3, r1
 800719c:	d120      	bne.n	80071e0 <_dtoa_r+0xad0>
 800719e:	2a00      	cmp	r2, #0
 80071a0:	dded      	ble.n	800717e <_dtoa_r+0xa6e>
 80071a2:	4651      	mov	r1, sl
 80071a4:	2201      	movs	r2, #1
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 fbfe 	bl	80079a8 <__lshift>
 80071ac:	4631      	mov	r1, r6
 80071ae:	4682      	mov	sl, r0
 80071b0:	f000 fc66 	bl	8007a80 <__mcmp>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	dc03      	bgt.n	80071c0 <_dtoa_r+0xab0>
 80071b8:	d1e1      	bne.n	800717e <_dtoa_r+0xa6e>
 80071ba:	f019 0f01 	tst.w	r9, #1
 80071be:	d0de      	beq.n	800717e <_dtoa_r+0xa6e>
 80071c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071c4:	d1d8      	bne.n	8007178 <_dtoa_r+0xa68>
 80071c6:	9a01      	ldr	r2, [sp, #4]
 80071c8:	2339      	movs	r3, #57	; 0x39
 80071ca:	7013      	strb	r3, [r2, #0]
 80071cc:	462b      	mov	r3, r5
 80071ce:	461d      	mov	r5, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071d6:	2a39      	cmp	r2, #57	; 0x39
 80071d8:	d06c      	beq.n	80072b4 <_dtoa_r+0xba4>
 80071da:	3201      	adds	r2, #1
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e747      	b.n	8007070 <_dtoa_r+0x960>
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	dd07      	ble.n	80071f4 <_dtoa_r+0xae4>
 80071e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071e8:	d0ed      	beq.n	80071c6 <_dtoa_r+0xab6>
 80071ea:	9a01      	ldr	r2, [sp, #4]
 80071ec:	f109 0301 	add.w	r3, r9, #1
 80071f0:	7013      	strb	r3, [r2, #0]
 80071f2:	e73d      	b.n	8007070 <_dtoa_r+0x960>
 80071f4:	9b04      	ldr	r3, [sp, #16]
 80071f6:	9a08      	ldr	r2, [sp, #32]
 80071f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d043      	beq.n	8007288 <_dtoa_r+0xb78>
 8007200:	4651      	mov	r1, sl
 8007202:	2300      	movs	r3, #0
 8007204:	220a      	movs	r2, #10
 8007206:	4620      	mov	r0, r4
 8007208:	f000 f9d6 	bl	80075b8 <__multadd>
 800720c:	45b8      	cmp	r8, r7
 800720e:	4682      	mov	sl, r0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	f04f 020a 	mov.w	r2, #10
 8007218:	4641      	mov	r1, r8
 800721a:	4620      	mov	r0, r4
 800721c:	d107      	bne.n	800722e <_dtoa_r+0xb1e>
 800721e:	f000 f9cb 	bl	80075b8 <__multadd>
 8007222:	4680      	mov	r8, r0
 8007224:	4607      	mov	r7, r0
 8007226:	9b04      	ldr	r3, [sp, #16]
 8007228:	3301      	adds	r3, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	e775      	b.n	800711a <_dtoa_r+0xa0a>
 800722e:	f000 f9c3 	bl	80075b8 <__multadd>
 8007232:	4639      	mov	r1, r7
 8007234:	4680      	mov	r8, r0
 8007236:	2300      	movs	r3, #0
 8007238:	220a      	movs	r2, #10
 800723a:	4620      	mov	r0, r4
 800723c:	f000 f9bc 	bl	80075b8 <__multadd>
 8007240:	4607      	mov	r7, r0
 8007242:	e7f0      	b.n	8007226 <_dtoa_r+0xb16>
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	9d00      	ldr	r5, [sp, #0]
 800724a:	4631      	mov	r1, r6
 800724c:	4650      	mov	r0, sl
 800724e:	f7ff f9d7 	bl	8006600 <quorem>
 8007252:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007256:	9b00      	ldr	r3, [sp, #0]
 8007258:	f805 9b01 	strb.w	r9, [r5], #1
 800725c:	1aea      	subs	r2, r5, r3
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	4293      	cmp	r3, r2
 8007262:	dd07      	ble.n	8007274 <_dtoa_r+0xb64>
 8007264:	4651      	mov	r1, sl
 8007266:	2300      	movs	r3, #0
 8007268:	220a      	movs	r2, #10
 800726a:	4620      	mov	r0, r4
 800726c:	f000 f9a4 	bl	80075b8 <__multadd>
 8007270:	4682      	mov	sl, r0
 8007272:	e7ea      	b.n	800724a <_dtoa_r+0xb3a>
 8007274:	9b01      	ldr	r3, [sp, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bfc8      	it	gt
 800727a:	461d      	movgt	r5, r3
 800727c:	9b00      	ldr	r3, [sp, #0]
 800727e:	bfd8      	it	le
 8007280:	2501      	movle	r5, #1
 8007282:	441d      	add	r5, r3
 8007284:	f04f 0800 	mov.w	r8, #0
 8007288:	4651      	mov	r1, sl
 800728a:	2201      	movs	r2, #1
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fb8b 	bl	80079a8 <__lshift>
 8007292:	4631      	mov	r1, r6
 8007294:	4682      	mov	sl, r0
 8007296:	f000 fbf3 	bl	8007a80 <__mcmp>
 800729a:	2800      	cmp	r0, #0
 800729c:	dc96      	bgt.n	80071cc <_dtoa_r+0xabc>
 800729e:	d102      	bne.n	80072a6 <_dtoa_r+0xb96>
 80072a0:	f019 0f01 	tst.w	r9, #1
 80072a4:	d192      	bne.n	80071cc <_dtoa_r+0xabc>
 80072a6:	462b      	mov	r3, r5
 80072a8:	461d      	mov	r5, r3
 80072aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ae:	2a30      	cmp	r2, #48	; 0x30
 80072b0:	d0fa      	beq.n	80072a8 <_dtoa_r+0xb98>
 80072b2:	e6dd      	b.n	8007070 <_dtoa_r+0x960>
 80072b4:	9a00      	ldr	r2, [sp, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d189      	bne.n	80071ce <_dtoa_r+0xabe>
 80072ba:	f10b 0b01 	add.w	fp, fp, #1
 80072be:	2331      	movs	r3, #49	; 0x31
 80072c0:	e796      	b.n	80071f0 <_dtoa_r+0xae0>
 80072c2:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <_dtoa_r+0xbdc>)
 80072c4:	f7ff ba99 	b.w	80067fa <_dtoa_r+0xea>
 80072c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f47f aa6d 	bne.w	80067aa <_dtoa_r+0x9a>
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <_dtoa_r+0xbe0>)
 80072d2:	f7ff ba92 	b.w	80067fa <_dtoa_r+0xea>
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dcb5      	bgt.n	8007248 <_dtoa_r+0xb38>
 80072dc:	9b07      	ldr	r3, [sp, #28]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	f73f aeb1 	bgt.w	8007046 <_dtoa_r+0x936>
 80072e4:	e7b0      	b.n	8007248 <_dtoa_r+0xb38>
 80072e6:	bf00      	nop
 80072e8:	0800a1e1 	.word	0x0800a1e1
 80072ec:	0800a13c 	.word	0x0800a13c
 80072f0:	0800a165 	.word	0x0800a165

080072f4 <_free_r>:
 80072f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072f6:	2900      	cmp	r1, #0
 80072f8:	d044      	beq.n	8007384 <_free_r+0x90>
 80072fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072fe:	9001      	str	r0, [sp, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f1a1 0404 	sub.w	r4, r1, #4
 8007306:	bfb8      	it	lt
 8007308:	18e4      	addlt	r4, r4, r3
 800730a:	f000 f8e7 	bl	80074dc <__malloc_lock>
 800730e:	4a1e      	ldr	r2, [pc, #120]	; (8007388 <_free_r+0x94>)
 8007310:	9801      	ldr	r0, [sp, #4]
 8007312:	6813      	ldr	r3, [r2, #0]
 8007314:	b933      	cbnz	r3, 8007324 <_free_r+0x30>
 8007316:	6063      	str	r3, [r4, #4]
 8007318:	6014      	str	r4, [r2, #0]
 800731a:	b003      	add	sp, #12
 800731c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007320:	f000 b8e2 	b.w	80074e8 <__malloc_unlock>
 8007324:	42a3      	cmp	r3, r4
 8007326:	d908      	bls.n	800733a <_free_r+0x46>
 8007328:	6825      	ldr	r5, [r4, #0]
 800732a:	1961      	adds	r1, r4, r5
 800732c:	428b      	cmp	r3, r1
 800732e:	bf01      	itttt	eq
 8007330:	6819      	ldreq	r1, [r3, #0]
 8007332:	685b      	ldreq	r3, [r3, #4]
 8007334:	1949      	addeq	r1, r1, r5
 8007336:	6021      	streq	r1, [r4, #0]
 8007338:	e7ed      	b.n	8007316 <_free_r+0x22>
 800733a:	461a      	mov	r2, r3
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	b10b      	cbz	r3, 8007344 <_free_r+0x50>
 8007340:	42a3      	cmp	r3, r4
 8007342:	d9fa      	bls.n	800733a <_free_r+0x46>
 8007344:	6811      	ldr	r1, [r2, #0]
 8007346:	1855      	adds	r5, r2, r1
 8007348:	42a5      	cmp	r5, r4
 800734a:	d10b      	bne.n	8007364 <_free_r+0x70>
 800734c:	6824      	ldr	r4, [r4, #0]
 800734e:	4421      	add	r1, r4
 8007350:	1854      	adds	r4, r2, r1
 8007352:	42a3      	cmp	r3, r4
 8007354:	6011      	str	r1, [r2, #0]
 8007356:	d1e0      	bne.n	800731a <_free_r+0x26>
 8007358:	681c      	ldr	r4, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	6053      	str	r3, [r2, #4]
 800735e:	440c      	add	r4, r1
 8007360:	6014      	str	r4, [r2, #0]
 8007362:	e7da      	b.n	800731a <_free_r+0x26>
 8007364:	d902      	bls.n	800736c <_free_r+0x78>
 8007366:	230c      	movs	r3, #12
 8007368:	6003      	str	r3, [r0, #0]
 800736a:	e7d6      	b.n	800731a <_free_r+0x26>
 800736c:	6825      	ldr	r5, [r4, #0]
 800736e:	1961      	adds	r1, r4, r5
 8007370:	428b      	cmp	r3, r1
 8007372:	bf04      	itt	eq
 8007374:	6819      	ldreq	r1, [r3, #0]
 8007376:	685b      	ldreq	r3, [r3, #4]
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	bf04      	itt	eq
 800737c:	1949      	addeq	r1, r1, r5
 800737e:	6021      	streq	r1, [r4, #0]
 8007380:	6054      	str	r4, [r2, #4]
 8007382:	e7ca      	b.n	800731a <_free_r+0x26>
 8007384:	b003      	add	sp, #12
 8007386:	bd30      	pop	{r4, r5, pc}
 8007388:	20000488 	.word	0x20000488

0800738c <malloc>:
 800738c:	4b02      	ldr	r3, [pc, #8]	; (8007398 <malloc+0xc>)
 800738e:	4601      	mov	r1, r0
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	f000 b823 	b.w	80073dc <_malloc_r>
 8007396:	bf00      	nop
 8007398:	20000088 	.word	0x20000088

0800739c <sbrk_aligned>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	4e0e      	ldr	r6, [pc, #56]	; (80073d8 <sbrk_aligned+0x3c>)
 80073a0:	460c      	mov	r4, r1
 80073a2:	6831      	ldr	r1, [r6, #0]
 80073a4:	4605      	mov	r5, r0
 80073a6:	b911      	cbnz	r1, 80073ae <sbrk_aligned+0x12>
 80073a8:	f001 fff4 	bl	8009394 <_sbrk_r>
 80073ac:	6030      	str	r0, [r6, #0]
 80073ae:	4621      	mov	r1, r4
 80073b0:	4628      	mov	r0, r5
 80073b2:	f001 ffef 	bl	8009394 <_sbrk_r>
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	d00a      	beq.n	80073d0 <sbrk_aligned+0x34>
 80073ba:	1cc4      	adds	r4, r0, #3
 80073bc:	f024 0403 	bic.w	r4, r4, #3
 80073c0:	42a0      	cmp	r0, r4
 80073c2:	d007      	beq.n	80073d4 <sbrk_aligned+0x38>
 80073c4:	1a21      	subs	r1, r4, r0
 80073c6:	4628      	mov	r0, r5
 80073c8:	f001 ffe4 	bl	8009394 <_sbrk_r>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d101      	bne.n	80073d4 <sbrk_aligned+0x38>
 80073d0:	f04f 34ff 	mov.w	r4, #4294967295
 80073d4:	4620      	mov	r0, r4
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	2000048c 	.word	0x2000048c

080073dc <_malloc_r>:
 80073dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e0:	1ccd      	adds	r5, r1, #3
 80073e2:	f025 0503 	bic.w	r5, r5, #3
 80073e6:	3508      	adds	r5, #8
 80073e8:	2d0c      	cmp	r5, #12
 80073ea:	bf38      	it	cc
 80073ec:	250c      	movcc	r5, #12
 80073ee:	2d00      	cmp	r5, #0
 80073f0:	4607      	mov	r7, r0
 80073f2:	db01      	blt.n	80073f8 <_malloc_r+0x1c>
 80073f4:	42a9      	cmp	r1, r5
 80073f6:	d905      	bls.n	8007404 <_malloc_r+0x28>
 80073f8:	230c      	movs	r3, #12
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	2600      	movs	r6, #0
 80073fe:	4630      	mov	r0, r6
 8007400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007404:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074d8 <_malloc_r+0xfc>
 8007408:	f000 f868 	bl	80074dc <__malloc_lock>
 800740c:	f8d8 3000 	ldr.w	r3, [r8]
 8007410:	461c      	mov	r4, r3
 8007412:	bb5c      	cbnz	r4, 800746c <_malloc_r+0x90>
 8007414:	4629      	mov	r1, r5
 8007416:	4638      	mov	r0, r7
 8007418:	f7ff ffc0 	bl	800739c <sbrk_aligned>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	4604      	mov	r4, r0
 8007420:	d155      	bne.n	80074ce <_malloc_r+0xf2>
 8007422:	f8d8 4000 	ldr.w	r4, [r8]
 8007426:	4626      	mov	r6, r4
 8007428:	2e00      	cmp	r6, #0
 800742a:	d145      	bne.n	80074b8 <_malloc_r+0xdc>
 800742c:	2c00      	cmp	r4, #0
 800742e:	d048      	beq.n	80074c2 <_malloc_r+0xe6>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	4631      	mov	r1, r6
 8007434:	4638      	mov	r0, r7
 8007436:	eb04 0903 	add.w	r9, r4, r3
 800743a:	f001 ffab 	bl	8009394 <_sbrk_r>
 800743e:	4581      	cmp	r9, r0
 8007440:	d13f      	bne.n	80074c2 <_malloc_r+0xe6>
 8007442:	6821      	ldr	r1, [r4, #0]
 8007444:	1a6d      	subs	r5, r5, r1
 8007446:	4629      	mov	r1, r5
 8007448:	4638      	mov	r0, r7
 800744a:	f7ff ffa7 	bl	800739c <sbrk_aligned>
 800744e:	3001      	adds	r0, #1
 8007450:	d037      	beq.n	80074c2 <_malloc_r+0xe6>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	442b      	add	r3, r5
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	f8d8 3000 	ldr.w	r3, [r8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d038      	beq.n	80074d2 <_malloc_r+0xf6>
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	42a2      	cmp	r2, r4
 8007464:	d12b      	bne.n	80074be <_malloc_r+0xe2>
 8007466:	2200      	movs	r2, #0
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	e00f      	b.n	800748c <_malloc_r+0xb0>
 800746c:	6822      	ldr	r2, [r4, #0]
 800746e:	1b52      	subs	r2, r2, r5
 8007470:	d41f      	bmi.n	80074b2 <_malloc_r+0xd6>
 8007472:	2a0b      	cmp	r2, #11
 8007474:	d917      	bls.n	80074a6 <_malloc_r+0xca>
 8007476:	1961      	adds	r1, r4, r5
 8007478:	42a3      	cmp	r3, r4
 800747a:	6025      	str	r5, [r4, #0]
 800747c:	bf18      	it	ne
 800747e:	6059      	strne	r1, [r3, #4]
 8007480:	6863      	ldr	r3, [r4, #4]
 8007482:	bf08      	it	eq
 8007484:	f8c8 1000 	streq.w	r1, [r8]
 8007488:	5162      	str	r2, [r4, r5]
 800748a:	604b      	str	r3, [r1, #4]
 800748c:	4638      	mov	r0, r7
 800748e:	f104 060b 	add.w	r6, r4, #11
 8007492:	f000 f829 	bl	80074e8 <__malloc_unlock>
 8007496:	f026 0607 	bic.w	r6, r6, #7
 800749a:	1d23      	adds	r3, r4, #4
 800749c:	1af2      	subs	r2, r6, r3
 800749e:	d0ae      	beq.n	80073fe <_malloc_r+0x22>
 80074a0:	1b9b      	subs	r3, r3, r6
 80074a2:	50a3      	str	r3, [r4, r2]
 80074a4:	e7ab      	b.n	80073fe <_malloc_r+0x22>
 80074a6:	42a3      	cmp	r3, r4
 80074a8:	6862      	ldr	r2, [r4, #4]
 80074aa:	d1dd      	bne.n	8007468 <_malloc_r+0x8c>
 80074ac:	f8c8 2000 	str.w	r2, [r8]
 80074b0:	e7ec      	b.n	800748c <_malloc_r+0xb0>
 80074b2:	4623      	mov	r3, r4
 80074b4:	6864      	ldr	r4, [r4, #4]
 80074b6:	e7ac      	b.n	8007412 <_malloc_r+0x36>
 80074b8:	4634      	mov	r4, r6
 80074ba:	6876      	ldr	r6, [r6, #4]
 80074bc:	e7b4      	b.n	8007428 <_malloc_r+0x4c>
 80074be:	4613      	mov	r3, r2
 80074c0:	e7cc      	b.n	800745c <_malloc_r+0x80>
 80074c2:	230c      	movs	r3, #12
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	4638      	mov	r0, r7
 80074c8:	f000 f80e 	bl	80074e8 <__malloc_unlock>
 80074cc:	e797      	b.n	80073fe <_malloc_r+0x22>
 80074ce:	6025      	str	r5, [r4, #0]
 80074d0:	e7dc      	b.n	800748c <_malloc_r+0xb0>
 80074d2:	605b      	str	r3, [r3, #4]
 80074d4:	deff      	udf	#255	; 0xff
 80074d6:	bf00      	nop
 80074d8:	20000488 	.word	0x20000488

080074dc <__malloc_lock>:
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <__malloc_lock+0x8>)
 80074de:	f7ff b887 	b.w	80065f0 <__retarget_lock_acquire_recursive>
 80074e2:	bf00      	nop
 80074e4:	20000484 	.word	0x20000484

080074e8 <__malloc_unlock>:
 80074e8:	4801      	ldr	r0, [pc, #4]	; (80074f0 <__malloc_unlock+0x8>)
 80074ea:	f7ff b882 	b.w	80065f2 <__retarget_lock_release_recursive>
 80074ee:	bf00      	nop
 80074f0:	20000484 	.word	0x20000484

080074f4 <_Balloc>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	69c6      	ldr	r6, [r0, #28]
 80074f8:	4604      	mov	r4, r0
 80074fa:	460d      	mov	r5, r1
 80074fc:	b976      	cbnz	r6, 800751c <_Balloc+0x28>
 80074fe:	2010      	movs	r0, #16
 8007500:	f7ff ff44 	bl	800738c <malloc>
 8007504:	4602      	mov	r2, r0
 8007506:	61e0      	str	r0, [r4, #28]
 8007508:	b920      	cbnz	r0, 8007514 <_Balloc+0x20>
 800750a:	4b18      	ldr	r3, [pc, #96]	; (800756c <_Balloc+0x78>)
 800750c:	4818      	ldr	r0, [pc, #96]	; (8007570 <_Balloc+0x7c>)
 800750e:	216b      	movs	r1, #107	; 0x6b
 8007510:	f001 ff66 	bl	80093e0 <__assert_func>
 8007514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007518:	6006      	str	r6, [r0, #0]
 800751a:	60c6      	str	r6, [r0, #12]
 800751c:	69e6      	ldr	r6, [r4, #28]
 800751e:	68f3      	ldr	r3, [r6, #12]
 8007520:	b183      	cbz	r3, 8007544 <_Balloc+0x50>
 8007522:	69e3      	ldr	r3, [r4, #28]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800752a:	b9b8      	cbnz	r0, 800755c <_Balloc+0x68>
 800752c:	2101      	movs	r1, #1
 800752e:	fa01 f605 	lsl.w	r6, r1, r5
 8007532:	1d72      	adds	r2, r6, #5
 8007534:	0092      	lsls	r2, r2, #2
 8007536:	4620      	mov	r0, r4
 8007538:	f001 ff70 	bl	800941c <_calloc_r>
 800753c:	b160      	cbz	r0, 8007558 <_Balloc+0x64>
 800753e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007542:	e00e      	b.n	8007562 <_Balloc+0x6e>
 8007544:	2221      	movs	r2, #33	; 0x21
 8007546:	2104      	movs	r1, #4
 8007548:	4620      	mov	r0, r4
 800754a:	f001 ff67 	bl	800941c <_calloc_r>
 800754e:	69e3      	ldr	r3, [r4, #28]
 8007550:	60f0      	str	r0, [r6, #12]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e4      	bne.n	8007522 <_Balloc+0x2e>
 8007558:	2000      	movs	r0, #0
 800755a:	bd70      	pop	{r4, r5, r6, pc}
 800755c:	6802      	ldr	r2, [r0, #0]
 800755e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007562:	2300      	movs	r3, #0
 8007564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007568:	e7f7      	b.n	800755a <_Balloc+0x66>
 800756a:	bf00      	nop
 800756c:	0800a172 	.word	0x0800a172
 8007570:	0800a1f2 	.word	0x0800a1f2

08007574 <_Bfree>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	69c6      	ldr	r6, [r0, #28]
 8007578:	4605      	mov	r5, r0
 800757a:	460c      	mov	r4, r1
 800757c:	b976      	cbnz	r6, 800759c <_Bfree+0x28>
 800757e:	2010      	movs	r0, #16
 8007580:	f7ff ff04 	bl	800738c <malloc>
 8007584:	4602      	mov	r2, r0
 8007586:	61e8      	str	r0, [r5, #28]
 8007588:	b920      	cbnz	r0, 8007594 <_Bfree+0x20>
 800758a:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <_Bfree+0x3c>)
 800758c:	4809      	ldr	r0, [pc, #36]	; (80075b4 <_Bfree+0x40>)
 800758e:	218f      	movs	r1, #143	; 0x8f
 8007590:	f001 ff26 	bl	80093e0 <__assert_func>
 8007594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007598:	6006      	str	r6, [r0, #0]
 800759a:	60c6      	str	r6, [r0, #12]
 800759c:	b13c      	cbz	r4, 80075ae <_Bfree+0x3a>
 800759e:	69eb      	ldr	r3, [r5, #28]
 80075a0:	6862      	ldr	r2, [r4, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075a8:	6021      	str	r1, [r4, #0]
 80075aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	0800a172 	.word	0x0800a172
 80075b4:	0800a1f2 	.word	0x0800a1f2

080075b8 <__multadd>:
 80075b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075bc:	690d      	ldr	r5, [r1, #16]
 80075be:	4607      	mov	r7, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	461e      	mov	r6, r3
 80075c4:	f101 0c14 	add.w	ip, r1, #20
 80075c8:	2000      	movs	r0, #0
 80075ca:	f8dc 3000 	ldr.w	r3, [ip]
 80075ce:	b299      	uxth	r1, r3
 80075d0:	fb02 6101 	mla	r1, r2, r1, r6
 80075d4:	0c1e      	lsrs	r6, r3, #16
 80075d6:	0c0b      	lsrs	r3, r1, #16
 80075d8:	fb02 3306 	mla	r3, r2, r6, r3
 80075dc:	b289      	uxth	r1, r1
 80075de:	3001      	adds	r0, #1
 80075e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075e4:	4285      	cmp	r5, r0
 80075e6:	f84c 1b04 	str.w	r1, [ip], #4
 80075ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075ee:	dcec      	bgt.n	80075ca <__multadd+0x12>
 80075f0:	b30e      	cbz	r6, 8007636 <__multadd+0x7e>
 80075f2:	68a3      	ldr	r3, [r4, #8]
 80075f4:	42ab      	cmp	r3, r5
 80075f6:	dc19      	bgt.n	800762c <__multadd+0x74>
 80075f8:	6861      	ldr	r1, [r4, #4]
 80075fa:	4638      	mov	r0, r7
 80075fc:	3101      	adds	r1, #1
 80075fe:	f7ff ff79 	bl	80074f4 <_Balloc>
 8007602:	4680      	mov	r8, r0
 8007604:	b928      	cbnz	r0, 8007612 <__multadd+0x5a>
 8007606:	4602      	mov	r2, r0
 8007608:	4b0c      	ldr	r3, [pc, #48]	; (800763c <__multadd+0x84>)
 800760a:	480d      	ldr	r0, [pc, #52]	; (8007640 <__multadd+0x88>)
 800760c:	21ba      	movs	r1, #186	; 0xba
 800760e:	f001 fee7 	bl	80093e0 <__assert_func>
 8007612:	6922      	ldr	r2, [r4, #16]
 8007614:	3202      	adds	r2, #2
 8007616:	f104 010c 	add.w	r1, r4, #12
 800761a:	0092      	lsls	r2, r2, #2
 800761c:	300c      	adds	r0, #12
 800761e:	f001 fec9 	bl	80093b4 <memcpy>
 8007622:	4621      	mov	r1, r4
 8007624:	4638      	mov	r0, r7
 8007626:	f7ff ffa5 	bl	8007574 <_Bfree>
 800762a:	4644      	mov	r4, r8
 800762c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007630:	3501      	adds	r5, #1
 8007632:	615e      	str	r6, [r3, #20]
 8007634:	6125      	str	r5, [r4, #16]
 8007636:	4620      	mov	r0, r4
 8007638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763c:	0800a1e1 	.word	0x0800a1e1
 8007640:	0800a1f2 	.word	0x0800a1f2

08007644 <__s2b>:
 8007644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007648:	460c      	mov	r4, r1
 800764a:	4615      	mov	r5, r2
 800764c:	461f      	mov	r7, r3
 800764e:	2209      	movs	r2, #9
 8007650:	3308      	adds	r3, #8
 8007652:	4606      	mov	r6, r0
 8007654:	fb93 f3f2 	sdiv	r3, r3, r2
 8007658:	2100      	movs	r1, #0
 800765a:	2201      	movs	r2, #1
 800765c:	429a      	cmp	r2, r3
 800765e:	db09      	blt.n	8007674 <__s2b+0x30>
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff ff47 	bl	80074f4 <_Balloc>
 8007666:	b940      	cbnz	r0, 800767a <__s2b+0x36>
 8007668:	4602      	mov	r2, r0
 800766a:	4b19      	ldr	r3, [pc, #100]	; (80076d0 <__s2b+0x8c>)
 800766c:	4819      	ldr	r0, [pc, #100]	; (80076d4 <__s2b+0x90>)
 800766e:	21d3      	movs	r1, #211	; 0xd3
 8007670:	f001 feb6 	bl	80093e0 <__assert_func>
 8007674:	0052      	lsls	r2, r2, #1
 8007676:	3101      	adds	r1, #1
 8007678:	e7f0      	b.n	800765c <__s2b+0x18>
 800767a:	9b08      	ldr	r3, [sp, #32]
 800767c:	6143      	str	r3, [r0, #20]
 800767e:	2d09      	cmp	r5, #9
 8007680:	f04f 0301 	mov.w	r3, #1
 8007684:	6103      	str	r3, [r0, #16]
 8007686:	dd16      	ble.n	80076b6 <__s2b+0x72>
 8007688:	f104 0909 	add.w	r9, r4, #9
 800768c:	46c8      	mov	r8, r9
 800768e:	442c      	add	r4, r5
 8007690:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007694:	4601      	mov	r1, r0
 8007696:	3b30      	subs	r3, #48	; 0x30
 8007698:	220a      	movs	r2, #10
 800769a:	4630      	mov	r0, r6
 800769c:	f7ff ff8c 	bl	80075b8 <__multadd>
 80076a0:	45a0      	cmp	r8, r4
 80076a2:	d1f5      	bne.n	8007690 <__s2b+0x4c>
 80076a4:	f1a5 0408 	sub.w	r4, r5, #8
 80076a8:	444c      	add	r4, r9
 80076aa:	1b2d      	subs	r5, r5, r4
 80076ac:	1963      	adds	r3, r4, r5
 80076ae:	42bb      	cmp	r3, r7
 80076b0:	db04      	blt.n	80076bc <__s2b+0x78>
 80076b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b6:	340a      	adds	r4, #10
 80076b8:	2509      	movs	r5, #9
 80076ba:	e7f6      	b.n	80076aa <__s2b+0x66>
 80076bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076c0:	4601      	mov	r1, r0
 80076c2:	3b30      	subs	r3, #48	; 0x30
 80076c4:	220a      	movs	r2, #10
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7ff ff76 	bl	80075b8 <__multadd>
 80076cc:	e7ee      	b.n	80076ac <__s2b+0x68>
 80076ce:	bf00      	nop
 80076d0:	0800a1e1 	.word	0x0800a1e1
 80076d4:	0800a1f2 	.word	0x0800a1f2

080076d8 <__hi0bits>:
 80076d8:	0c03      	lsrs	r3, r0, #16
 80076da:	041b      	lsls	r3, r3, #16
 80076dc:	b9d3      	cbnz	r3, 8007714 <__hi0bits+0x3c>
 80076de:	0400      	lsls	r0, r0, #16
 80076e0:	2310      	movs	r3, #16
 80076e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076e6:	bf04      	itt	eq
 80076e8:	0200      	lsleq	r0, r0, #8
 80076ea:	3308      	addeq	r3, #8
 80076ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076f0:	bf04      	itt	eq
 80076f2:	0100      	lsleq	r0, r0, #4
 80076f4:	3304      	addeq	r3, #4
 80076f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076fa:	bf04      	itt	eq
 80076fc:	0080      	lsleq	r0, r0, #2
 80076fe:	3302      	addeq	r3, #2
 8007700:	2800      	cmp	r0, #0
 8007702:	db05      	blt.n	8007710 <__hi0bits+0x38>
 8007704:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007708:	f103 0301 	add.w	r3, r3, #1
 800770c:	bf08      	it	eq
 800770e:	2320      	moveq	r3, #32
 8007710:	4618      	mov	r0, r3
 8007712:	4770      	bx	lr
 8007714:	2300      	movs	r3, #0
 8007716:	e7e4      	b.n	80076e2 <__hi0bits+0xa>

08007718 <__lo0bits>:
 8007718:	6803      	ldr	r3, [r0, #0]
 800771a:	f013 0207 	ands.w	r2, r3, #7
 800771e:	d00c      	beq.n	800773a <__lo0bits+0x22>
 8007720:	07d9      	lsls	r1, r3, #31
 8007722:	d422      	bmi.n	800776a <__lo0bits+0x52>
 8007724:	079a      	lsls	r2, r3, #30
 8007726:	bf49      	itett	mi
 8007728:	085b      	lsrmi	r3, r3, #1
 800772a:	089b      	lsrpl	r3, r3, #2
 800772c:	6003      	strmi	r3, [r0, #0]
 800772e:	2201      	movmi	r2, #1
 8007730:	bf5c      	itt	pl
 8007732:	6003      	strpl	r3, [r0, #0]
 8007734:	2202      	movpl	r2, #2
 8007736:	4610      	mov	r0, r2
 8007738:	4770      	bx	lr
 800773a:	b299      	uxth	r1, r3
 800773c:	b909      	cbnz	r1, 8007742 <__lo0bits+0x2a>
 800773e:	0c1b      	lsrs	r3, r3, #16
 8007740:	2210      	movs	r2, #16
 8007742:	b2d9      	uxtb	r1, r3
 8007744:	b909      	cbnz	r1, 800774a <__lo0bits+0x32>
 8007746:	3208      	adds	r2, #8
 8007748:	0a1b      	lsrs	r3, r3, #8
 800774a:	0719      	lsls	r1, r3, #28
 800774c:	bf04      	itt	eq
 800774e:	091b      	lsreq	r3, r3, #4
 8007750:	3204      	addeq	r2, #4
 8007752:	0799      	lsls	r1, r3, #30
 8007754:	bf04      	itt	eq
 8007756:	089b      	lsreq	r3, r3, #2
 8007758:	3202      	addeq	r2, #2
 800775a:	07d9      	lsls	r1, r3, #31
 800775c:	d403      	bmi.n	8007766 <__lo0bits+0x4e>
 800775e:	085b      	lsrs	r3, r3, #1
 8007760:	f102 0201 	add.w	r2, r2, #1
 8007764:	d003      	beq.n	800776e <__lo0bits+0x56>
 8007766:	6003      	str	r3, [r0, #0]
 8007768:	e7e5      	b.n	8007736 <__lo0bits+0x1e>
 800776a:	2200      	movs	r2, #0
 800776c:	e7e3      	b.n	8007736 <__lo0bits+0x1e>
 800776e:	2220      	movs	r2, #32
 8007770:	e7e1      	b.n	8007736 <__lo0bits+0x1e>
	...

08007774 <__i2b>:
 8007774:	b510      	push	{r4, lr}
 8007776:	460c      	mov	r4, r1
 8007778:	2101      	movs	r1, #1
 800777a:	f7ff febb 	bl	80074f4 <_Balloc>
 800777e:	4602      	mov	r2, r0
 8007780:	b928      	cbnz	r0, 800778e <__i2b+0x1a>
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <__i2b+0x24>)
 8007784:	4805      	ldr	r0, [pc, #20]	; (800779c <__i2b+0x28>)
 8007786:	f240 1145 	movw	r1, #325	; 0x145
 800778a:	f001 fe29 	bl	80093e0 <__assert_func>
 800778e:	2301      	movs	r3, #1
 8007790:	6144      	str	r4, [r0, #20]
 8007792:	6103      	str	r3, [r0, #16]
 8007794:	bd10      	pop	{r4, pc}
 8007796:	bf00      	nop
 8007798:	0800a1e1 	.word	0x0800a1e1
 800779c:	0800a1f2 	.word	0x0800a1f2

080077a0 <__multiply>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	4691      	mov	r9, r2
 80077a6:	690a      	ldr	r2, [r1, #16]
 80077a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	bfb8      	it	lt
 80077b0:	460b      	movlt	r3, r1
 80077b2:	460c      	mov	r4, r1
 80077b4:	bfbc      	itt	lt
 80077b6:	464c      	movlt	r4, r9
 80077b8:	4699      	movlt	r9, r3
 80077ba:	6927      	ldr	r7, [r4, #16]
 80077bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077c0:	68a3      	ldr	r3, [r4, #8]
 80077c2:	6861      	ldr	r1, [r4, #4]
 80077c4:	eb07 060a 	add.w	r6, r7, sl
 80077c8:	42b3      	cmp	r3, r6
 80077ca:	b085      	sub	sp, #20
 80077cc:	bfb8      	it	lt
 80077ce:	3101      	addlt	r1, #1
 80077d0:	f7ff fe90 	bl	80074f4 <_Balloc>
 80077d4:	b930      	cbnz	r0, 80077e4 <__multiply+0x44>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b44      	ldr	r3, [pc, #272]	; (80078ec <__multiply+0x14c>)
 80077da:	4845      	ldr	r0, [pc, #276]	; (80078f0 <__multiply+0x150>)
 80077dc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80077e0:	f001 fdfe 	bl	80093e0 <__assert_func>
 80077e4:	f100 0514 	add.w	r5, r0, #20
 80077e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077ec:	462b      	mov	r3, r5
 80077ee:	2200      	movs	r2, #0
 80077f0:	4543      	cmp	r3, r8
 80077f2:	d321      	bcc.n	8007838 <__multiply+0x98>
 80077f4:	f104 0314 	add.w	r3, r4, #20
 80077f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077fc:	f109 0314 	add.w	r3, r9, #20
 8007800:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007804:	9202      	str	r2, [sp, #8]
 8007806:	1b3a      	subs	r2, r7, r4
 8007808:	3a15      	subs	r2, #21
 800780a:	f022 0203 	bic.w	r2, r2, #3
 800780e:	3204      	adds	r2, #4
 8007810:	f104 0115 	add.w	r1, r4, #21
 8007814:	428f      	cmp	r7, r1
 8007816:	bf38      	it	cc
 8007818:	2204      	movcc	r2, #4
 800781a:	9201      	str	r2, [sp, #4]
 800781c:	9a02      	ldr	r2, [sp, #8]
 800781e:	9303      	str	r3, [sp, #12]
 8007820:	429a      	cmp	r2, r3
 8007822:	d80c      	bhi.n	800783e <__multiply+0x9e>
 8007824:	2e00      	cmp	r6, #0
 8007826:	dd03      	ble.n	8007830 <__multiply+0x90>
 8007828:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800782c:	2b00      	cmp	r3, #0
 800782e:	d05b      	beq.n	80078e8 <__multiply+0x148>
 8007830:	6106      	str	r6, [r0, #16]
 8007832:	b005      	add	sp, #20
 8007834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007838:	f843 2b04 	str.w	r2, [r3], #4
 800783c:	e7d8      	b.n	80077f0 <__multiply+0x50>
 800783e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007842:	f1ba 0f00 	cmp.w	sl, #0
 8007846:	d024      	beq.n	8007892 <__multiply+0xf2>
 8007848:	f104 0e14 	add.w	lr, r4, #20
 800784c:	46a9      	mov	r9, r5
 800784e:	f04f 0c00 	mov.w	ip, #0
 8007852:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007856:	f8d9 1000 	ldr.w	r1, [r9]
 800785a:	fa1f fb82 	uxth.w	fp, r2
 800785e:	b289      	uxth	r1, r1
 8007860:	fb0a 110b 	mla	r1, sl, fp, r1
 8007864:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007868:	f8d9 2000 	ldr.w	r2, [r9]
 800786c:	4461      	add	r1, ip
 800786e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007872:	fb0a c20b 	mla	r2, sl, fp, ip
 8007876:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800787a:	b289      	uxth	r1, r1
 800787c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007880:	4577      	cmp	r7, lr
 8007882:	f849 1b04 	str.w	r1, [r9], #4
 8007886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800788a:	d8e2      	bhi.n	8007852 <__multiply+0xb2>
 800788c:	9a01      	ldr	r2, [sp, #4]
 800788e:	f845 c002 	str.w	ip, [r5, r2]
 8007892:	9a03      	ldr	r2, [sp, #12]
 8007894:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007898:	3304      	adds	r3, #4
 800789a:	f1b9 0f00 	cmp.w	r9, #0
 800789e:	d021      	beq.n	80078e4 <__multiply+0x144>
 80078a0:	6829      	ldr	r1, [r5, #0]
 80078a2:	f104 0c14 	add.w	ip, r4, #20
 80078a6:	46ae      	mov	lr, r5
 80078a8:	f04f 0a00 	mov.w	sl, #0
 80078ac:	f8bc b000 	ldrh.w	fp, [ip]
 80078b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078b4:	fb09 220b 	mla	r2, r9, fp, r2
 80078b8:	4452      	add	r2, sl
 80078ba:	b289      	uxth	r1, r1
 80078bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078c0:	f84e 1b04 	str.w	r1, [lr], #4
 80078c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078cc:	f8be 1000 	ldrh.w	r1, [lr]
 80078d0:	fb09 110a 	mla	r1, r9, sl, r1
 80078d4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80078d8:	4567      	cmp	r7, ip
 80078da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078de:	d8e5      	bhi.n	80078ac <__multiply+0x10c>
 80078e0:	9a01      	ldr	r2, [sp, #4]
 80078e2:	50a9      	str	r1, [r5, r2]
 80078e4:	3504      	adds	r5, #4
 80078e6:	e799      	b.n	800781c <__multiply+0x7c>
 80078e8:	3e01      	subs	r6, #1
 80078ea:	e79b      	b.n	8007824 <__multiply+0x84>
 80078ec:	0800a1e1 	.word	0x0800a1e1
 80078f0:	0800a1f2 	.word	0x0800a1f2

080078f4 <__pow5mult>:
 80078f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f8:	4615      	mov	r5, r2
 80078fa:	f012 0203 	ands.w	r2, r2, #3
 80078fe:	4606      	mov	r6, r0
 8007900:	460f      	mov	r7, r1
 8007902:	d007      	beq.n	8007914 <__pow5mult+0x20>
 8007904:	4c25      	ldr	r4, [pc, #148]	; (800799c <__pow5mult+0xa8>)
 8007906:	3a01      	subs	r2, #1
 8007908:	2300      	movs	r3, #0
 800790a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800790e:	f7ff fe53 	bl	80075b8 <__multadd>
 8007912:	4607      	mov	r7, r0
 8007914:	10ad      	asrs	r5, r5, #2
 8007916:	d03d      	beq.n	8007994 <__pow5mult+0xa0>
 8007918:	69f4      	ldr	r4, [r6, #28]
 800791a:	b97c      	cbnz	r4, 800793c <__pow5mult+0x48>
 800791c:	2010      	movs	r0, #16
 800791e:	f7ff fd35 	bl	800738c <malloc>
 8007922:	4602      	mov	r2, r0
 8007924:	61f0      	str	r0, [r6, #28]
 8007926:	b928      	cbnz	r0, 8007934 <__pow5mult+0x40>
 8007928:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <__pow5mult+0xac>)
 800792a:	481e      	ldr	r0, [pc, #120]	; (80079a4 <__pow5mult+0xb0>)
 800792c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007930:	f001 fd56 	bl	80093e0 <__assert_func>
 8007934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007938:	6004      	str	r4, [r0, #0]
 800793a:	60c4      	str	r4, [r0, #12]
 800793c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007944:	b94c      	cbnz	r4, 800795a <__pow5mult+0x66>
 8007946:	f240 2171 	movw	r1, #625	; 0x271
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff ff12 	bl	8007774 <__i2b>
 8007950:	2300      	movs	r3, #0
 8007952:	f8c8 0008 	str.w	r0, [r8, #8]
 8007956:	4604      	mov	r4, r0
 8007958:	6003      	str	r3, [r0, #0]
 800795a:	f04f 0900 	mov.w	r9, #0
 800795e:	07eb      	lsls	r3, r5, #31
 8007960:	d50a      	bpl.n	8007978 <__pow5mult+0x84>
 8007962:	4639      	mov	r1, r7
 8007964:	4622      	mov	r2, r4
 8007966:	4630      	mov	r0, r6
 8007968:	f7ff ff1a 	bl	80077a0 <__multiply>
 800796c:	4639      	mov	r1, r7
 800796e:	4680      	mov	r8, r0
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff fdff 	bl	8007574 <_Bfree>
 8007976:	4647      	mov	r7, r8
 8007978:	106d      	asrs	r5, r5, #1
 800797a:	d00b      	beq.n	8007994 <__pow5mult+0xa0>
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	b938      	cbnz	r0, 8007990 <__pow5mult+0x9c>
 8007980:	4622      	mov	r2, r4
 8007982:	4621      	mov	r1, r4
 8007984:	4630      	mov	r0, r6
 8007986:	f7ff ff0b 	bl	80077a0 <__multiply>
 800798a:	6020      	str	r0, [r4, #0]
 800798c:	f8c0 9000 	str.w	r9, [r0]
 8007990:	4604      	mov	r4, r0
 8007992:	e7e4      	b.n	800795e <__pow5mult+0x6a>
 8007994:	4638      	mov	r0, r7
 8007996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799a:	bf00      	nop
 800799c:	0800a340 	.word	0x0800a340
 80079a0:	0800a172 	.word	0x0800a172
 80079a4:	0800a1f2 	.word	0x0800a1f2

080079a8 <__lshift>:
 80079a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ac:	460c      	mov	r4, r1
 80079ae:	6849      	ldr	r1, [r1, #4]
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079b6:	68a3      	ldr	r3, [r4, #8]
 80079b8:	4607      	mov	r7, r0
 80079ba:	4691      	mov	r9, r2
 80079bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079c0:	f108 0601 	add.w	r6, r8, #1
 80079c4:	42b3      	cmp	r3, r6
 80079c6:	db0b      	blt.n	80079e0 <__lshift+0x38>
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff fd93 	bl	80074f4 <_Balloc>
 80079ce:	4605      	mov	r5, r0
 80079d0:	b948      	cbnz	r0, 80079e6 <__lshift+0x3e>
 80079d2:	4602      	mov	r2, r0
 80079d4:	4b28      	ldr	r3, [pc, #160]	; (8007a78 <__lshift+0xd0>)
 80079d6:	4829      	ldr	r0, [pc, #164]	; (8007a7c <__lshift+0xd4>)
 80079d8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80079dc:	f001 fd00 	bl	80093e0 <__assert_func>
 80079e0:	3101      	adds	r1, #1
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	e7ee      	b.n	80079c4 <__lshift+0x1c>
 80079e6:	2300      	movs	r3, #0
 80079e8:	f100 0114 	add.w	r1, r0, #20
 80079ec:	f100 0210 	add.w	r2, r0, #16
 80079f0:	4618      	mov	r0, r3
 80079f2:	4553      	cmp	r3, sl
 80079f4:	db33      	blt.n	8007a5e <__lshift+0xb6>
 80079f6:	6920      	ldr	r0, [r4, #16]
 80079f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079fc:	f104 0314 	add.w	r3, r4, #20
 8007a00:	f019 091f 	ands.w	r9, r9, #31
 8007a04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a0c:	d02b      	beq.n	8007a66 <__lshift+0xbe>
 8007a0e:	f1c9 0e20 	rsb	lr, r9, #32
 8007a12:	468a      	mov	sl, r1
 8007a14:	2200      	movs	r2, #0
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	fa00 f009 	lsl.w	r0, r0, r9
 8007a1c:	4310      	orrs	r0, r2
 8007a1e:	f84a 0b04 	str.w	r0, [sl], #4
 8007a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a26:	459c      	cmp	ip, r3
 8007a28:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a2c:	d8f3      	bhi.n	8007a16 <__lshift+0x6e>
 8007a2e:	ebac 0304 	sub.w	r3, ip, r4
 8007a32:	3b15      	subs	r3, #21
 8007a34:	f023 0303 	bic.w	r3, r3, #3
 8007a38:	3304      	adds	r3, #4
 8007a3a:	f104 0015 	add.w	r0, r4, #21
 8007a3e:	4584      	cmp	ip, r0
 8007a40:	bf38      	it	cc
 8007a42:	2304      	movcc	r3, #4
 8007a44:	50ca      	str	r2, [r1, r3]
 8007a46:	b10a      	cbz	r2, 8007a4c <__lshift+0xa4>
 8007a48:	f108 0602 	add.w	r6, r8, #2
 8007a4c:	3e01      	subs	r6, #1
 8007a4e:	4638      	mov	r0, r7
 8007a50:	612e      	str	r6, [r5, #16]
 8007a52:	4621      	mov	r1, r4
 8007a54:	f7ff fd8e 	bl	8007574 <_Bfree>
 8007a58:	4628      	mov	r0, r5
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a62:	3301      	adds	r3, #1
 8007a64:	e7c5      	b.n	80079f2 <__lshift+0x4a>
 8007a66:	3904      	subs	r1, #4
 8007a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a70:	459c      	cmp	ip, r3
 8007a72:	d8f9      	bhi.n	8007a68 <__lshift+0xc0>
 8007a74:	e7ea      	b.n	8007a4c <__lshift+0xa4>
 8007a76:	bf00      	nop
 8007a78:	0800a1e1 	.word	0x0800a1e1
 8007a7c:	0800a1f2 	.word	0x0800a1f2

08007a80 <__mcmp>:
 8007a80:	b530      	push	{r4, r5, lr}
 8007a82:	6902      	ldr	r2, [r0, #16]
 8007a84:	690c      	ldr	r4, [r1, #16]
 8007a86:	1b12      	subs	r2, r2, r4
 8007a88:	d10e      	bne.n	8007aa8 <__mcmp+0x28>
 8007a8a:	f100 0314 	add.w	r3, r0, #20
 8007a8e:	3114      	adds	r1, #20
 8007a90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007aa0:	42a5      	cmp	r5, r4
 8007aa2:	d003      	beq.n	8007aac <__mcmp+0x2c>
 8007aa4:	d305      	bcc.n	8007ab2 <__mcmp+0x32>
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	bd30      	pop	{r4, r5, pc}
 8007aac:	4283      	cmp	r3, r0
 8007aae:	d3f3      	bcc.n	8007a98 <__mcmp+0x18>
 8007ab0:	e7fa      	b.n	8007aa8 <__mcmp+0x28>
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab6:	e7f7      	b.n	8007aa8 <__mcmp+0x28>

08007ab8 <__mdiff>:
 8007ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	460c      	mov	r4, r1
 8007abe:	4606      	mov	r6, r0
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4690      	mov	r8, r2
 8007ac6:	f7ff ffdb 	bl	8007a80 <__mcmp>
 8007aca:	1e05      	subs	r5, r0, #0
 8007acc:	d110      	bne.n	8007af0 <__mdiff+0x38>
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7ff fd0f 	bl	80074f4 <_Balloc>
 8007ad6:	b930      	cbnz	r0, 8007ae6 <__mdiff+0x2e>
 8007ad8:	4b3a      	ldr	r3, [pc, #232]	; (8007bc4 <__mdiff+0x10c>)
 8007ada:	4602      	mov	r2, r0
 8007adc:	f240 2137 	movw	r1, #567	; 0x237
 8007ae0:	4839      	ldr	r0, [pc, #228]	; (8007bc8 <__mdiff+0x110>)
 8007ae2:	f001 fc7d 	bl	80093e0 <__assert_func>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af0:	bfa4      	itt	ge
 8007af2:	4643      	movge	r3, r8
 8007af4:	46a0      	movge	r8, r4
 8007af6:	4630      	mov	r0, r6
 8007af8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007afc:	bfa6      	itte	ge
 8007afe:	461c      	movge	r4, r3
 8007b00:	2500      	movge	r5, #0
 8007b02:	2501      	movlt	r5, #1
 8007b04:	f7ff fcf6 	bl	80074f4 <_Balloc>
 8007b08:	b920      	cbnz	r0, 8007b14 <__mdiff+0x5c>
 8007b0a:	4b2e      	ldr	r3, [pc, #184]	; (8007bc4 <__mdiff+0x10c>)
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	f240 2145 	movw	r1, #581	; 0x245
 8007b12:	e7e5      	b.n	8007ae0 <__mdiff+0x28>
 8007b14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b18:	6926      	ldr	r6, [r4, #16]
 8007b1a:	60c5      	str	r5, [r0, #12]
 8007b1c:	f104 0914 	add.w	r9, r4, #20
 8007b20:	f108 0514 	add.w	r5, r8, #20
 8007b24:	f100 0e14 	add.w	lr, r0, #20
 8007b28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b30:	f108 0210 	add.w	r2, r8, #16
 8007b34:	46f2      	mov	sl, lr
 8007b36:	2100      	movs	r1, #0
 8007b38:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b40:	fa11 f88b 	uxtah	r8, r1, fp
 8007b44:	b299      	uxth	r1, r3
 8007b46:	0c1b      	lsrs	r3, r3, #16
 8007b48:	eba8 0801 	sub.w	r8, r8, r1
 8007b4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b50:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b54:	fa1f f888 	uxth.w	r8, r8
 8007b58:	1419      	asrs	r1, r3, #16
 8007b5a:	454e      	cmp	r6, r9
 8007b5c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b60:	f84a 3b04 	str.w	r3, [sl], #4
 8007b64:	d8e8      	bhi.n	8007b38 <__mdiff+0x80>
 8007b66:	1b33      	subs	r3, r6, r4
 8007b68:	3b15      	subs	r3, #21
 8007b6a:	f023 0303 	bic.w	r3, r3, #3
 8007b6e:	3304      	adds	r3, #4
 8007b70:	3415      	adds	r4, #21
 8007b72:	42a6      	cmp	r6, r4
 8007b74:	bf38      	it	cc
 8007b76:	2304      	movcc	r3, #4
 8007b78:	441d      	add	r5, r3
 8007b7a:	4473      	add	r3, lr
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	462e      	mov	r6, r5
 8007b80:	4566      	cmp	r6, ip
 8007b82:	d30e      	bcc.n	8007ba2 <__mdiff+0xea>
 8007b84:	f10c 0203 	add.w	r2, ip, #3
 8007b88:	1b52      	subs	r2, r2, r5
 8007b8a:	f022 0203 	bic.w	r2, r2, #3
 8007b8e:	3d03      	subs	r5, #3
 8007b90:	45ac      	cmp	ip, r5
 8007b92:	bf38      	it	cc
 8007b94:	2200      	movcc	r2, #0
 8007b96:	4413      	add	r3, r2
 8007b98:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007b9c:	b17a      	cbz	r2, 8007bbe <__mdiff+0x106>
 8007b9e:	6107      	str	r7, [r0, #16]
 8007ba0:	e7a4      	b.n	8007aec <__mdiff+0x34>
 8007ba2:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ba6:	fa11 f288 	uxtah	r2, r1, r8
 8007baa:	1414      	asrs	r4, r2, #16
 8007bac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bb0:	b292      	uxth	r2, r2
 8007bb2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007bb6:	f84e 2b04 	str.w	r2, [lr], #4
 8007bba:	1421      	asrs	r1, r4, #16
 8007bbc:	e7e0      	b.n	8007b80 <__mdiff+0xc8>
 8007bbe:	3f01      	subs	r7, #1
 8007bc0:	e7ea      	b.n	8007b98 <__mdiff+0xe0>
 8007bc2:	bf00      	nop
 8007bc4:	0800a1e1 	.word	0x0800a1e1
 8007bc8:	0800a1f2 	.word	0x0800a1f2

08007bcc <__ulp>:
 8007bcc:	b082      	sub	sp, #8
 8007bce:	ed8d 0b00 	vstr	d0, [sp]
 8007bd2:	9a01      	ldr	r2, [sp, #4]
 8007bd4:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <__ulp+0x48>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dc08      	bgt.n	8007bf2 <__ulp+0x26>
 8007be0:	425b      	negs	r3, r3
 8007be2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007be6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007bea:	da04      	bge.n	8007bf6 <__ulp+0x2a>
 8007bec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007bf0:	4113      	asrs	r3, r2
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	e008      	b.n	8007c08 <__ulp+0x3c>
 8007bf6:	f1a2 0314 	sub.w	r3, r2, #20
 8007bfa:	2b1e      	cmp	r3, #30
 8007bfc:	bfda      	itte	le
 8007bfe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007c02:	40da      	lsrle	r2, r3
 8007c04:	2201      	movgt	r2, #1
 8007c06:	2300      	movs	r3, #0
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	ec41 0b10 	vmov	d0, r0, r1
 8007c10:	b002      	add	sp, #8
 8007c12:	4770      	bx	lr
 8007c14:	7ff00000 	.word	0x7ff00000

08007c18 <__b2d>:
 8007c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c1c:	6906      	ldr	r6, [r0, #16]
 8007c1e:	f100 0814 	add.w	r8, r0, #20
 8007c22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007c26:	1f37      	subs	r7, r6, #4
 8007c28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7ff fd53 	bl	80076d8 <__hi0bits>
 8007c32:	f1c0 0320 	rsb	r3, r0, #32
 8007c36:	280a      	cmp	r0, #10
 8007c38:	600b      	str	r3, [r1, #0]
 8007c3a:	491b      	ldr	r1, [pc, #108]	; (8007ca8 <__b2d+0x90>)
 8007c3c:	dc15      	bgt.n	8007c6a <__b2d+0x52>
 8007c3e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c42:	fa22 f30c 	lsr.w	r3, r2, ip
 8007c46:	45b8      	cmp	r8, r7
 8007c48:	ea43 0501 	orr.w	r5, r3, r1
 8007c4c:	bf34      	ite	cc
 8007c4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c52:	2300      	movcs	r3, #0
 8007c54:	3015      	adds	r0, #21
 8007c56:	fa02 f000 	lsl.w	r0, r2, r0
 8007c5a:	fa23 f30c 	lsr.w	r3, r3, ip
 8007c5e:	4303      	orrs	r3, r0
 8007c60:	461c      	mov	r4, r3
 8007c62:	ec45 4b10 	vmov	d0, r4, r5
 8007c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c6a:	45b8      	cmp	r8, r7
 8007c6c:	bf3a      	itte	cc
 8007c6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c72:	f1a6 0708 	subcc.w	r7, r6, #8
 8007c76:	2300      	movcs	r3, #0
 8007c78:	380b      	subs	r0, #11
 8007c7a:	d012      	beq.n	8007ca2 <__b2d+0x8a>
 8007c7c:	f1c0 0120 	rsb	r1, r0, #32
 8007c80:	fa23 f401 	lsr.w	r4, r3, r1
 8007c84:	4082      	lsls	r2, r0
 8007c86:	4322      	orrs	r2, r4
 8007c88:	4547      	cmp	r7, r8
 8007c8a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007c8e:	bf8c      	ite	hi
 8007c90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007c94:	2200      	movls	r2, #0
 8007c96:	4083      	lsls	r3, r0
 8007c98:	40ca      	lsrs	r2, r1
 8007c9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	e7de      	b.n	8007c60 <__b2d+0x48>
 8007ca2:	ea42 0501 	orr.w	r5, r2, r1
 8007ca6:	e7db      	b.n	8007c60 <__b2d+0x48>
 8007ca8:	3ff00000 	.word	0x3ff00000

08007cac <__d2b>:
 8007cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	ec59 8b10 	vmov	r8, r9, d0
 8007cb8:	4616      	mov	r6, r2
 8007cba:	f7ff fc1b 	bl	80074f4 <_Balloc>
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	b930      	cbnz	r0, 8007cd0 <__d2b+0x24>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	4b24      	ldr	r3, [pc, #144]	; (8007d58 <__d2b+0xac>)
 8007cc6:	4825      	ldr	r0, [pc, #148]	; (8007d5c <__d2b+0xb0>)
 8007cc8:	f240 310f 	movw	r1, #783	; 0x30f
 8007ccc:	f001 fb88 	bl	80093e0 <__assert_func>
 8007cd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cd8:	bb2d      	cbnz	r5, 8007d26 <__d2b+0x7a>
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	f1b8 0300 	subs.w	r3, r8, #0
 8007ce0:	d026      	beq.n	8007d30 <__d2b+0x84>
 8007ce2:	4668      	mov	r0, sp
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	f7ff fd17 	bl	8007718 <__lo0bits>
 8007cea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007cee:	b1e8      	cbz	r0, 8007d2c <__d2b+0x80>
 8007cf0:	f1c0 0320 	rsb	r3, r0, #32
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	40c2      	lsrs	r2, r0
 8007cfc:	6163      	str	r3, [r4, #20]
 8007cfe:	9201      	str	r2, [sp, #4]
 8007d00:	9b01      	ldr	r3, [sp, #4]
 8007d02:	61a3      	str	r3, [r4, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bf14      	ite	ne
 8007d08:	2202      	movne	r2, #2
 8007d0a:	2201      	moveq	r2, #1
 8007d0c:	6122      	str	r2, [r4, #16]
 8007d0e:	b1bd      	cbz	r5, 8007d40 <__d2b+0x94>
 8007d10:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d14:	4405      	add	r5, r0
 8007d16:	603d      	str	r5, [r7, #0]
 8007d18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d1c:	6030      	str	r0, [r6, #0]
 8007d1e:	4620      	mov	r0, r4
 8007d20:	b003      	add	sp, #12
 8007d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d2a:	e7d6      	b.n	8007cda <__d2b+0x2e>
 8007d2c:	6161      	str	r1, [r4, #20]
 8007d2e:	e7e7      	b.n	8007d00 <__d2b+0x54>
 8007d30:	a801      	add	r0, sp, #4
 8007d32:	f7ff fcf1 	bl	8007718 <__lo0bits>
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	6163      	str	r3, [r4, #20]
 8007d3a:	3020      	adds	r0, #32
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	e7e5      	b.n	8007d0c <__d2b+0x60>
 8007d40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d48:	6038      	str	r0, [r7, #0]
 8007d4a:	6918      	ldr	r0, [r3, #16]
 8007d4c:	f7ff fcc4 	bl	80076d8 <__hi0bits>
 8007d50:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d54:	e7e2      	b.n	8007d1c <__d2b+0x70>
 8007d56:	bf00      	nop
 8007d58:	0800a1e1 	.word	0x0800a1e1
 8007d5c:	0800a1f2 	.word	0x0800a1f2

08007d60 <__ratio>:
 8007d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	4688      	mov	r8, r1
 8007d66:	4669      	mov	r1, sp
 8007d68:	4681      	mov	r9, r0
 8007d6a:	f7ff ff55 	bl	8007c18 <__b2d>
 8007d6e:	a901      	add	r1, sp, #4
 8007d70:	4640      	mov	r0, r8
 8007d72:	ec55 4b10 	vmov	r4, r5, d0
 8007d76:	f7ff ff4f 	bl	8007c18 <__b2d>
 8007d7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d82:	eba3 0c02 	sub.w	ip, r3, r2
 8007d86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d8a:	1a9b      	subs	r3, r3, r2
 8007d8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d90:	ec51 0b10 	vmov	r0, r1, d0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	bfd6      	itet	le
 8007d98:	460a      	movle	r2, r1
 8007d9a:	462a      	movgt	r2, r5
 8007d9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007da0:	468b      	mov	fp, r1
 8007da2:	462f      	mov	r7, r5
 8007da4:	bfd4      	ite	le
 8007da6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007daa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007dae:	4620      	mov	r0, r4
 8007db0:	ee10 2a10 	vmov	r2, s0
 8007db4:	465b      	mov	r3, fp
 8007db6:	4639      	mov	r1, r7
 8007db8:	f7f8 fd48 	bl	800084c <__aeabi_ddiv>
 8007dbc:	ec41 0b10 	vmov	d0, r0, r1
 8007dc0:	b003      	add	sp, #12
 8007dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dc6 <__copybits>:
 8007dc6:	3901      	subs	r1, #1
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	1149      	asrs	r1, r1, #5
 8007dcc:	6914      	ldr	r4, [r2, #16]
 8007dce:	3101      	adds	r1, #1
 8007dd0:	f102 0314 	add.w	r3, r2, #20
 8007dd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007dd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ddc:	1f05      	subs	r5, r0, #4
 8007dde:	42a3      	cmp	r3, r4
 8007de0:	d30c      	bcc.n	8007dfc <__copybits+0x36>
 8007de2:	1aa3      	subs	r3, r4, r2
 8007de4:	3b11      	subs	r3, #17
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	3211      	adds	r2, #17
 8007dec:	42a2      	cmp	r2, r4
 8007dee:	bf88      	it	hi
 8007df0:	2300      	movhi	r3, #0
 8007df2:	4418      	add	r0, r3
 8007df4:	2300      	movs	r3, #0
 8007df6:	4288      	cmp	r0, r1
 8007df8:	d305      	bcc.n	8007e06 <__copybits+0x40>
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}
 8007dfc:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e00:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e04:	e7eb      	b.n	8007dde <__copybits+0x18>
 8007e06:	f840 3b04 	str.w	r3, [r0], #4
 8007e0a:	e7f4      	b.n	8007df6 <__copybits+0x30>

08007e0c <__any_on>:
 8007e0c:	f100 0214 	add.w	r2, r0, #20
 8007e10:	6900      	ldr	r0, [r0, #16]
 8007e12:	114b      	asrs	r3, r1, #5
 8007e14:	4298      	cmp	r0, r3
 8007e16:	b510      	push	{r4, lr}
 8007e18:	db11      	blt.n	8007e3e <__any_on+0x32>
 8007e1a:	dd0a      	ble.n	8007e32 <__any_on+0x26>
 8007e1c:	f011 011f 	ands.w	r1, r1, #31
 8007e20:	d007      	beq.n	8007e32 <__any_on+0x26>
 8007e22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e26:	fa24 f001 	lsr.w	r0, r4, r1
 8007e2a:	fa00 f101 	lsl.w	r1, r0, r1
 8007e2e:	428c      	cmp	r4, r1
 8007e30:	d10b      	bne.n	8007e4a <__any_on+0x3e>
 8007e32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d803      	bhi.n	8007e42 <__any_on+0x36>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	bd10      	pop	{r4, pc}
 8007e3e:	4603      	mov	r3, r0
 8007e40:	e7f7      	b.n	8007e32 <__any_on+0x26>
 8007e42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e46:	2900      	cmp	r1, #0
 8007e48:	d0f5      	beq.n	8007e36 <__any_on+0x2a>
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	e7f6      	b.n	8007e3c <__any_on+0x30>

08007e4e <sulp>:
 8007e4e:	b570      	push	{r4, r5, r6, lr}
 8007e50:	4604      	mov	r4, r0
 8007e52:	460d      	mov	r5, r1
 8007e54:	ec45 4b10 	vmov	d0, r4, r5
 8007e58:	4616      	mov	r6, r2
 8007e5a:	f7ff feb7 	bl	8007bcc <__ulp>
 8007e5e:	ec51 0b10 	vmov	r0, r1, d0
 8007e62:	b17e      	cbz	r6, 8007e84 <sulp+0x36>
 8007e64:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd09      	ble.n	8007e84 <sulp+0x36>
 8007e70:	051b      	lsls	r3, r3, #20
 8007e72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e76:	2400      	movs	r4, #0
 8007e78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	462b      	mov	r3, r5
 8007e80:	f7f8 fbba 	bl	80005f8 <__aeabi_dmul>
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e88 <_strtod_l>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	ed2d 8b02 	vpush	{d8}
 8007e90:	b09b      	sub	sp, #108	; 0x6c
 8007e92:	4604      	mov	r4, r0
 8007e94:	9213      	str	r2, [sp, #76]	; 0x4c
 8007e96:	2200      	movs	r2, #0
 8007e98:	9216      	str	r2, [sp, #88]	; 0x58
 8007e9a:	460d      	mov	r5, r1
 8007e9c:	f04f 0800 	mov.w	r8, #0
 8007ea0:	f04f 0900 	mov.w	r9, #0
 8007ea4:	460a      	mov	r2, r1
 8007ea6:	9215      	str	r2, [sp, #84]	; 0x54
 8007ea8:	7811      	ldrb	r1, [r2, #0]
 8007eaa:	292b      	cmp	r1, #43	; 0x2b
 8007eac:	d04c      	beq.n	8007f48 <_strtod_l+0xc0>
 8007eae:	d83a      	bhi.n	8007f26 <_strtod_l+0x9e>
 8007eb0:	290d      	cmp	r1, #13
 8007eb2:	d834      	bhi.n	8007f1e <_strtod_l+0x96>
 8007eb4:	2908      	cmp	r1, #8
 8007eb6:	d834      	bhi.n	8007f22 <_strtod_l+0x9a>
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	d03d      	beq.n	8007f38 <_strtod_l+0xb0>
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	920a      	str	r2, [sp, #40]	; 0x28
 8007ec0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007ec2:	7832      	ldrb	r2, [r6, #0]
 8007ec4:	2a30      	cmp	r2, #48	; 0x30
 8007ec6:	f040 80b4 	bne.w	8008032 <_strtod_l+0x1aa>
 8007eca:	7872      	ldrb	r2, [r6, #1]
 8007ecc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007ed0:	2a58      	cmp	r2, #88	; 0x58
 8007ed2:	d170      	bne.n	8007fb6 <_strtod_l+0x12e>
 8007ed4:	9302      	str	r3, [sp, #8]
 8007ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	ab16      	add	r3, sp, #88	; 0x58
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	4a8e      	ldr	r2, [pc, #568]	; (8008118 <_strtod_l+0x290>)
 8007ee0:	ab17      	add	r3, sp, #92	; 0x5c
 8007ee2:	a915      	add	r1, sp, #84	; 0x54
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f001 fb17 	bl	8009518 <__gethex>
 8007eea:	f010 070f 	ands.w	r7, r0, #15
 8007eee:	4605      	mov	r5, r0
 8007ef0:	d005      	beq.n	8007efe <_strtod_l+0x76>
 8007ef2:	2f06      	cmp	r7, #6
 8007ef4:	d12a      	bne.n	8007f4c <_strtod_l+0xc4>
 8007ef6:	3601      	adds	r6, #1
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9615      	str	r6, [sp, #84]	; 0x54
 8007efc:	930a      	str	r3, [sp, #40]	; 0x28
 8007efe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 857f 	bne.w	8008a04 <_strtod_l+0xb7c>
 8007f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f08:	b1db      	cbz	r3, 8007f42 <_strtod_l+0xba>
 8007f0a:	4642      	mov	r2, r8
 8007f0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f10:	ec43 2b10 	vmov	d0, r2, r3
 8007f14:	b01b      	add	sp, #108	; 0x6c
 8007f16:	ecbd 8b02 	vpop	{d8}
 8007f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1e:	2920      	cmp	r1, #32
 8007f20:	d1cc      	bne.n	8007ebc <_strtod_l+0x34>
 8007f22:	3201      	adds	r2, #1
 8007f24:	e7bf      	b.n	8007ea6 <_strtod_l+0x1e>
 8007f26:	292d      	cmp	r1, #45	; 0x2d
 8007f28:	d1c8      	bne.n	8007ebc <_strtod_l+0x34>
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	910a      	str	r1, [sp, #40]	; 0x28
 8007f2e:	1c51      	adds	r1, r2, #1
 8007f30:	9115      	str	r1, [sp, #84]	; 0x54
 8007f32:	7852      	ldrb	r2, [r2, #1]
 8007f34:	2a00      	cmp	r2, #0
 8007f36:	d1c3      	bne.n	8007ec0 <_strtod_l+0x38>
 8007f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f3a:	9515      	str	r5, [sp, #84]	; 0x54
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f040 855f 	bne.w	8008a00 <_strtod_l+0xb78>
 8007f42:	4642      	mov	r2, r8
 8007f44:	464b      	mov	r3, r9
 8007f46:	e7e3      	b.n	8007f10 <_strtod_l+0x88>
 8007f48:	2100      	movs	r1, #0
 8007f4a:	e7ef      	b.n	8007f2c <_strtod_l+0xa4>
 8007f4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f4e:	b13a      	cbz	r2, 8007f60 <_strtod_l+0xd8>
 8007f50:	2135      	movs	r1, #53	; 0x35
 8007f52:	a818      	add	r0, sp, #96	; 0x60
 8007f54:	f7ff ff37 	bl	8007dc6 <__copybits>
 8007f58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f7ff fb0a 	bl	8007574 <_Bfree>
 8007f60:	3f01      	subs	r7, #1
 8007f62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f64:	2f04      	cmp	r7, #4
 8007f66:	d806      	bhi.n	8007f76 <_strtod_l+0xee>
 8007f68:	e8df f007 	tbb	[pc, r7]
 8007f6c:	201d0314 	.word	0x201d0314
 8007f70:	14          	.byte	0x14
 8007f71:	00          	.byte	0x00
 8007f72:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007f76:	05e9      	lsls	r1, r5, #23
 8007f78:	bf48      	it	mi
 8007f7a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007f7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f82:	0d1b      	lsrs	r3, r3, #20
 8007f84:	051b      	lsls	r3, r3, #20
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1b9      	bne.n	8007efe <_strtod_l+0x76>
 8007f8a:	f7fe fb07 	bl	800659c <__errno>
 8007f8e:	2322      	movs	r3, #34	; 0x22
 8007f90:	6003      	str	r3, [r0, #0]
 8007f92:	e7b4      	b.n	8007efe <_strtod_l+0x76>
 8007f94:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007f98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007fa0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007fa4:	e7e7      	b.n	8007f76 <_strtod_l+0xee>
 8007fa6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008120 <_strtod_l+0x298>
 8007faa:	e7e4      	b.n	8007f76 <_strtod_l+0xee>
 8007fac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007fb0:	f04f 38ff 	mov.w	r8, #4294967295
 8007fb4:	e7df      	b.n	8007f76 <_strtod_l+0xee>
 8007fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	9215      	str	r2, [sp, #84]	; 0x54
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b30      	cmp	r3, #48	; 0x30
 8007fc0:	d0f9      	beq.n	8007fb6 <_strtod_l+0x12e>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d09b      	beq.n	8007efe <_strtod_l+0x76>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f04f 0a00 	mov.w	sl, #0
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fd2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007fd6:	46d3      	mov	fp, sl
 8007fd8:	220a      	movs	r2, #10
 8007fda:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007fdc:	7806      	ldrb	r6, [r0, #0]
 8007fde:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007fe2:	b2d9      	uxtb	r1, r3
 8007fe4:	2909      	cmp	r1, #9
 8007fe6:	d926      	bls.n	8008036 <_strtod_l+0x1ae>
 8007fe8:	494c      	ldr	r1, [pc, #304]	; (800811c <_strtod_l+0x294>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	f001 f9c0 	bl	8009370 <strncmp>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d030      	beq.n	8008056 <_strtod_l+0x1ce>
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	9005      	str	r0, [sp, #20]
 8007ffa:	465e      	mov	r6, fp
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2a65      	cmp	r2, #101	; 0x65
 8008000:	d001      	beq.n	8008006 <_strtod_l+0x17e>
 8008002:	2a45      	cmp	r2, #69	; 0x45
 8008004:	d113      	bne.n	800802e <_strtod_l+0x1a6>
 8008006:	b91e      	cbnz	r6, 8008010 <_strtod_l+0x188>
 8008008:	9a04      	ldr	r2, [sp, #16]
 800800a:	4302      	orrs	r2, r0
 800800c:	d094      	beq.n	8007f38 <_strtod_l+0xb0>
 800800e:	2600      	movs	r6, #0
 8008010:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008012:	1c6a      	adds	r2, r5, #1
 8008014:	9215      	str	r2, [sp, #84]	; 0x54
 8008016:	786a      	ldrb	r2, [r5, #1]
 8008018:	2a2b      	cmp	r2, #43	; 0x2b
 800801a:	d074      	beq.n	8008106 <_strtod_l+0x27e>
 800801c:	2a2d      	cmp	r2, #45	; 0x2d
 800801e:	d078      	beq.n	8008112 <_strtod_l+0x28a>
 8008020:	f04f 0c00 	mov.w	ip, #0
 8008024:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008028:	2909      	cmp	r1, #9
 800802a:	d97f      	bls.n	800812c <_strtod_l+0x2a4>
 800802c:	9515      	str	r5, [sp, #84]	; 0x54
 800802e:	2700      	movs	r7, #0
 8008030:	e09e      	b.n	8008170 <_strtod_l+0x2e8>
 8008032:	2300      	movs	r3, #0
 8008034:	e7c8      	b.n	8007fc8 <_strtod_l+0x140>
 8008036:	f1bb 0f08 	cmp.w	fp, #8
 800803a:	bfd8      	it	le
 800803c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800803e:	f100 0001 	add.w	r0, r0, #1
 8008042:	bfda      	itte	le
 8008044:	fb02 3301 	mlale	r3, r2, r1, r3
 8008048:	9309      	strle	r3, [sp, #36]	; 0x24
 800804a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800804e:	f10b 0b01 	add.w	fp, fp, #1
 8008052:	9015      	str	r0, [sp, #84]	; 0x54
 8008054:	e7c1      	b.n	8007fda <_strtod_l+0x152>
 8008056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	9215      	str	r2, [sp, #84]	; 0x54
 800805c:	785a      	ldrb	r2, [r3, #1]
 800805e:	f1bb 0f00 	cmp.w	fp, #0
 8008062:	d037      	beq.n	80080d4 <_strtod_l+0x24c>
 8008064:	9005      	str	r0, [sp, #20]
 8008066:	465e      	mov	r6, fp
 8008068:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800806c:	2b09      	cmp	r3, #9
 800806e:	d912      	bls.n	8008096 <_strtod_l+0x20e>
 8008070:	2301      	movs	r3, #1
 8008072:	e7c4      	b.n	8007ffe <_strtod_l+0x176>
 8008074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	9215      	str	r2, [sp, #84]	; 0x54
 800807a:	785a      	ldrb	r2, [r3, #1]
 800807c:	3001      	adds	r0, #1
 800807e:	2a30      	cmp	r2, #48	; 0x30
 8008080:	d0f8      	beq.n	8008074 <_strtod_l+0x1ec>
 8008082:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008086:	2b08      	cmp	r3, #8
 8008088:	f200 84c1 	bhi.w	8008a0e <_strtod_l+0xb86>
 800808c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800808e:	9005      	str	r0, [sp, #20]
 8008090:	2000      	movs	r0, #0
 8008092:	930b      	str	r3, [sp, #44]	; 0x2c
 8008094:	4606      	mov	r6, r0
 8008096:	3a30      	subs	r2, #48	; 0x30
 8008098:	f100 0301 	add.w	r3, r0, #1
 800809c:	d014      	beq.n	80080c8 <_strtod_l+0x240>
 800809e:	9905      	ldr	r1, [sp, #20]
 80080a0:	4419      	add	r1, r3
 80080a2:	9105      	str	r1, [sp, #20]
 80080a4:	4633      	mov	r3, r6
 80080a6:	eb00 0c06 	add.w	ip, r0, r6
 80080aa:	210a      	movs	r1, #10
 80080ac:	4563      	cmp	r3, ip
 80080ae:	d113      	bne.n	80080d8 <_strtod_l+0x250>
 80080b0:	1833      	adds	r3, r6, r0
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	f106 0601 	add.w	r6, r6, #1
 80080b8:	4406      	add	r6, r0
 80080ba:	dc1a      	bgt.n	80080f2 <_strtod_l+0x26a>
 80080bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080be:	230a      	movs	r3, #10
 80080c0:	fb03 2301 	mla	r3, r3, r1, r2
 80080c4:	9309      	str	r3, [sp, #36]	; 0x24
 80080c6:	2300      	movs	r3, #0
 80080c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080ca:	1c51      	adds	r1, r2, #1
 80080cc:	9115      	str	r1, [sp, #84]	; 0x54
 80080ce:	7852      	ldrb	r2, [r2, #1]
 80080d0:	4618      	mov	r0, r3
 80080d2:	e7c9      	b.n	8008068 <_strtod_l+0x1e0>
 80080d4:	4658      	mov	r0, fp
 80080d6:	e7d2      	b.n	800807e <_strtod_l+0x1f6>
 80080d8:	2b08      	cmp	r3, #8
 80080da:	f103 0301 	add.w	r3, r3, #1
 80080de:	dc03      	bgt.n	80080e8 <_strtod_l+0x260>
 80080e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80080e2:	434f      	muls	r7, r1
 80080e4:	9709      	str	r7, [sp, #36]	; 0x24
 80080e6:	e7e1      	b.n	80080ac <_strtod_l+0x224>
 80080e8:	2b10      	cmp	r3, #16
 80080ea:	bfd8      	it	le
 80080ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 80080f0:	e7dc      	b.n	80080ac <_strtod_l+0x224>
 80080f2:	2e10      	cmp	r6, #16
 80080f4:	bfdc      	itt	le
 80080f6:	230a      	movle	r3, #10
 80080f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80080fc:	e7e3      	b.n	80080c6 <_strtod_l+0x23e>
 80080fe:	2300      	movs	r3, #0
 8008100:	9305      	str	r3, [sp, #20]
 8008102:	2301      	movs	r3, #1
 8008104:	e780      	b.n	8008008 <_strtod_l+0x180>
 8008106:	f04f 0c00 	mov.w	ip, #0
 800810a:	1caa      	adds	r2, r5, #2
 800810c:	9215      	str	r2, [sp, #84]	; 0x54
 800810e:	78aa      	ldrb	r2, [r5, #2]
 8008110:	e788      	b.n	8008024 <_strtod_l+0x19c>
 8008112:	f04f 0c01 	mov.w	ip, #1
 8008116:	e7f8      	b.n	800810a <_strtod_l+0x282>
 8008118:	0800a350 	.word	0x0800a350
 800811c:	0800a34c 	.word	0x0800a34c
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008126:	1c51      	adds	r1, r2, #1
 8008128:	9115      	str	r1, [sp, #84]	; 0x54
 800812a:	7852      	ldrb	r2, [r2, #1]
 800812c:	2a30      	cmp	r2, #48	; 0x30
 800812e:	d0f9      	beq.n	8008124 <_strtod_l+0x29c>
 8008130:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008134:	2908      	cmp	r1, #8
 8008136:	f63f af7a 	bhi.w	800802e <_strtod_l+0x1a6>
 800813a:	3a30      	subs	r2, #48	; 0x30
 800813c:	9208      	str	r2, [sp, #32]
 800813e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008140:	920c      	str	r2, [sp, #48]	; 0x30
 8008142:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008144:	1c57      	adds	r7, r2, #1
 8008146:	9715      	str	r7, [sp, #84]	; 0x54
 8008148:	7852      	ldrb	r2, [r2, #1]
 800814a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800814e:	f1be 0f09 	cmp.w	lr, #9
 8008152:	d938      	bls.n	80081c6 <_strtod_l+0x33e>
 8008154:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008156:	1a7f      	subs	r7, r7, r1
 8008158:	2f08      	cmp	r7, #8
 800815a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800815e:	dc03      	bgt.n	8008168 <_strtod_l+0x2e0>
 8008160:	9908      	ldr	r1, [sp, #32]
 8008162:	428f      	cmp	r7, r1
 8008164:	bfa8      	it	ge
 8008166:	460f      	movge	r7, r1
 8008168:	f1bc 0f00 	cmp.w	ip, #0
 800816c:	d000      	beq.n	8008170 <_strtod_l+0x2e8>
 800816e:	427f      	negs	r7, r7
 8008170:	2e00      	cmp	r6, #0
 8008172:	d14f      	bne.n	8008214 <_strtod_l+0x38c>
 8008174:	9904      	ldr	r1, [sp, #16]
 8008176:	4301      	orrs	r1, r0
 8008178:	f47f aec1 	bne.w	8007efe <_strtod_l+0x76>
 800817c:	2b00      	cmp	r3, #0
 800817e:	f47f aedb 	bne.w	8007f38 <_strtod_l+0xb0>
 8008182:	2a69      	cmp	r2, #105	; 0x69
 8008184:	d029      	beq.n	80081da <_strtod_l+0x352>
 8008186:	dc26      	bgt.n	80081d6 <_strtod_l+0x34e>
 8008188:	2a49      	cmp	r2, #73	; 0x49
 800818a:	d026      	beq.n	80081da <_strtod_l+0x352>
 800818c:	2a4e      	cmp	r2, #78	; 0x4e
 800818e:	f47f aed3 	bne.w	8007f38 <_strtod_l+0xb0>
 8008192:	499b      	ldr	r1, [pc, #620]	; (8008400 <_strtod_l+0x578>)
 8008194:	a815      	add	r0, sp, #84	; 0x54
 8008196:	f001 fbff 	bl	8009998 <__match>
 800819a:	2800      	cmp	r0, #0
 800819c:	f43f aecc 	beq.w	8007f38 <_strtod_l+0xb0>
 80081a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2b28      	cmp	r3, #40	; 0x28
 80081a6:	d12f      	bne.n	8008208 <_strtod_l+0x380>
 80081a8:	4996      	ldr	r1, [pc, #600]	; (8008404 <_strtod_l+0x57c>)
 80081aa:	aa18      	add	r2, sp, #96	; 0x60
 80081ac:	a815      	add	r0, sp, #84	; 0x54
 80081ae:	f001 fc07 	bl	80099c0 <__hexnan>
 80081b2:	2805      	cmp	r0, #5
 80081b4:	d128      	bne.n	8008208 <_strtod_l+0x380>
 80081b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80081c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80081c4:	e69b      	b.n	8007efe <_strtod_l+0x76>
 80081c6:	9f08      	ldr	r7, [sp, #32]
 80081c8:	210a      	movs	r1, #10
 80081ca:	fb01 2107 	mla	r1, r1, r7, r2
 80081ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80081d2:	9208      	str	r2, [sp, #32]
 80081d4:	e7b5      	b.n	8008142 <_strtod_l+0x2ba>
 80081d6:	2a6e      	cmp	r2, #110	; 0x6e
 80081d8:	e7d9      	b.n	800818e <_strtod_l+0x306>
 80081da:	498b      	ldr	r1, [pc, #556]	; (8008408 <_strtod_l+0x580>)
 80081dc:	a815      	add	r0, sp, #84	; 0x54
 80081de:	f001 fbdb 	bl	8009998 <__match>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	f43f aea8 	beq.w	8007f38 <_strtod_l+0xb0>
 80081e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ea:	4988      	ldr	r1, [pc, #544]	; (800840c <_strtod_l+0x584>)
 80081ec:	3b01      	subs	r3, #1
 80081ee:	a815      	add	r0, sp, #84	; 0x54
 80081f0:	9315      	str	r3, [sp, #84]	; 0x54
 80081f2:	f001 fbd1 	bl	8009998 <__match>
 80081f6:	b910      	cbnz	r0, 80081fe <_strtod_l+0x376>
 80081f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081fa:	3301      	adds	r3, #1
 80081fc:	9315      	str	r3, [sp, #84]	; 0x54
 80081fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800841c <_strtod_l+0x594>
 8008202:	f04f 0800 	mov.w	r8, #0
 8008206:	e67a      	b.n	8007efe <_strtod_l+0x76>
 8008208:	4881      	ldr	r0, [pc, #516]	; (8008410 <_strtod_l+0x588>)
 800820a:	f001 f8e1 	bl	80093d0 <nan>
 800820e:	ec59 8b10 	vmov	r8, r9, d0
 8008212:	e674      	b.n	8007efe <_strtod_l+0x76>
 8008214:	9b05      	ldr	r3, [sp, #20]
 8008216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008218:	1afb      	subs	r3, r7, r3
 800821a:	f1bb 0f00 	cmp.w	fp, #0
 800821e:	bf08      	it	eq
 8008220:	46b3      	moveq	fp, r6
 8008222:	2e10      	cmp	r6, #16
 8008224:	9308      	str	r3, [sp, #32]
 8008226:	4635      	mov	r5, r6
 8008228:	bfa8      	it	ge
 800822a:	2510      	movge	r5, #16
 800822c:	f7f8 f96a 	bl	8000504 <__aeabi_ui2d>
 8008230:	2e09      	cmp	r6, #9
 8008232:	4680      	mov	r8, r0
 8008234:	4689      	mov	r9, r1
 8008236:	dd13      	ble.n	8008260 <_strtod_l+0x3d8>
 8008238:	4b76      	ldr	r3, [pc, #472]	; (8008414 <_strtod_l+0x58c>)
 800823a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800823e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008242:	f7f8 f9d9 	bl	80005f8 <__aeabi_dmul>
 8008246:	4680      	mov	r8, r0
 8008248:	4650      	mov	r0, sl
 800824a:	4689      	mov	r9, r1
 800824c:	f7f8 f95a 	bl	8000504 <__aeabi_ui2d>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4640      	mov	r0, r8
 8008256:	4649      	mov	r1, r9
 8008258:	f7f8 f818 	bl	800028c <__adddf3>
 800825c:	4680      	mov	r8, r0
 800825e:	4689      	mov	r9, r1
 8008260:	2e0f      	cmp	r6, #15
 8008262:	dc38      	bgt.n	80082d6 <_strtod_l+0x44e>
 8008264:	9b08      	ldr	r3, [sp, #32]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f43f ae49 	beq.w	8007efe <_strtod_l+0x76>
 800826c:	dd24      	ble.n	80082b8 <_strtod_l+0x430>
 800826e:	2b16      	cmp	r3, #22
 8008270:	dc0b      	bgt.n	800828a <_strtod_l+0x402>
 8008272:	4968      	ldr	r1, [pc, #416]	; (8008414 <_strtod_l+0x58c>)
 8008274:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800827c:	4642      	mov	r2, r8
 800827e:	464b      	mov	r3, r9
 8008280:	f7f8 f9ba 	bl	80005f8 <__aeabi_dmul>
 8008284:	4680      	mov	r8, r0
 8008286:	4689      	mov	r9, r1
 8008288:	e639      	b.n	8007efe <_strtod_l+0x76>
 800828a:	9a08      	ldr	r2, [sp, #32]
 800828c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008290:	4293      	cmp	r3, r2
 8008292:	db20      	blt.n	80082d6 <_strtod_l+0x44e>
 8008294:	4c5f      	ldr	r4, [pc, #380]	; (8008414 <_strtod_l+0x58c>)
 8008296:	f1c6 060f 	rsb	r6, r6, #15
 800829a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800829e:	4642      	mov	r2, r8
 80082a0:	464b      	mov	r3, r9
 80082a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082a6:	f7f8 f9a7 	bl	80005f8 <__aeabi_dmul>
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	1b9e      	subs	r6, r3, r6
 80082ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80082b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80082b6:	e7e3      	b.n	8008280 <_strtod_l+0x3f8>
 80082b8:	9b08      	ldr	r3, [sp, #32]
 80082ba:	3316      	adds	r3, #22
 80082bc:	db0b      	blt.n	80082d6 <_strtod_l+0x44e>
 80082be:	9b05      	ldr	r3, [sp, #20]
 80082c0:	1bdf      	subs	r7, r3, r7
 80082c2:	4b54      	ldr	r3, [pc, #336]	; (8008414 <_strtod_l+0x58c>)
 80082c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80082c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082cc:	4640      	mov	r0, r8
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7f8 fabc 	bl	800084c <__aeabi_ddiv>
 80082d4:	e7d6      	b.n	8008284 <_strtod_l+0x3fc>
 80082d6:	9b08      	ldr	r3, [sp, #32]
 80082d8:	1b75      	subs	r5, r6, r5
 80082da:	441d      	add	r5, r3
 80082dc:	2d00      	cmp	r5, #0
 80082de:	dd70      	ble.n	80083c2 <_strtod_l+0x53a>
 80082e0:	f015 030f 	ands.w	r3, r5, #15
 80082e4:	d00a      	beq.n	80082fc <_strtod_l+0x474>
 80082e6:	494b      	ldr	r1, [pc, #300]	; (8008414 <_strtod_l+0x58c>)
 80082e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082ec:	4642      	mov	r2, r8
 80082ee:	464b      	mov	r3, r9
 80082f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f4:	f7f8 f980 	bl	80005f8 <__aeabi_dmul>
 80082f8:	4680      	mov	r8, r0
 80082fa:	4689      	mov	r9, r1
 80082fc:	f035 050f 	bics.w	r5, r5, #15
 8008300:	d04d      	beq.n	800839e <_strtod_l+0x516>
 8008302:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008306:	dd22      	ble.n	800834e <_strtod_l+0x4c6>
 8008308:	2500      	movs	r5, #0
 800830a:	46ab      	mov	fp, r5
 800830c:	9509      	str	r5, [sp, #36]	; 0x24
 800830e:	9505      	str	r5, [sp, #20]
 8008310:	2322      	movs	r3, #34	; 0x22
 8008312:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800841c <_strtod_l+0x594>
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	f04f 0800 	mov.w	r8, #0
 800831c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	f43f aded 	beq.w	8007efe <_strtod_l+0x76>
 8008324:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008326:	4620      	mov	r0, r4
 8008328:	f7ff f924 	bl	8007574 <_Bfree>
 800832c:	9905      	ldr	r1, [sp, #20]
 800832e:	4620      	mov	r0, r4
 8008330:	f7ff f920 	bl	8007574 <_Bfree>
 8008334:	4659      	mov	r1, fp
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff f91c 	bl	8007574 <_Bfree>
 800833c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff f918 	bl	8007574 <_Bfree>
 8008344:	4629      	mov	r1, r5
 8008346:	4620      	mov	r0, r4
 8008348:	f7ff f914 	bl	8007574 <_Bfree>
 800834c:	e5d7      	b.n	8007efe <_strtod_l+0x76>
 800834e:	4b32      	ldr	r3, [pc, #200]	; (8008418 <_strtod_l+0x590>)
 8008350:	9304      	str	r3, [sp, #16]
 8008352:	2300      	movs	r3, #0
 8008354:	112d      	asrs	r5, r5, #4
 8008356:	4640      	mov	r0, r8
 8008358:	4649      	mov	r1, r9
 800835a:	469a      	mov	sl, r3
 800835c:	2d01      	cmp	r5, #1
 800835e:	dc21      	bgt.n	80083a4 <_strtod_l+0x51c>
 8008360:	b10b      	cbz	r3, 8008366 <_strtod_l+0x4de>
 8008362:	4680      	mov	r8, r0
 8008364:	4689      	mov	r9, r1
 8008366:	492c      	ldr	r1, [pc, #176]	; (8008418 <_strtod_l+0x590>)
 8008368:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800836c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008370:	4642      	mov	r2, r8
 8008372:	464b      	mov	r3, r9
 8008374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008378:	f7f8 f93e 	bl	80005f8 <__aeabi_dmul>
 800837c:	4b27      	ldr	r3, [pc, #156]	; (800841c <_strtod_l+0x594>)
 800837e:	460a      	mov	r2, r1
 8008380:	400b      	ands	r3, r1
 8008382:	4927      	ldr	r1, [pc, #156]	; (8008420 <_strtod_l+0x598>)
 8008384:	428b      	cmp	r3, r1
 8008386:	4680      	mov	r8, r0
 8008388:	d8be      	bhi.n	8008308 <_strtod_l+0x480>
 800838a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800838e:	428b      	cmp	r3, r1
 8008390:	bf86      	itte	hi
 8008392:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008424 <_strtod_l+0x59c>
 8008396:	f04f 38ff 	movhi.w	r8, #4294967295
 800839a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800839e:	2300      	movs	r3, #0
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	e07b      	b.n	800849c <_strtod_l+0x614>
 80083a4:	07ea      	lsls	r2, r5, #31
 80083a6:	d505      	bpl.n	80083b4 <_strtod_l+0x52c>
 80083a8:	9b04      	ldr	r3, [sp, #16]
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f8 f923 	bl	80005f8 <__aeabi_dmul>
 80083b2:	2301      	movs	r3, #1
 80083b4:	9a04      	ldr	r2, [sp, #16]
 80083b6:	3208      	adds	r2, #8
 80083b8:	f10a 0a01 	add.w	sl, sl, #1
 80083bc:	106d      	asrs	r5, r5, #1
 80083be:	9204      	str	r2, [sp, #16]
 80083c0:	e7cc      	b.n	800835c <_strtod_l+0x4d4>
 80083c2:	d0ec      	beq.n	800839e <_strtod_l+0x516>
 80083c4:	426d      	negs	r5, r5
 80083c6:	f015 020f 	ands.w	r2, r5, #15
 80083ca:	d00a      	beq.n	80083e2 <_strtod_l+0x55a>
 80083cc:	4b11      	ldr	r3, [pc, #68]	; (8008414 <_strtod_l+0x58c>)
 80083ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083d2:	4640      	mov	r0, r8
 80083d4:	4649      	mov	r1, r9
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	f7f8 fa37 	bl	800084c <__aeabi_ddiv>
 80083de:	4680      	mov	r8, r0
 80083e0:	4689      	mov	r9, r1
 80083e2:	112d      	asrs	r5, r5, #4
 80083e4:	d0db      	beq.n	800839e <_strtod_l+0x516>
 80083e6:	2d1f      	cmp	r5, #31
 80083e8:	dd1e      	ble.n	8008428 <_strtod_l+0x5a0>
 80083ea:	2500      	movs	r5, #0
 80083ec:	46ab      	mov	fp, r5
 80083ee:	9509      	str	r5, [sp, #36]	; 0x24
 80083f0:	9505      	str	r5, [sp, #20]
 80083f2:	2322      	movs	r3, #34	; 0x22
 80083f4:	f04f 0800 	mov.w	r8, #0
 80083f8:	f04f 0900 	mov.w	r9, #0
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	e78d      	b.n	800831c <_strtod_l+0x494>
 8008400:	0800a139 	.word	0x0800a139
 8008404:	0800a364 	.word	0x0800a364
 8008408:	0800a131 	.word	0x0800a131
 800840c:	0800a168 	.word	0x0800a168
 8008410:	0800a4f5 	.word	0x0800a4f5
 8008414:	0800a278 	.word	0x0800a278
 8008418:	0800a250 	.word	0x0800a250
 800841c:	7ff00000 	.word	0x7ff00000
 8008420:	7ca00000 	.word	0x7ca00000
 8008424:	7fefffff 	.word	0x7fefffff
 8008428:	f015 0310 	ands.w	r3, r5, #16
 800842c:	bf18      	it	ne
 800842e:	236a      	movne	r3, #106	; 0x6a
 8008430:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80087d4 <_strtod_l+0x94c>
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	4640      	mov	r0, r8
 8008438:	4649      	mov	r1, r9
 800843a:	2300      	movs	r3, #0
 800843c:	07ea      	lsls	r2, r5, #31
 800843e:	d504      	bpl.n	800844a <_strtod_l+0x5c2>
 8008440:	e9da 2300 	ldrd	r2, r3, [sl]
 8008444:	f7f8 f8d8 	bl	80005f8 <__aeabi_dmul>
 8008448:	2301      	movs	r3, #1
 800844a:	106d      	asrs	r5, r5, #1
 800844c:	f10a 0a08 	add.w	sl, sl, #8
 8008450:	d1f4      	bne.n	800843c <_strtod_l+0x5b4>
 8008452:	b10b      	cbz	r3, 8008458 <_strtod_l+0x5d0>
 8008454:	4680      	mov	r8, r0
 8008456:	4689      	mov	r9, r1
 8008458:	9b04      	ldr	r3, [sp, #16]
 800845a:	b1bb      	cbz	r3, 800848c <_strtod_l+0x604>
 800845c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008460:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008464:	2b00      	cmp	r3, #0
 8008466:	4649      	mov	r1, r9
 8008468:	dd10      	ble.n	800848c <_strtod_l+0x604>
 800846a:	2b1f      	cmp	r3, #31
 800846c:	f340 811e 	ble.w	80086ac <_strtod_l+0x824>
 8008470:	2b34      	cmp	r3, #52	; 0x34
 8008472:	bfde      	ittt	le
 8008474:	f04f 33ff 	movle.w	r3, #4294967295
 8008478:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800847c:	4093      	lslle	r3, r2
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	bfcc      	ite	gt
 8008484:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008488:	ea03 0901 	andle.w	r9, r3, r1
 800848c:	2200      	movs	r2, #0
 800848e:	2300      	movs	r3, #0
 8008490:	4640      	mov	r0, r8
 8008492:	4649      	mov	r1, r9
 8008494:	f7f8 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8008498:	2800      	cmp	r0, #0
 800849a:	d1a6      	bne.n	80083ea <_strtod_l+0x562>
 800849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084a2:	4633      	mov	r3, r6
 80084a4:	465a      	mov	r2, fp
 80084a6:	4620      	mov	r0, r4
 80084a8:	f7ff f8cc 	bl	8007644 <__s2b>
 80084ac:	9009      	str	r0, [sp, #36]	; 0x24
 80084ae:	2800      	cmp	r0, #0
 80084b0:	f43f af2a 	beq.w	8008308 <_strtod_l+0x480>
 80084b4:	9a08      	ldr	r2, [sp, #32]
 80084b6:	9b05      	ldr	r3, [sp, #20]
 80084b8:	2a00      	cmp	r2, #0
 80084ba:	eba3 0307 	sub.w	r3, r3, r7
 80084be:	bfa8      	it	ge
 80084c0:	2300      	movge	r3, #0
 80084c2:	930c      	str	r3, [sp, #48]	; 0x30
 80084c4:	2500      	movs	r5, #0
 80084c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80084ca:	9312      	str	r3, [sp, #72]	; 0x48
 80084cc:	46ab      	mov	fp, r5
 80084ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d0:	4620      	mov	r0, r4
 80084d2:	6859      	ldr	r1, [r3, #4]
 80084d4:	f7ff f80e 	bl	80074f4 <_Balloc>
 80084d8:	9005      	str	r0, [sp, #20]
 80084da:	2800      	cmp	r0, #0
 80084dc:	f43f af18 	beq.w	8008310 <_strtod_l+0x488>
 80084e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e2:	691a      	ldr	r2, [r3, #16]
 80084e4:	3202      	adds	r2, #2
 80084e6:	f103 010c 	add.w	r1, r3, #12
 80084ea:	0092      	lsls	r2, r2, #2
 80084ec:	300c      	adds	r0, #12
 80084ee:	f000 ff61 	bl	80093b4 <memcpy>
 80084f2:	ec49 8b10 	vmov	d0, r8, r9
 80084f6:	aa18      	add	r2, sp, #96	; 0x60
 80084f8:	a917      	add	r1, sp, #92	; 0x5c
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7ff fbd6 	bl	8007cac <__d2b>
 8008500:	ec49 8b18 	vmov	d8, r8, r9
 8008504:	9016      	str	r0, [sp, #88]	; 0x58
 8008506:	2800      	cmp	r0, #0
 8008508:	f43f af02 	beq.w	8008310 <_strtod_l+0x488>
 800850c:	2101      	movs	r1, #1
 800850e:	4620      	mov	r0, r4
 8008510:	f7ff f930 	bl	8007774 <__i2b>
 8008514:	4683      	mov	fp, r0
 8008516:	2800      	cmp	r0, #0
 8008518:	f43f aefa 	beq.w	8008310 <_strtod_l+0x488>
 800851c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800851e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008520:	2e00      	cmp	r6, #0
 8008522:	bfab      	itete	ge
 8008524:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008526:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008528:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800852a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800852e:	bfac      	ite	ge
 8008530:	eb06 0a03 	addge.w	sl, r6, r3
 8008534:	1b9f      	sublt	r7, r3, r6
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	1af6      	subs	r6, r6, r3
 800853a:	4416      	add	r6, r2
 800853c:	4ba0      	ldr	r3, [pc, #640]	; (80087c0 <_strtod_l+0x938>)
 800853e:	3e01      	subs	r6, #1
 8008540:	429e      	cmp	r6, r3
 8008542:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008546:	f280 80c4 	bge.w	80086d2 <_strtod_l+0x84a>
 800854a:	1b9b      	subs	r3, r3, r6
 800854c:	2b1f      	cmp	r3, #31
 800854e:	eba2 0203 	sub.w	r2, r2, r3
 8008552:	f04f 0101 	mov.w	r1, #1
 8008556:	f300 80b0 	bgt.w	80086ba <_strtod_l+0x832>
 800855a:	fa01 f303 	lsl.w	r3, r1, r3
 800855e:	930e      	str	r3, [sp, #56]	; 0x38
 8008560:	2300      	movs	r3, #0
 8008562:	930d      	str	r3, [sp, #52]	; 0x34
 8008564:	eb0a 0602 	add.w	r6, sl, r2
 8008568:	9b04      	ldr	r3, [sp, #16]
 800856a:	45b2      	cmp	sl, r6
 800856c:	4417      	add	r7, r2
 800856e:	441f      	add	r7, r3
 8008570:	4653      	mov	r3, sl
 8008572:	bfa8      	it	ge
 8008574:	4633      	movge	r3, r6
 8008576:	42bb      	cmp	r3, r7
 8008578:	bfa8      	it	ge
 800857a:	463b      	movge	r3, r7
 800857c:	2b00      	cmp	r3, #0
 800857e:	bfc2      	ittt	gt
 8008580:	1af6      	subgt	r6, r6, r3
 8008582:	1aff      	subgt	r7, r7, r3
 8008584:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800858a:	2b00      	cmp	r3, #0
 800858c:	dd17      	ble.n	80085be <_strtod_l+0x736>
 800858e:	4659      	mov	r1, fp
 8008590:	461a      	mov	r2, r3
 8008592:	4620      	mov	r0, r4
 8008594:	f7ff f9ae 	bl	80078f4 <__pow5mult>
 8008598:	4683      	mov	fp, r0
 800859a:	2800      	cmp	r0, #0
 800859c:	f43f aeb8 	beq.w	8008310 <_strtod_l+0x488>
 80085a0:	4601      	mov	r1, r0
 80085a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7ff f8fb 	bl	80077a0 <__multiply>
 80085aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f43f aeaf 	beq.w	8008310 <_strtod_l+0x488>
 80085b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085b4:	4620      	mov	r0, r4
 80085b6:	f7fe ffdd 	bl	8007574 <_Bfree>
 80085ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085bc:	9316      	str	r3, [sp, #88]	; 0x58
 80085be:	2e00      	cmp	r6, #0
 80085c0:	f300 808c 	bgt.w	80086dc <_strtod_l+0x854>
 80085c4:	9b08      	ldr	r3, [sp, #32]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dd08      	ble.n	80085dc <_strtod_l+0x754>
 80085ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085cc:	9905      	ldr	r1, [sp, #20]
 80085ce:	4620      	mov	r0, r4
 80085d0:	f7ff f990 	bl	80078f4 <__pow5mult>
 80085d4:	9005      	str	r0, [sp, #20]
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f43f ae9a 	beq.w	8008310 <_strtod_l+0x488>
 80085dc:	2f00      	cmp	r7, #0
 80085de:	dd08      	ble.n	80085f2 <_strtod_l+0x76a>
 80085e0:	9905      	ldr	r1, [sp, #20]
 80085e2:	463a      	mov	r2, r7
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7ff f9df 	bl	80079a8 <__lshift>
 80085ea:	9005      	str	r0, [sp, #20]
 80085ec:	2800      	cmp	r0, #0
 80085ee:	f43f ae8f 	beq.w	8008310 <_strtod_l+0x488>
 80085f2:	f1ba 0f00 	cmp.w	sl, #0
 80085f6:	dd08      	ble.n	800860a <_strtod_l+0x782>
 80085f8:	4659      	mov	r1, fp
 80085fa:	4652      	mov	r2, sl
 80085fc:	4620      	mov	r0, r4
 80085fe:	f7ff f9d3 	bl	80079a8 <__lshift>
 8008602:	4683      	mov	fp, r0
 8008604:	2800      	cmp	r0, #0
 8008606:	f43f ae83 	beq.w	8008310 <_strtod_l+0x488>
 800860a:	9a05      	ldr	r2, [sp, #20]
 800860c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800860e:	4620      	mov	r0, r4
 8008610:	f7ff fa52 	bl	8007ab8 <__mdiff>
 8008614:	4605      	mov	r5, r0
 8008616:	2800      	cmp	r0, #0
 8008618:	f43f ae7a 	beq.w	8008310 <_strtod_l+0x488>
 800861c:	68c3      	ldr	r3, [r0, #12]
 800861e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008620:	2300      	movs	r3, #0
 8008622:	60c3      	str	r3, [r0, #12]
 8008624:	4659      	mov	r1, fp
 8008626:	f7ff fa2b 	bl	8007a80 <__mcmp>
 800862a:	2800      	cmp	r0, #0
 800862c:	da60      	bge.n	80086f0 <_strtod_l+0x868>
 800862e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008630:	ea53 0308 	orrs.w	r3, r3, r8
 8008634:	f040 8084 	bne.w	8008740 <_strtod_l+0x8b8>
 8008638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800863c:	2b00      	cmp	r3, #0
 800863e:	d17f      	bne.n	8008740 <_strtod_l+0x8b8>
 8008640:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008644:	0d1b      	lsrs	r3, r3, #20
 8008646:	051b      	lsls	r3, r3, #20
 8008648:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800864c:	d978      	bls.n	8008740 <_strtod_l+0x8b8>
 800864e:	696b      	ldr	r3, [r5, #20]
 8008650:	b913      	cbnz	r3, 8008658 <_strtod_l+0x7d0>
 8008652:	692b      	ldr	r3, [r5, #16]
 8008654:	2b01      	cmp	r3, #1
 8008656:	dd73      	ble.n	8008740 <_strtod_l+0x8b8>
 8008658:	4629      	mov	r1, r5
 800865a:	2201      	movs	r2, #1
 800865c:	4620      	mov	r0, r4
 800865e:	f7ff f9a3 	bl	80079a8 <__lshift>
 8008662:	4659      	mov	r1, fp
 8008664:	4605      	mov	r5, r0
 8008666:	f7ff fa0b 	bl	8007a80 <__mcmp>
 800866a:	2800      	cmp	r0, #0
 800866c:	dd68      	ble.n	8008740 <_strtod_l+0x8b8>
 800866e:	9904      	ldr	r1, [sp, #16]
 8008670:	4a54      	ldr	r2, [pc, #336]	; (80087c4 <_strtod_l+0x93c>)
 8008672:	464b      	mov	r3, r9
 8008674:	2900      	cmp	r1, #0
 8008676:	f000 8084 	beq.w	8008782 <_strtod_l+0x8fa>
 800867a:	ea02 0109 	and.w	r1, r2, r9
 800867e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008682:	dc7e      	bgt.n	8008782 <_strtod_l+0x8fa>
 8008684:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008688:	f77f aeb3 	ble.w	80083f2 <_strtod_l+0x56a>
 800868c:	4b4e      	ldr	r3, [pc, #312]	; (80087c8 <_strtod_l+0x940>)
 800868e:	4640      	mov	r0, r8
 8008690:	4649      	mov	r1, r9
 8008692:	2200      	movs	r2, #0
 8008694:	f7f7 ffb0 	bl	80005f8 <__aeabi_dmul>
 8008698:	4b4a      	ldr	r3, [pc, #296]	; (80087c4 <_strtod_l+0x93c>)
 800869a:	400b      	ands	r3, r1
 800869c:	4680      	mov	r8, r0
 800869e:	4689      	mov	r9, r1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f47f ae3f 	bne.w	8008324 <_strtod_l+0x49c>
 80086a6:	2322      	movs	r3, #34	; 0x22
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	e63b      	b.n	8008324 <_strtod_l+0x49c>
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	ea03 0808 	and.w	r8, r3, r8
 80086b8:	e6e8      	b.n	800848c <_strtod_l+0x604>
 80086ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80086be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80086c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80086c6:	36e2      	adds	r6, #226	; 0xe2
 80086c8:	fa01 f306 	lsl.w	r3, r1, r6
 80086cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80086d0:	e748      	b.n	8008564 <_strtod_l+0x6dc>
 80086d2:	2100      	movs	r1, #0
 80086d4:	2301      	movs	r3, #1
 80086d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80086da:	e743      	b.n	8008564 <_strtod_l+0x6dc>
 80086dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086de:	4632      	mov	r2, r6
 80086e0:	4620      	mov	r0, r4
 80086e2:	f7ff f961 	bl	80079a8 <__lshift>
 80086e6:	9016      	str	r0, [sp, #88]	; 0x58
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f47f af6b 	bne.w	80085c4 <_strtod_l+0x73c>
 80086ee:	e60f      	b.n	8008310 <_strtod_l+0x488>
 80086f0:	46ca      	mov	sl, r9
 80086f2:	d171      	bne.n	80087d8 <_strtod_l+0x950>
 80086f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086fa:	b352      	cbz	r2, 8008752 <_strtod_l+0x8ca>
 80086fc:	4a33      	ldr	r2, [pc, #204]	; (80087cc <_strtod_l+0x944>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d12a      	bne.n	8008758 <_strtod_l+0x8d0>
 8008702:	9b04      	ldr	r3, [sp, #16]
 8008704:	4641      	mov	r1, r8
 8008706:	b1fb      	cbz	r3, 8008748 <_strtod_l+0x8c0>
 8008708:	4b2e      	ldr	r3, [pc, #184]	; (80087c4 <_strtod_l+0x93c>)
 800870a:	ea09 0303 	and.w	r3, r9, r3
 800870e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008712:	f04f 32ff 	mov.w	r2, #4294967295
 8008716:	d81a      	bhi.n	800874e <_strtod_l+0x8c6>
 8008718:	0d1b      	lsrs	r3, r3, #20
 800871a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	4299      	cmp	r1, r3
 8008724:	d118      	bne.n	8008758 <_strtod_l+0x8d0>
 8008726:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <_strtod_l+0x948>)
 8008728:	459a      	cmp	sl, r3
 800872a:	d102      	bne.n	8008732 <_strtod_l+0x8aa>
 800872c:	3101      	adds	r1, #1
 800872e:	f43f adef 	beq.w	8008310 <_strtod_l+0x488>
 8008732:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <_strtod_l+0x93c>)
 8008734:	ea0a 0303 	and.w	r3, sl, r3
 8008738:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800873c:	f04f 0800 	mov.w	r8, #0
 8008740:	9b04      	ldr	r3, [sp, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1a2      	bne.n	800868c <_strtod_l+0x804>
 8008746:	e5ed      	b.n	8008324 <_strtod_l+0x49c>
 8008748:	f04f 33ff 	mov.w	r3, #4294967295
 800874c:	e7e9      	b.n	8008722 <_strtod_l+0x89a>
 800874e:	4613      	mov	r3, r2
 8008750:	e7e7      	b.n	8008722 <_strtod_l+0x89a>
 8008752:	ea53 0308 	orrs.w	r3, r3, r8
 8008756:	d08a      	beq.n	800866e <_strtod_l+0x7e6>
 8008758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800875a:	b1e3      	cbz	r3, 8008796 <_strtod_l+0x90e>
 800875c:	ea13 0f0a 	tst.w	r3, sl
 8008760:	d0ee      	beq.n	8008740 <_strtod_l+0x8b8>
 8008762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008764:	9a04      	ldr	r2, [sp, #16]
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	b1c3      	cbz	r3, 800879e <_strtod_l+0x916>
 800876c:	f7ff fb6f 	bl	8007e4e <sulp>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	ec51 0b18 	vmov	r0, r1, d8
 8008778:	f7f7 fd88 	bl	800028c <__adddf3>
 800877c:	4680      	mov	r8, r0
 800877e:	4689      	mov	r9, r1
 8008780:	e7de      	b.n	8008740 <_strtod_l+0x8b8>
 8008782:	4013      	ands	r3, r2
 8008784:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008788:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800878c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008790:	f04f 38ff 	mov.w	r8, #4294967295
 8008794:	e7d4      	b.n	8008740 <_strtod_l+0x8b8>
 8008796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008798:	ea13 0f08 	tst.w	r3, r8
 800879c:	e7e0      	b.n	8008760 <_strtod_l+0x8d8>
 800879e:	f7ff fb56 	bl	8007e4e <sulp>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	ec51 0b18 	vmov	r0, r1, d8
 80087aa:	f7f7 fd6d 	bl	8000288 <__aeabi_dsub>
 80087ae:	2200      	movs	r2, #0
 80087b0:	2300      	movs	r3, #0
 80087b2:	4680      	mov	r8, r0
 80087b4:	4689      	mov	r9, r1
 80087b6:	f7f8 f987 	bl	8000ac8 <__aeabi_dcmpeq>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d0c0      	beq.n	8008740 <_strtod_l+0x8b8>
 80087be:	e618      	b.n	80083f2 <_strtod_l+0x56a>
 80087c0:	fffffc02 	.word	0xfffffc02
 80087c4:	7ff00000 	.word	0x7ff00000
 80087c8:	39500000 	.word	0x39500000
 80087cc:	000fffff 	.word	0x000fffff
 80087d0:	7fefffff 	.word	0x7fefffff
 80087d4:	0800a378 	.word	0x0800a378
 80087d8:	4659      	mov	r1, fp
 80087da:	4628      	mov	r0, r5
 80087dc:	f7ff fac0 	bl	8007d60 <__ratio>
 80087e0:	ec57 6b10 	vmov	r6, r7, d0
 80087e4:	ee10 0a10 	vmov	r0, s0
 80087e8:	2200      	movs	r2, #0
 80087ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087ee:	4639      	mov	r1, r7
 80087f0:	f7f8 f97e 	bl	8000af0 <__aeabi_dcmple>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d071      	beq.n	80088dc <_strtod_l+0xa54>
 80087f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d17c      	bne.n	80088f8 <_strtod_l+0xa70>
 80087fe:	f1b8 0f00 	cmp.w	r8, #0
 8008802:	d15a      	bne.n	80088ba <_strtod_l+0xa32>
 8008804:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008808:	2b00      	cmp	r3, #0
 800880a:	d15d      	bne.n	80088c8 <_strtod_l+0xa40>
 800880c:	4b90      	ldr	r3, [pc, #576]	; (8008a50 <_strtod_l+0xbc8>)
 800880e:	2200      	movs	r2, #0
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f7f8 f962 	bl	8000adc <__aeabi_dcmplt>
 8008818:	2800      	cmp	r0, #0
 800881a:	d15c      	bne.n	80088d6 <_strtod_l+0xa4e>
 800881c:	4630      	mov	r0, r6
 800881e:	4639      	mov	r1, r7
 8008820:	4b8c      	ldr	r3, [pc, #560]	; (8008a54 <_strtod_l+0xbcc>)
 8008822:	2200      	movs	r2, #0
 8008824:	f7f7 fee8 	bl	80005f8 <__aeabi_dmul>
 8008828:	4606      	mov	r6, r0
 800882a:	460f      	mov	r7, r1
 800882c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008830:	9606      	str	r6, [sp, #24]
 8008832:	9307      	str	r3, [sp, #28]
 8008834:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008838:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800883c:	4b86      	ldr	r3, [pc, #536]	; (8008a58 <_strtod_l+0xbd0>)
 800883e:	ea0a 0303 	and.w	r3, sl, r3
 8008842:	930d      	str	r3, [sp, #52]	; 0x34
 8008844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008846:	4b85      	ldr	r3, [pc, #532]	; (8008a5c <_strtod_l+0xbd4>)
 8008848:	429a      	cmp	r2, r3
 800884a:	f040 8090 	bne.w	800896e <_strtod_l+0xae6>
 800884e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008852:	ec49 8b10 	vmov	d0, r8, r9
 8008856:	f7ff f9b9 	bl	8007bcc <__ulp>
 800885a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800885e:	ec51 0b10 	vmov	r0, r1, d0
 8008862:	f7f7 fec9 	bl	80005f8 <__aeabi_dmul>
 8008866:	4642      	mov	r2, r8
 8008868:	464b      	mov	r3, r9
 800886a:	f7f7 fd0f 	bl	800028c <__adddf3>
 800886e:	460b      	mov	r3, r1
 8008870:	4979      	ldr	r1, [pc, #484]	; (8008a58 <_strtod_l+0xbd0>)
 8008872:	4a7b      	ldr	r2, [pc, #492]	; (8008a60 <_strtod_l+0xbd8>)
 8008874:	4019      	ands	r1, r3
 8008876:	4291      	cmp	r1, r2
 8008878:	4680      	mov	r8, r0
 800887a:	d944      	bls.n	8008906 <_strtod_l+0xa7e>
 800887c:	ee18 2a90 	vmov	r2, s17
 8008880:	4b78      	ldr	r3, [pc, #480]	; (8008a64 <_strtod_l+0xbdc>)
 8008882:	429a      	cmp	r2, r3
 8008884:	d104      	bne.n	8008890 <_strtod_l+0xa08>
 8008886:	ee18 3a10 	vmov	r3, s16
 800888a:	3301      	adds	r3, #1
 800888c:	f43f ad40 	beq.w	8008310 <_strtod_l+0x488>
 8008890:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008a64 <_strtod_l+0xbdc>
 8008894:	f04f 38ff 	mov.w	r8, #4294967295
 8008898:	9916      	ldr	r1, [sp, #88]	; 0x58
 800889a:	4620      	mov	r0, r4
 800889c:	f7fe fe6a 	bl	8007574 <_Bfree>
 80088a0:	9905      	ldr	r1, [sp, #20]
 80088a2:	4620      	mov	r0, r4
 80088a4:	f7fe fe66 	bl	8007574 <_Bfree>
 80088a8:	4659      	mov	r1, fp
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7fe fe62 	bl	8007574 <_Bfree>
 80088b0:	4629      	mov	r1, r5
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7fe fe5e 	bl	8007574 <_Bfree>
 80088b8:	e609      	b.n	80084ce <_strtod_l+0x646>
 80088ba:	f1b8 0f01 	cmp.w	r8, #1
 80088be:	d103      	bne.n	80088c8 <_strtod_l+0xa40>
 80088c0:	f1b9 0f00 	cmp.w	r9, #0
 80088c4:	f43f ad95 	beq.w	80083f2 <_strtod_l+0x56a>
 80088c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008a20 <_strtod_l+0xb98>
 80088cc:	4f60      	ldr	r7, [pc, #384]	; (8008a50 <_strtod_l+0xbc8>)
 80088ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088d2:	2600      	movs	r6, #0
 80088d4:	e7ae      	b.n	8008834 <_strtod_l+0x9ac>
 80088d6:	4f5f      	ldr	r7, [pc, #380]	; (8008a54 <_strtod_l+0xbcc>)
 80088d8:	2600      	movs	r6, #0
 80088da:	e7a7      	b.n	800882c <_strtod_l+0x9a4>
 80088dc:	4b5d      	ldr	r3, [pc, #372]	; (8008a54 <_strtod_l+0xbcc>)
 80088de:	4630      	mov	r0, r6
 80088e0:	4639      	mov	r1, r7
 80088e2:	2200      	movs	r2, #0
 80088e4:	f7f7 fe88 	bl	80005f8 <__aeabi_dmul>
 80088e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ea:	4606      	mov	r6, r0
 80088ec:	460f      	mov	r7, r1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d09c      	beq.n	800882c <_strtod_l+0x9a4>
 80088f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80088f6:	e79d      	b.n	8008834 <_strtod_l+0x9ac>
 80088f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008a28 <_strtod_l+0xba0>
 80088fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008900:	ec57 6b17 	vmov	r6, r7, d7
 8008904:	e796      	b.n	8008834 <_strtod_l+0x9ac>
 8008906:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	46ca      	mov	sl, r9
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1c2      	bne.n	8008898 <_strtod_l+0xa10>
 8008912:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008916:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008918:	0d1b      	lsrs	r3, r3, #20
 800891a:	051b      	lsls	r3, r3, #20
 800891c:	429a      	cmp	r2, r3
 800891e:	d1bb      	bne.n	8008898 <_strtod_l+0xa10>
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	f7f8 f9c8 	bl	8000cb8 <__aeabi_d2lz>
 8008928:	f7f7 fe38 	bl	800059c <__aeabi_l2d>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4630      	mov	r0, r6
 8008932:	4639      	mov	r1, r7
 8008934:	f7f7 fca8 	bl	8000288 <__aeabi_dsub>
 8008938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800893a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800893e:	ea43 0308 	orr.w	r3, r3, r8
 8008942:	4313      	orrs	r3, r2
 8008944:	4606      	mov	r6, r0
 8008946:	460f      	mov	r7, r1
 8008948:	d054      	beq.n	80089f4 <_strtod_l+0xb6c>
 800894a:	a339      	add	r3, pc, #228	; (adr r3, 8008a30 <_strtod_l+0xba8>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f8 f8c4 	bl	8000adc <__aeabi_dcmplt>
 8008954:	2800      	cmp	r0, #0
 8008956:	f47f ace5 	bne.w	8008324 <_strtod_l+0x49c>
 800895a:	a337      	add	r3, pc, #220	; (adr r3, 8008a38 <_strtod_l+0xbb0>)
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	4630      	mov	r0, r6
 8008962:	4639      	mov	r1, r7
 8008964:	f7f8 f8d8 	bl	8000b18 <__aeabi_dcmpgt>
 8008968:	2800      	cmp	r0, #0
 800896a:	d095      	beq.n	8008898 <_strtod_l+0xa10>
 800896c:	e4da      	b.n	8008324 <_strtod_l+0x49c>
 800896e:	9b04      	ldr	r3, [sp, #16]
 8008970:	b333      	cbz	r3, 80089c0 <_strtod_l+0xb38>
 8008972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008974:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008978:	d822      	bhi.n	80089c0 <_strtod_l+0xb38>
 800897a:	a331      	add	r3, pc, #196	; (adr r3, 8008a40 <_strtod_l+0xbb8>)
 800897c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f8 f8b4 	bl	8000af0 <__aeabi_dcmple>
 8008988:	b1a0      	cbz	r0, 80089b4 <_strtod_l+0xb2c>
 800898a:	4639      	mov	r1, r7
 800898c:	4630      	mov	r0, r6
 800898e:	f7f8 f90b 	bl	8000ba8 <__aeabi_d2uiz>
 8008992:	2801      	cmp	r0, #1
 8008994:	bf38      	it	cc
 8008996:	2001      	movcc	r0, #1
 8008998:	f7f7 fdb4 	bl	8000504 <__aeabi_ui2d>
 800899c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800899e:	4606      	mov	r6, r0
 80089a0:	460f      	mov	r7, r1
 80089a2:	bb23      	cbnz	r3, 80089ee <_strtod_l+0xb66>
 80089a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089a8:	9010      	str	r0, [sp, #64]	; 0x40
 80089aa:	9311      	str	r3, [sp, #68]	; 0x44
 80089ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80089b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	930f      	str	r3, [sp, #60]	; 0x3c
 80089c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80089c4:	eeb0 0a48 	vmov.f32	s0, s16
 80089c8:	eef0 0a68 	vmov.f32	s1, s17
 80089cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80089d0:	f7ff f8fc 	bl	8007bcc <__ulp>
 80089d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80089d8:	ec53 2b10 	vmov	r2, r3, d0
 80089dc:	f7f7 fe0c 	bl	80005f8 <__aeabi_dmul>
 80089e0:	ec53 2b18 	vmov	r2, r3, d8
 80089e4:	f7f7 fc52 	bl	800028c <__adddf3>
 80089e8:	4680      	mov	r8, r0
 80089ea:	4689      	mov	r9, r1
 80089ec:	e78d      	b.n	800890a <_strtod_l+0xa82>
 80089ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80089f2:	e7db      	b.n	80089ac <_strtod_l+0xb24>
 80089f4:	a314      	add	r3, pc, #80	; (adr r3, 8008a48 <_strtod_l+0xbc0>)
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f8 f86f 	bl	8000adc <__aeabi_dcmplt>
 80089fe:	e7b3      	b.n	8008968 <_strtod_l+0xae0>
 8008a00:	2300      	movs	r3, #0
 8008a02:	930a      	str	r3, [sp, #40]	; 0x28
 8008a04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	f7ff ba7c 	b.w	8007f06 <_strtod_l+0x7e>
 8008a0e:	2a65      	cmp	r2, #101	; 0x65
 8008a10:	f43f ab75 	beq.w	80080fe <_strtod_l+0x276>
 8008a14:	2a45      	cmp	r2, #69	; 0x45
 8008a16:	f43f ab72 	beq.w	80080fe <_strtod_l+0x276>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	f7ff bbaa 	b.w	8008174 <_strtod_l+0x2ec>
 8008a20:	00000000 	.word	0x00000000
 8008a24:	bff00000 	.word	0xbff00000
 8008a28:	00000000 	.word	0x00000000
 8008a2c:	3ff00000 	.word	0x3ff00000
 8008a30:	94a03595 	.word	0x94a03595
 8008a34:	3fdfffff 	.word	0x3fdfffff
 8008a38:	35afe535 	.word	0x35afe535
 8008a3c:	3fe00000 	.word	0x3fe00000
 8008a40:	ffc00000 	.word	0xffc00000
 8008a44:	41dfffff 	.word	0x41dfffff
 8008a48:	94a03595 	.word	0x94a03595
 8008a4c:	3fcfffff 	.word	0x3fcfffff
 8008a50:	3ff00000 	.word	0x3ff00000
 8008a54:	3fe00000 	.word	0x3fe00000
 8008a58:	7ff00000 	.word	0x7ff00000
 8008a5c:	7fe00000 	.word	0x7fe00000
 8008a60:	7c9fffff 	.word	0x7c9fffff
 8008a64:	7fefffff 	.word	0x7fefffff

08008a68 <_strtod_r>:
 8008a68:	4b01      	ldr	r3, [pc, #4]	; (8008a70 <_strtod_r+0x8>)
 8008a6a:	f7ff ba0d 	b.w	8007e88 <_strtod_l>
 8008a6e:	bf00      	nop
 8008a70:	2000008c 	.word	0x2000008c

08008a74 <_strtol_l.constprop.0>:
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7a:	d001      	beq.n	8008a80 <_strtol_l.constprop.0+0xc>
 8008a7c:	2b24      	cmp	r3, #36	; 0x24
 8008a7e:	d906      	bls.n	8008a8e <_strtol_l.constprop.0+0x1a>
 8008a80:	f7fd fd8c 	bl	800659c <__errno>
 8008a84:	2316      	movs	r3, #22
 8008a86:	6003      	str	r3, [r0, #0]
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008b74 <_strtol_l.constprop.0+0x100>
 8008a92:	460d      	mov	r5, r1
 8008a94:	462e      	mov	r6, r5
 8008a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008a9e:	f017 0708 	ands.w	r7, r7, #8
 8008aa2:	d1f7      	bne.n	8008a94 <_strtol_l.constprop.0+0x20>
 8008aa4:	2c2d      	cmp	r4, #45	; 0x2d
 8008aa6:	d132      	bne.n	8008b0e <_strtol_l.constprop.0+0x9a>
 8008aa8:	782c      	ldrb	r4, [r5, #0]
 8008aaa:	2701      	movs	r7, #1
 8008aac:	1cb5      	adds	r5, r6, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d05b      	beq.n	8008b6a <_strtol_l.constprop.0+0xf6>
 8008ab2:	2b10      	cmp	r3, #16
 8008ab4:	d109      	bne.n	8008aca <_strtol_l.constprop.0+0x56>
 8008ab6:	2c30      	cmp	r4, #48	; 0x30
 8008ab8:	d107      	bne.n	8008aca <_strtol_l.constprop.0+0x56>
 8008aba:	782c      	ldrb	r4, [r5, #0]
 8008abc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ac0:	2c58      	cmp	r4, #88	; 0x58
 8008ac2:	d14d      	bne.n	8008b60 <_strtol_l.constprop.0+0xec>
 8008ac4:	786c      	ldrb	r4, [r5, #1]
 8008ac6:	2310      	movs	r3, #16
 8008ac8:	3502      	adds	r5, #2
 8008aca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008ace:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ad2:	f04f 0e00 	mov.w	lr, #0
 8008ad6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008ada:	4676      	mov	r6, lr
 8008adc:	fb03 8a19 	mls	sl, r3, r9, r8
 8008ae0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008ae4:	f1bc 0f09 	cmp.w	ip, #9
 8008ae8:	d816      	bhi.n	8008b18 <_strtol_l.constprop.0+0xa4>
 8008aea:	4664      	mov	r4, ip
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	dd24      	ble.n	8008b3a <_strtol_l.constprop.0+0xc6>
 8008af0:	f1be 3fff 	cmp.w	lr, #4294967295
 8008af4:	d008      	beq.n	8008b08 <_strtol_l.constprop.0+0x94>
 8008af6:	45b1      	cmp	r9, r6
 8008af8:	d31c      	bcc.n	8008b34 <_strtol_l.constprop.0+0xc0>
 8008afa:	d101      	bne.n	8008b00 <_strtol_l.constprop.0+0x8c>
 8008afc:	45a2      	cmp	sl, r4
 8008afe:	db19      	blt.n	8008b34 <_strtol_l.constprop.0+0xc0>
 8008b00:	fb06 4603 	mla	r6, r6, r3, r4
 8008b04:	f04f 0e01 	mov.w	lr, #1
 8008b08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b0c:	e7e8      	b.n	8008ae0 <_strtol_l.constprop.0+0x6c>
 8008b0e:	2c2b      	cmp	r4, #43	; 0x2b
 8008b10:	bf04      	itt	eq
 8008b12:	782c      	ldrbeq	r4, [r5, #0]
 8008b14:	1cb5      	addeq	r5, r6, #2
 8008b16:	e7ca      	b.n	8008aae <_strtol_l.constprop.0+0x3a>
 8008b18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008b1c:	f1bc 0f19 	cmp.w	ip, #25
 8008b20:	d801      	bhi.n	8008b26 <_strtol_l.constprop.0+0xb2>
 8008b22:	3c37      	subs	r4, #55	; 0x37
 8008b24:	e7e2      	b.n	8008aec <_strtol_l.constprop.0+0x78>
 8008b26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008b2a:	f1bc 0f19 	cmp.w	ip, #25
 8008b2e:	d804      	bhi.n	8008b3a <_strtol_l.constprop.0+0xc6>
 8008b30:	3c57      	subs	r4, #87	; 0x57
 8008b32:	e7db      	b.n	8008aec <_strtol_l.constprop.0+0x78>
 8008b34:	f04f 3eff 	mov.w	lr, #4294967295
 8008b38:	e7e6      	b.n	8008b08 <_strtol_l.constprop.0+0x94>
 8008b3a:	f1be 3fff 	cmp.w	lr, #4294967295
 8008b3e:	d105      	bne.n	8008b4c <_strtol_l.constprop.0+0xd8>
 8008b40:	2322      	movs	r3, #34	; 0x22
 8008b42:	6003      	str	r3, [r0, #0]
 8008b44:	4646      	mov	r6, r8
 8008b46:	b942      	cbnz	r2, 8008b5a <_strtol_l.constprop.0+0xe6>
 8008b48:	4630      	mov	r0, r6
 8008b4a:	e79e      	b.n	8008a8a <_strtol_l.constprop.0+0x16>
 8008b4c:	b107      	cbz	r7, 8008b50 <_strtol_l.constprop.0+0xdc>
 8008b4e:	4276      	negs	r6, r6
 8008b50:	2a00      	cmp	r2, #0
 8008b52:	d0f9      	beq.n	8008b48 <_strtol_l.constprop.0+0xd4>
 8008b54:	f1be 0f00 	cmp.w	lr, #0
 8008b58:	d000      	beq.n	8008b5c <_strtol_l.constprop.0+0xe8>
 8008b5a:	1e69      	subs	r1, r5, #1
 8008b5c:	6011      	str	r1, [r2, #0]
 8008b5e:	e7f3      	b.n	8008b48 <_strtol_l.constprop.0+0xd4>
 8008b60:	2430      	movs	r4, #48	; 0x30
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1b1      	bne.n	8008aca <_strtol_l.constprop.0+0x56>
 8008b66:	2308      	movs	r3, #8
 8008b68:	e7af      	b.n	8008aca <_strtol_l.constprop.0+0x56>
 8008b6a:	2c30      	cmp	r4, #48	; 0x30
 8008b6c:	d0a5      	beq.n	8008aba <_strtol_l.constprop.0+0x46>
 8008b6e:	230a      	movs	r3, #10
 8008b70:	e7ab      	b.n	8008aca <_strtol_l.constprop.0+0x56>
 8008b72:	bf00      	nop
 8008b74:	0800a3a1 	.word	0x0800a3a1

08008b78 <_strtol_r>:
 8008b78:	f7ff bf7c 	b.w	8008a74 <_strtol_l.constprop.0>

08008b7c <__ssputs_r>:
 8008b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	688e      	ldr	r6, [r1, #8]
 8008b82:	461f      	mov	r7, r3
 8008b84:	42be      	cmp	r6, r7
 8008b86:	680b      	ldr	r3, [r1, #0]
 8008b88:	4682      	mov	sl, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	4690      	mov	r8, r2
 8008b8e:	d82c      	bhi.n	8008bea <__ssputs_r+0x6e>
 8008b90:	898a      	ldrh	r2, [r1, #12]
 8008b92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b96:	d026      	beq.n	8008be6 <__ssputs_r+0x6a>
 8008b98:	6965      	ldr	r5, [r4, #20]
 8008b9a:	6909      	ldr	r1, [r1, #16]
 8008b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ba0:	eba3 0901 	sub.w	r9, r3, r1
 8008ba4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ba8:	1c7b      	adds	r3, r7, #1
 8008baa:	444b      	add	r3, r9
 8008bac:	106d      	asrs	r5, r5, #1
 8008bae:	429d      	cmp	r5, r3
 8008bb0:	bf38      	it	cc
 8008bb2:	461d      	movcc	r5, r3
 8008bb4:	0553      	lsls	r3, r2, #21
 8008bb6:	d527      	bpl.n	8008c08 <__ssputs_r+0x8c>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	f7fe fc0f 	bl	80073dc <_malloc_r>
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	b360      	cbz	r0, 8008c1c <__ssputs_r+0xa0>
 8008bc2:	6921      	ldr	r1, [r4, #16]
 8008bc4:	464a      	mov	r2, r9
 8008bc6:	f000 fbf5 	bl	80093b4 <memcpy>
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd4:	81a3      	strh	r3, [r4, #12]
 8008bd6:	6126      	str	r6, [r4, #16]
 8008bd8:	6165      	str	r5, [r4, #20]
 8008bda:	444e      	add	r6, r9
 8008bdc:	eba5 0509 	sub.w	r5, r5, r9
 8008be0:	6026      	str	r6, [r4, #0]
 8008be2:	60a5      	str	r5, [r4, #8]
 8008be4:	463e      	mov	r6, r7
 8008be6:	42be      	cmp	r6, r7
 8008be8:	d900      	bls.n	8008bec <__ssputs_r+0x70>
 8008bea:	463e      	mov	r6, r7
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	4632      	mov	r2, r6
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	f000 fba3 	bl	800933c <memmove>
 8008bf6:	68a3      	ldr	r3, [r4, #8]
 8008bf8:	1b9b      	subs	r3, r3, r6
 8008bfa:	60a3      	str	r3, [r4, #8]
 8008bfc:	6823      	ldr	r3, [r4, #0]
 8008bfe:	4433      	add	r3, r6
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	2000      	movs	r0, #0
 8008c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c08:	462a      	mov	r2, r5
 8008c0a:	f000 ff86 	bl	8009b1a <_realloc_r>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d1e0      	bne.n	8008bd6 <__ssputs_r+0x5a>
 8008c14:	6921      	ldr	r1, [r4, #16]
 8008c16:	4650      	mov	r0, sl
 8008c18:	f7fe fb6c 	bl	80072f4 <_free_r>
 8008c1c:	230c      	movs	r3, #12
 8008c1e:	f8ca 3000 	str.w	r3, [sl]
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c28:	81a3      	strh	r3, [r4, #12]
 8008c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2e:	e7e9      	b.n	8008c04 <__ssputs_r+0x88>

08008c30 <_svfiprintf_r>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	4698      	mov	r8, r3
 8008c36:	898b      	ldrh	r3, [r1, #12]
 8008c38:	061b      	lsls	r3, r3, #24
 8008c3a:	b09d      	sub	sp, #116	; 0x74
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	4614      	mov	r4, r2
 8008c42:	d50e      	bpl.n	8008c62 <_svfiprintf_r+0x32>
 8008c44:	690b      	ldr	r3, [r1, #16]
 8008c46:	b963      	cbnz	r3, 8008c62 <_svfiprintf_r+0x32>
 8008c48:	2140      	movs	r1, #64	; 0x40
 8008c4a:	f7fe fbc7 	bl	80073dc <_malloc_r>
 8008c4e:	6028      	str	r0, [r5, #0]
 8008c50:	6128      	str	r0, [r5, #16]
 8008c52:	b920      	cbnz	r0, 8008c5e <_svfiprintf_r+0x2e>
 8008c54:	230c      	movs	r3, #12
 8008c56:	603b      	str	r3, [r7, #0]
 8008c58:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5c:	e0d0      	b.n	8008e00 <_svfiprintf_r+0x1d0>
 8008c5e:	2340      	movs	r3, #64	; 0x40
 8008c60:	616b      	str	r3, [r5, #20]
 8008c62:	2300      	movs	r3, #0
 8008c64:	9309      	str	r3, [sp, #36]	; 0x24
 8008c66:	2320      	movs	r3, #32
 8008c68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c70:	2330      	movs	r3, #48	; 0x30
 8008c72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e18 <_svfiprintf_r+0x1e8>
 8008c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c7a:	f04f 0901 	mov.w	r9, #1
 8008c7e:	4623      	mov	r3, r4
 8008c80:	469a      	mov	sl, r3
 8008c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c86:	b10a      	cbz	r2, 8008c8c <_svfiprintf_r+0x5c>
 8008c88:	2a25      	cmp	r2, #37	; 0x25
 8008c8a:	d1f9      	bne.n	8008c80 <_svfiprintf_r+0x50>
 8008c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c90:	d00b      	beq.n	8008caa <_svfiprintf_r+0x7a>
 8008c92:	465b      	mov	r3, fp
 8008c94:	4622      	mov	r2, r4
 8008c96:	4629      	mov	r1, r5
 8008c98:	4638      	mov	r0, r7
 8008c9a:	f7ff ff6f 	bl	8008b7c <__ssputs_r>
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	f000 80a9 	beq.w	8008df6 <_svfiprintf_r+0x1c6>
 8008ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ca6:	445a      	add	r2, fp
 8008ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8008caa:	f89a 3000 	ldrb.w	r3, [sl]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 80a1 	beq.w	8008df6 <_svfiprintf_r+0x1c6>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cbe:	f10a 0a01 	add.w	sl, sl, #1
 8008cc2:	9304      	str	r3, [sp, #16]
 8008cc4:	9307      	str	r3, [sp, #28]
 8008cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cca:	931a      	str	r3, [sp, #104]	; 0x68
 8008ccc:	4654      	mov	r4, sl
 8008cce:	2205      	movs	r2, #5
 8008cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd4:	4850      	ldr	r0, [pc, #320]	; (8008e18 <_svfiprintf_r+0x1e8>)
 8008cd6:	f7f7 fa7b 	bl	80001d0 <memchr>
 8008cda:	9a04      	ldr	r2, [sp, #16]
 8008cdc:	b9d8      	cbnz	r0, 8008d16 <_svfiprintf_r+0xe6>
 8008cde:	06d0      	lsls	r0, r2, #27
 8008ce0:	bf44      	itt	mi
 8008ce2:	2320      	movmi	r3, #32
 8008ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ce8:	0711      	lsls	r1, r2, #28
 8008cea:	bf44      	itt	mi
 8008cec:	232b      	movmi	r3, #43	; 0x2b
 8008cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cf8:	d015      	beq.n	8008d26 <_svfiprintf_r+0xf6>
 8008cfa:	9a07      	ldr	r2, [sp, #28]
 8008cfc:	4654      	mov	r4, sl
 8008cfe:	2000      	movs	r0, #0
 8008d00:	f04f 0c0a 	mov.w	ip, #10
 8008d04:	4621      	mov	r1, r4
 8008d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d0a:	3b30      	subs	r3, #48	; 0x30
 8008d0c:	2b09      	cmp	r3, #9
 8008d0e:	d94d      	bls.n	8008dac <_svfiprintf_r+0x17c>
 8008d10:	b1b0      	cbz	r0, 8008d40 <_svfiprintf_r+0x110>
 8008d12:	9207      	str	r2, [sp, #28]
 8008d14:	e014      	b.n	8008d40 <_svfiprintf_r+0x110>
 8008d16:	eba0 0308 	sub.w	r3, r0, r8
 8008d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	9304      	str	r3, [sp, #16]
 8008d22:	46a2      	mov	sl, r4
 8008d24:	e7d2      	b.n	8008ccc <_svfiprintf_r+0x9c>
 8008d26:	9b03      	ldr	r3, [sp, #12]
 8008d28:	1d19      	adds	r1, r3, #4
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	9103      	str	r1, [sp, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bfbb      	ittet	lt
 8008d32:	425b      	neglt	r3, r3
 8008d34:	f042 0202 	orrlt.w	r2, r2, #2
 8008d38:	9307      	strge	r3, [sp, #28]
 8008d3a:	9307      	strlt	r3, [sp, #28]
 8008d3c:	bfb8      	it	lt
 8008d3e:	9204      	strlt	r2, [sp, #16]
 8008d40:	7823      	ldrb	r3, [r4, #0]
 8008d42:	2b2e      	cmp	r3, #46	; 0x2e
 8008d44:	d10c      	bne.n	8008d60 <_svfiprintf_r+0x130>
 8008d46:	7863      	ldrb	r3, [r4, #1]
 8008d48:	2b2a      	cmp	r3, #42	; 0x2a
 8008d4a:	d134      	bne.n	8008db6 <_svfiprintf_r+0x186>
 8008d4c:	9b03      	ldr	r3, [sp, #12]
 8008d4e:	1d1a      	adds	r2, r3, #4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	9203      	str	r2, [sp, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	bfb8      	it	lt
 8008d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d5c:	3402      	adds	r4, #2
 8008d5e:	9305      	str	r3, [sp, #20]
 8008d60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008e28 <_svfiprintf_r+0x1f8>
 8008d64:	7821      	ldrb	r1, [r4, #0]
 8008d66:	2203      	movs	r2, #3
 8008d68:	4650      	mov	r0, sl
 8008d6a:	f7f7 fa31 	bl	80001d0 <memchr>
 8008d6e:	b138      	cbz	r0, 8008d80 <_svfiprintf_r+0x150>
 8008d70:	9b04      	ldr	r3, [sp, #16]
 8008d72:	eba0 000a 	sub.w	r0, r0, sl
 8008d76:	2240      	movs	r2, #64	; 0x40
 8008d78:	4082      	lsls	r2, r0
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	3401      	adds	r4, #1
 8008d7e:	9304      	str	r3, [sp, #16]
 8008d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d84:	4825      	ldr	r0, [pc, #148]	; (8008e1c <_svfiprintf_r+0x1ec>)
 8008d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d8a:	2206      	movs	r2, #6
 8008d8c:	f7f7 fa20 	bl	80001d0 <memchr>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d038      	beq.n	8008e06 <_svfiprintf_r+0x1d6>
 8008d94:	4b22      	ldr	r3, [pc, #136]	; (8008e20 <_svfiprintf_r+0x1f0>)
 8008d96:	bb1b      	cbnz	r3, 8008de0 <_svfiprintf_r+0x1b0>
 8008d98:	9b03      	ldr	r3, [sp, #12]
 8008d9a:	3307      	adds	r3, #7
 8008d9c:	f023 0307 	bic.w	r3, r3, #7
 8008da0:	3308      	adds	r3, #8
 8008da2:	9303      	str	r3, [sp, #12]
 8008da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da6:	4433      	add	r3, r6
 8008da8:	9309      	str	r3, [sp, #36]	; 0x24
 8008daa:	e768      	b.n	8008c7e <_svfiprintf_r+0x4e>
 8008dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008db0:	460c      	mov	r4, r1
 8008db2:	2001      	movs	r0, #1
 8008db4:	e7a6      	b.n	8008d04 <_svfiprintf_r+0xd4>
 8008db6:	2300      	movs	r3, #0
 8008db8:	3401      	adds	r4, #1
 8008dba:	9305      	str	r3, [sp, #20]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	f04f 0c0a 	mov.w	ip, #10
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dc8:	3a30      	subs	r2, #48	; 0x30
 8008dca:	2a09      	cmp	r2, #9
 8008dcc:	d903      	bls.n	8008dd6 <_svfiprintf_r+0x1a6>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0c6      	beq.n	8008d60 <_svfiprintf_r+0x130>
 8008dd2:	9105      	str	r1, [sp, #20]
 8008dd4:	e7c4      	b.n	8008d60 <_svfiprintf_r+0x130>
 8008dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dda:	4604      	mov	r4, r0
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e7f0      	b.n	8008dc2 <_svfiprintf_r+0x192>
 8008de0:	ab03      	add	r3, sp, #12
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	462a      	mov	r2, r5
 8008de6:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <_svfiprintf_r+0x1f4>)
 8008de8:	a904      	add	r1, sp, #16
 8008dea:	4638      	mov	r0, r7
 8008dec:	f7fc fc88 	bl	8005700 <_printf_float>
 8008df0:	1c42      	adds	r2, r0, #1
 8008df2:	4606      	mov	r6, r0
 8008df4:	d1d6      	bne.n	8008da4 <_svfiprintf_r+0x174>
 8008df6:	89ab      	ldrh	r3, [r5, #12]
 8008df8:	065b      	lsls	r3, r3, #25
 8008dfa:	f53f af2d 	bmi.w	8008c58 <_svfiprintf_r+0x28>
 8008dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e00:	b01d      	add	sp, #116	; 0x74
 8008e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	ab03      	add	r3, sp, #12
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <_svfiprintf_r+0x1f4>)
 8008e0e:	a904      	add	r1, sp, #16
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7fc ff19 	bl	8005c48 <_printf_i>
 8008e16:	e7eb      	b.n	8008df0 <_svfiprintf_r+0x1c0>
 8008e18:	0800a4a1 	.word	0x0800a4a1
 8008e1c:	0800a4ab 	.word	0x0800a4ab
 8008e20:	08005701 	.word	0x08005701
 8008e24:	08008b7d 	.word	0x08008b7d
 8008e28:	0800a4a7 	.word	0x0800a4a7

08008e2c <__sfputc_r>:
 8008e2c:	6893      	ldr	r3, [r2, #8]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	b410      	push	{r4}
 8008e34:	6093      	str	r3, [r2, #8]
 8008e36:	da08      	bge.n	8008e4a <__sfputc_r+0x1e>
 8008e38:	6994      	ldr	r4, [r2, #24]
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	db01      	blt.n	8008e42 <__sfputc_r+0x16>
 8008e3e:	290a      	cmp	r1, #10
 8008e40:	d103      	bne.n	8008e4a <__sfputc_r+0x1e>
 8008e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e46:	f000 b9e3 	b.w	8009210 <__swbuf_r>
 8008e4a:	6813      	ldr	r3, [r2, #0]
 8008e4c:	1c58      	adds	r0, r3, #1
 8008e4e:	6010      	str	r0, [r2, #0]
 8008e50:	7019      	strb	r1, [r3, #0]
 8008e52:	4608      	mov	r0, r1
 8008e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <__sfputs_r>:
 8008e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	460f      	mov	r7, r1
 8008e60:	4614      	mov	r4, r2
 8008e62:	18d5      	adds	r5, r2, r3
 8008e64:	42ac      	cmp	r4, r5
 8008e66:	d101      	bne.n	8008e6c <__sfputs_r+0x12>
 8008e68:	2000      	movs	r0, #0
 8008e6a:	e007      	b.n	8008e7c <__sfputs_r+0x22>
 8008e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e70:	463a      	mov	r2, r7
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7ff ffda 	bl	8008e2c <__sfputc_r>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d1f3      	bne.n	8008e64 <__sfputs_r+0xa>
 8008e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e80 <_vfiprintf_r>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	460d      	mov	r5, r1
 8008e86:	b09d      	sub	sp, #116	; 0x74
 8008e88:	4614      	mov	r4, r2
 8008e8a:	4698      	mov	r8, r3
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	b118      	cbz	r0, 8008e98 <_vfiprintf_r+0x18>
 8008e90:	6a03      	ldr	r3, [r0, #32]
 8008e92:	b90b      	cbnz	r3, 8008e98 <_vfiprintf_r+0x18>
 8008e94:	f7fd fa84 	bl	80063a0 <__sinit>
 8008e98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e9a:	07d9      	lsls	r1, r3, #31
 8008e9c:	d405      	bmi.n	8008eaa <_vfiprintf_r+0x2a>
 8008e9e:	89ab      	ldrh	r3, [r5, #12]
 8008ea0:	059a      	lsls	r2, r3, #22
 8008ea2:	d402      	bmi.n	8008eaa <_vfiprintf_r+0x2a>
 8008ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ea6:	f7fd fba3 	bl	80065f0 <__retarget_lock_acquire_recursive>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	071b      	lsls	r3, r3, #28
 8008eae:	d501      	bpl.n	8008eb4 <_vfiprintf_r+0x34>
 8008eb0:	692b      	ldr	r3, [r5, #16]
 8008eb2:	b99b      	cbnz	r3, 8008edc <_vfiprintf_r+0x5c>
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f000 f9e8 	bl	800928c <__swsetup_r>
 8008ebc:	b170      	cbz	r0, 8008edc <_vfiprintf_r+0x5c>
 8008ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec0:	07dc      	lsls	r4, r3, #31
 8008ec2:	d504      	bpl.n	8008ece <_vfiprintf_r+0x4e>
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec8:	b01d      	add	sp, #116	; 0x74
 8008eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	0598      	lsls	r0, r3, #22
 8008ed2:	d4f7      	bmi.n	8008ec4 <_vfiprintf_r+0x44>
 8008ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ed6:	f7fd fb8c 	bl	80065f2 <__retarget_lock_release_recursive>
 8008eda:	e7f3      	b.n	8008ec4 <_vfiprintf_r+0x44>
 8008edc:	2300      	movs	r3, #0
 8008ede:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eea:	2330      	movs	r3, #48	; 0x30
 8008eec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090a0 <_vfiprintf_r+0x220>
 8008ef0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ef4:	f04f 0901 	mov.w	r9, #1
 8008ef8:	4623      	mov	r3, r4
 8008efa:	469a      	mov	sl, r3
 8008efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f00:	b10a      	cbz	r2, 8008f06 <_vfiprintf_r+0x86>
 8008f02:	2a25      	cmp	r2, #37	; 0x25
 8008f04:	d1f9      	bne.n	8008efa <_vfiprintf_r+0x7a>
 8008f06:	ebba 0b04 	subs.w	fp, sl, r4
 8008f0a:	d00b      	beq.n	8008f24 <_vfiprintf_r+0xa4>
 8008f0c:	465b      	mov	r3, fp
 8008f0e:	4622      	mov	r2, r4
 8008f10:	4629      	mov	r1, r5
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7ff ffa1 	bl	8008e5a <__sfputs_r>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	f000 80a9 	beq.w	8009070 <_vfiprintf_r+0x1f0>
 8008f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f20:	445a      	add	r2, fp
 8008f22:	9209      	str	r2, [sp, #36]	; 0x24
 8008f24:	f89a 3000 	ldrb.w	r3, [sl]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 80a1 	beq.w	8009070 <_vfiprintf_r+0x1f0>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f04f 32ff 	mov.w	r2, #4294967295
 8008f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f38:	f10a 0a01 	add.w	sl, sl, #1
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	9307      	str	r3, [sp, #28]
 8008f40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f44:	931a      	str	r3, [sp, #104]	; 0x68
 8008f46:	4654      	mov	r4, sl
 8008f48:	2205      	movs	r2, #5
 8008f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4e:	4854      	ldr	r0, [pc, #336]	; (80090a0 <_vfiprintf_r+0x220>)
 8008f50:	f7f7 f93e 	bl	80001d0 <memchr>
 8008f54:	9a04      	ldr	r2, [sp, #16]
 8008f56:	b9d8      	cbnz	r0, 8008f90 <_vfiprintf_r+0x110>
 8008f58:	06d1      	lsls	r1, r2, #27
 8008f5a:	bf44      	itt	mi
 8008f5c:	2320      	movmi	r3, #32
 8008f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f62:	0713      	lsls	r3, r2, #28
 8008f64:	bf44      	itt	mi
 8008f66:	232b      	movmi	r3, #43	; 0x2b
 8008f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f70:	2b2a      	cmp	r3, #42	; 0x2a
 8008f72:	d015      	beq.n	8008fa0 <_vfiprintf_r+0x120>
 8008f74:	9a07      	ldr	r2, [sp, #28]
 8008f76:	4654      	mov	r4, sl
 8008f78:	2000      	movs	r0, #0
 8008f7a:	f04f 0c0a 	mov.w	ip, #10
 8008f7e:	4621      	mov	r1, r4
 8008f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f84:	3b30      	subs	r3, #48	; 0x30
 8008f86:	2b09      	cmp	r3, #9
 8008f88:	d94d      	bls.n	8009026 <_vfiprintf_r+0x1a6>
 8008f8a:	b1b0      	cbz	r0, 8008fba <_vfiprintf_r+0x13a>
 8008f8c:	9207      	str	r2, [sp, #28]
 8008f8e:	e014      	b.n	8008fba <_vfiprintf_r+0x13a>
 8008f90:	eba0 0308 	sub.w	r3, r0, r8
 8008f94:	fa09 f303 	lsl.w	r3, r9, r3
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	46a2      	mov	sl, r4
 8008f9e:	e7d2      	b.n	8008f46 <_vfiprintf_r+0xc6>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	1d19      	adds	r1, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	9103      	str	r1, [sp, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bfbb      	ittet	lt
 8008fac:	425b      	neglt	r3, r3
 8008fae:	f042 0202 	orrlt.w	r2, r2, #2
 8008fb2:	9307      	strge	r3, [sp, #28]
 8008fb4:	9307      	strlt	r3, [sp, #28]
 8008fb6:	bfb8      	it	lt
 8008fb8:	9204      	strlt	r2, [sp, #16]
 8008fba:	7823      	ldrb	r3, [r4, #0]
 8008fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8008fbe:	d10c      	bne.n	8008fda <_vfiprintf_r+0x15a>
 8008fc0:	7863      	ldrb	r3, [r4, #1]
 8008fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc4:	d134      	bne.n	8009030 <_vfiprintf_r+0x1b0>
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	1d1a      	adds	r2, r3, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	9203      	str	r2, [sp, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bfb8      	it	lt
 8008fd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fd6:	3402      	adds	r4, #2
 8008fd8:	9305      	str	r3, [sp, #20]
 8008fda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090b0 <_vfiprintf_r+0x230>
 8008fde:	7821      	ldrb	r1, [r4, #0]
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	f7f7 f8f4 	bl	80001d0 <memchr>
 8008fe8:	b138      	cbz	r0, 8008ffa <_vfiprintf_r+0x17a>
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	eba0 000a 	sub.w	r0, r0, sl
 8008ff0:	2240      	movs	r2, #64	; 0x40
 8008ff2:	4082      	lsls	r2, r0
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	3401      	adds	r4, #1
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffe:	4829      	ldr	r0, [pc, #164]	; (80090a4 <_vfiprintf_r+0x224>)
 8009000:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009004:	2206      	movs	r2, #6
 8009006:	f7f7 f8e3 	bl	80001d0 <memchr>
 800900a:	2800      	cmp	r0, #0
 800900c:	d03f      	beq.n	800908e <_vfiprintf_r+0x20e>
 800900e:	4b26      	ldr	r3, [pc, #152]	; (80090a8 <_vfiprintf_r+0x228>)
 8009010:	bb1b      	cbnz	r3, 800905a <_vfiprintf_r+0x1da>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	3307      	adds	r3, #7
 8009016:	f023 0307 	bic.w	r3, r3, #7
 800901a:	3308      	adds	r3, #8
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009020:	443b      	add	r3, r7
 8009022:	9309      	str	r3, [sp, #36]	; 0x24
 8009024:	e768      	b.n	8008ef8 <_vfiprintf_r+0x78>
 8009026:	fb0c 3202 	mla	r2, ip, r2, r3
 800902a:	460c      	mov	r4, r1
 800902c:	2001      	movs	r0, #1
 800902e:	e7a6      	b.n	8008f7e <_vfiprintf_r+0xfe>
 8009030:	2300      	movs	r3, #0
 8009032:	3401      	adds	r4, #1
 8009034:	9305      	str	r3, [sp, #20]
 8009036:	4619      	mov	r1, r3
 8009038:	f04f 0c0a 	mov.w	ip, #10
 800903c:	4620      	mov	r0, r4
 800903e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009042:	3a30      	subs	r2, #48	; 0x30
 8009044:	2a09      	cmp	r2, #9
 8009046:	d903      	bls.n	8009050 <_vfiprintf_r+0x1d0>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0c6      	beq.n	8008fda <_vfiprintf_r+0x15a>
 800904c:	9105      	str	r1, [sp, #20]
 800904e:	e7c4      	b.n	8008fda <_vfiprintf_r+0x15a>
 8009050:	fb0c 2101 	mla	r1, ip, r1, r2
 8009054:	4604      	mov	r4, r0
 8009056:	2301      	movs	r3, #1
 8009058:	e7f0      	b.n	800903c <_vfiprintf_r+0x1bc>
 800905a:	ab03      	add	r3, sp, #12
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	462a      	mov	r2, r5
 8009060:	4b12      	ldr	r3, [pc, #72]	; (80090ac <_vfiprintf_r+0x22c>)
 8009062:	a904      	add	r1, sp, #16
 8009064:	4630      	mov	r0, r6
 8009066:	f7fc fb4b 	bl	8005700 <_printf_float>
 800906a:	4607      	mov	r7, r0
 800906c:	1c78      	adds	r0, r7, #1
 800906e:	d1d6      	bne.n	800901e <_vfiprintf_r+0x19e>
 8009070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009072:	07d9      	lsls	r1, r3, #31
 8009074:	d405      	bmi.n	8009082 <_vfiprintf_r+0x202>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	059a      	lsls	r2, r3, #22
 800907a:	d402      	bmi.n	8009082 <_vfiprintf_r+0x202>
 800907c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800907e:	f7fd fab8 	bl	80065f2 <__retarget_lock_release_recursive>
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	065b      	lsls	r3, r3, #25
 8009086:	f53f af1d 	bmi.w	8008ec4 <_vfiprintf_r+0x44>
 800908a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800908c:	e71c      	b.n	8008ec8 <_vfiprintf_r+0x48>
 800908e:	ab03      	add	r3, sp, #12
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	462a      	mov	r2, r5
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <_vfiprintf_r+0x22c>)
 8009096:	a904      	add	r1, sp, #16
 8009098:	4630      	mov	r0, r6
 800909a:	f7fc fdd5 	bl	8005c48 <_printf_i>
 800909e:	e7e4      	b.n	800906a <_vfiprintf_r+0x1ea>
 80090a0:	0800a4a1 	.word	0x0800a4a1
 80090a4:	0800a4ab 	.word	0x0800a4ab
 80090a8:	08005701 	.word	0x08005701
 80090ac:	08008e5b 	.word	0x08008e5b
 80090b0:	0800a4a7 	.word	0x0800a4a7

080090b4 <__sflush_r>:
 80090b4:	898a      	ldrh	r2, [r1, #12]
 80090b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	4605      	mov	r5, r0
 80090bc:	0710      	lsls	r0, r2, #28
 80090be:	460c      	mov	r4, r1
 80090c0:	d458      	bmi.n	8009174 <__sflush_r+0xc0>
 80090c2:	684b      	ldr	r3, [r1, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dc05      	bgt.n	80090d4 <__sflush_r+0x20>
 80090c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dc02      	bgt.n	80090d4 <__sflush_r+0x20>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	d0f9      	beq.n	80090ce <__sflush_r+0x1a>
 80090da:	2300      	movs	r3, #0
 80090dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090e0:	682f      	ldr	r7, [r5, #0]
 80090e2:	6a21      	ldr	r1, [r4, #32]
 80090e4:	602b      	str	r3, [r5, #0]
 80090e6:	d032      	beq.n	800914e <__sflush_r+0x9a>
 80090e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	075a      	lsls	r2, r3, #29
 80090ee:	d505      	bpl.n	80090fc <__sflush_r+0x48>
 80090f0:	6863      	ldr	r3, [r4, #4]
 80090f2:	1ac0      	subs	r0, r0, r3
 80090f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090f6:	b10b      	cbz	r3, 80090fc <__sflush_r+0x48>
 80090f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090fa:	1ac0      	subs	r0, r0, r3
 80090fc:	2300      	movs	r3, #0
 80090fe:	4602      	mov	r2, r0
 8009100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009102:	6a21      	ldr	r1, [r4, #32]
 8009104:	4628      	mov	r0, r5
 8009106:	47b0      	blx	r6
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	d106      	bne.n	800911c <__sflush_r+0x68>
 800910e:	6829      	ldr	r1, [r5, #0]
 8009110:	291d      	cmp	r1, #29
 8009112:	d82b      	bhi.n	800916c <__sflush_r+0xb8>
 8009114:	4a29      	ldr	r2, [pc, #164]	; (80091bc <__sflush_r+0x108>)
 8009116:	410a      	asrs	r2, r1
 8009118:	07d6      	lsls	r6, r2, #31
 800911a:	d427      	bmi.n	800916c <__sflush_r+0xb8>
 800911c:	2200      	movs	r2, #0
 800911e:	6062      	str	r2, [r4, #4]
 8009120:	04d9      	lsls	r1, r3, #19
 8009122:	6922      	ldr	r2, [r4, #16]
 8009124:	6022      	str	r2, [r4, #0]
 8009126:	d504      	bpl.n	8009132 <__sflush_r+0x7e>
 8009128:	1c42      	adds	r2, r0, #1
 800912a:	d101      	bne.n	8009130 <__sflush_r+0x7c>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b903      	cbnz	r3, 8009132 <__sflush_r+0x7e>
 8009130:	6560      	str	r0, [r4, #84]	; 0x54
 8009132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009134:	602f      	str	r7, [r5, #0]
 8009136:	2900      	cmp	r1, #0
 8009138:	d0c9      	beq.n	80090ce <__sflush_r+0x1a>
 800913a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800913e:	4299      	cmp	r1, r3
 8009140:	d002      	beq.n	8009148 <__sflush_r+0x94>
 8009142:	4628      	mov	r0, r5
 8009144:	f7fe f8d6 	bl	80072f4 <_free_r>
 8009148:	2000      	movs	r0, #0
 800914a:	6360      	str	r0, [r4, #52]	; 0x34
 800914c:	e7c0      	b.n	80090d0 <__sflush_r+0x1c>
 800914e:	2301      	movs	r3, #1
 8009150:	4628      	mov	r0, r5
 8009152:	47b0      	blx	r6
 8009154:	1c41      	adds	r1, r0, #1
 8009156:	d1c8      	bne.n	80090ea <__sflush_r+0x36>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0c5      	beq.n	80090ea <__sflush_r+0x36>
 800915e:	2b1d      	cmp	r3, #29
 8009160:	d001      	beq.n	8009166 <__sflush_r+0xb2>
 8009162:	2b16      	cmp	r3, #22
 8009164:	d101      	bne.n	800916a <__sflush_r+0xb6>
 8009166:	602f      	str	r7, [r5, #0]
 8009168:	e7b1      	b.n	80090ce <__sflush_r+0x1a>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	e7ad      	b.n	80090d0 <__sflush_r+0x1c>
 8009174:	690f      	ldr	r7, [r1, #16]
 8009176:	2f00      	cmp	r7, #0
 8009178:	d0a9      	beq.n	80090ce <__sflush_r+0x1a>
 800917a:	0793      	lsls	r3, r2, #30
 800917c:	680e      	ldr	r6, [r1, #0]
 800917e:	bf08      	it	eq
 8009180:	694b      	ldreq	r3, [r1, #20]
 8009182:	600f      	str	r7, [r1, #0]
 8009184:	bf18      	it	ne
 8009186:	2300      	movne	r3, #0
 8009188:	eba6 0807 	sub.w	r8, r6, r7
 800918c:	608b      	str	r3, [r1, #8]
 800918e:	f1b8 0f00 	cmp.w	r8, #0
 8009192:	dd9c      	ble.n	80090ce <__sflush_r+0x1a>
 8009194:	6a21      	ldr	r1, [r4, #32]
 8009196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009198:	4643      	mov	r3, r8
 800919a:	463a      	mov	r2, r7
 800919c:	4628      	mov	r0, r5
 800919e:	47b0      	blx	r6
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dc06      	bgt.n	80091b2 <__sflush_r+0xfe>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e78e      	b.n	80090d0 <__sflush_r+0x1c>
 80091b2:	4407      	add	r7, r0
 80091b4:	eba8 0800 	sub.w	r8, r8, r0
 80091b8:	e7e9      	b.n	800918e <__sflush_r+0xda>
 80091ba:	bf00      	nop
 80091bc:	dfbffffe 	.word	0xdfbffffe

080091c0 <_fflush_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	b913      	cbnz	r3, 80091d0 <_fflush_r+0x10>
 80091ca:	2500      	movs	r5, #0
 80091cc:	4628      	mov	r0, r5
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	b118      	cbz	r0, 80091da <_fflush_r+0x1a>
 80091d2:	6a03      	ldr	r3, [r0, #32]
 80091d4:	b90b      	cbnz	r3, 80091da <_fflush_r+0x1a>
 80091d6:	f7fd f8e3 	bl	80063a0 <__sinit>
 80091da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0f3      	beq.n	80091ca <_fflush_r+0xa>
 80091e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091e4:	07d0      	lsls	r0, r2, #31
 80091e6:	d404      	bmi.n	80091f2 <_fflush_r+0x32>
 80091e8:	0599      	lsls	r1, r3, #22
 80091ea:	d402      	bmi.n	80091f2 <_fflush_r+0x32>
 80091ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ee:	f7fd f9ff 	bl	80065f0 <__retarget_lock_acquire_recursive>
 80091f2:	4628      	mov	r0, r5
 80091f4:	4621      	mov	r1, r4
 80091f6:	f7ff ff5d 	bl	80090b4 <__sflush_r>
 80091fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091fc:	07da      	lsls	r2, r3, #31
 80091fe:	4605      	mov	r5, r0
 8009200:	d4e4      	bmi.n	80091cc <_fflush_r+0xc>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	059b      	lsls	r3, r3, #22
 8009206:	d4e1      	bmi.n	80091cc <_fflush_r+0xc>
 8009208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800920a:	f7fd f9f2 	bl	80065f2 <__retarget_lock_release_recursive>
 800920e:	e7dd      	b.n	80091cc <_fflush_r+0xc>

08009210 <__swbuf_r>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	460e      	mov	r6, r1
 8009214:	4614      	mov	r4, r2
 8009216:	4605      	mov	r5, r0
 8009218:	b118      	cbz	r0, 8009222 <__swbuf_r+0x12>
 800921a:	6a03      	ldr	r3, [r0, #32]
 800921c:	b90b      	cbnz	r3, 8009222 <__swbuf_r+0x12>
 800921e:	f7fd f8bf 	bl	80063a0 <__sinit>
 8009222:	69a3      	ldr	r3, [r4, #24]
 8009224:	60a3      	str	r3, [r4, #8]
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	071a      	lsls	r2, r3, #28
 800922a:	d525      	bpl.n	8009278 <__swbuf_r+0x68>
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	b31b      	cbz	r3, 8009278 <__swbuf_r+0x68>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	6922      	ldr	r2, [r4, #16]
 8009234:	1a98      	subs	r0, r3, r2
 8009236:	6963      	ldr	r3, [r4, #20]
 8009238:	b2f6      	uxtb	r6, r6
 800923a:	4283      	cmp	r3, r0
 800923c:	4637      	mov	r7, r6
 800923e:	dc04      	bgt.n	800924a <__swbuf_r+0x3a>
 8009240:	4621      	mov	r1, r4
 8009242:	4628      	mov	r0, r5
 8009244:	f7ff ffbc 	bl	80091c0 <_fflush_r>
 8009248:	b9e0      	cbnz	r0, 8009284 <__swbuf_r+0x74>
 800924a:	68a3      	ldr	r3, [r4, #8]
 800924c:	3b01      	subs	r3, #1
 800924e:	60a3      	str	r3, [r4, #8]
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	6022      	str	r2, [r4, #0]
 8009256:	701e      	strb	r6, [r3, #0]
 8009258:	6962      	ldr	r2, [r4, #20]
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	429a      	cmp	r2, r3
 800925e:	d004      	beq.n	800926a <__swbuf_r+0x5a>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	07db      	lsls	r3, r3, #31
 8009264:	d506      	bpl.n	8009274 <__swbuf_r+0x64>
 8009266:	2e0a      	cmp	r6, #10
 8009268:	d104      	bne.n	8009274 <__swbuf_r+0x64>
 800926a:	4621      	mov	r1, r4
 800926c:	4628      	mov	r0, r5
 800926e:	f7ff ffa7 	bl	80091c0 <_fflush_r>
 8009272:	b938      	cbnz	r0, 8009284 <__swbuf_r+0x74>
 8009274:	4638      	mov	r0, r7
 8009276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009278:	4621      	mov	r1, r4
 800927a:	4628      	mov	r0, r5
 800927c:	f000 f806 	bl	800928c <__swsetup_r>
 8009280:	2800      	cmp	r0, #0
 8009282:	d0d5      	beq.n	8009230 <__swbuf_r+0x20>
 8009284:	f04f 37ff 	mov.w	r7, #4294967295
 8009288:	e7f4      	b.n	8009274 <__swbuf_r+0x64>
	...

0800928c <__swsetup_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4b2a      	ldr	r3, [pc, #168]	; (8009338 <__swsetup_r+0xac>)
 8009290:	4605      	mov	r5, r0
 8009292:	6818      	ldr	r0, [r3, #0]
 8009294:	460c      	mov	r4, r1
 8009296:	b118      	cbz	r0, 80092a0 <__swsetup_r+0x14>
 8009298:	6a03      	ldr	r3, [r0, #32]
 800929a:	b90b      	cbnz	r3, 80092a0 <__swsetup_r+0x14>
 800929c:	f7fd f880 	bl	80063a0 <__sinit>
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092a6:	0718      	lsls	r0, r3, #28
 80092a8:	d422      	bmi.n	80092f0 <__swsetup_r+0x64>
 80092aa:	06d9      	lsls	r1, r3, #27
 80092ac:	d407      	bmi.n	80092be <__swsetup_r+0x32>
 80092ae:	2309      	movs	r3, #9
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	e034      	b.n	8009328 <__swsetup_r+0x9c>
 80092be:	0758      	lsls	r0, r3, #29
 80092c0:	d512      	bpl.n	80092e8 <__swsetup_r+0x5c>
 80092c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092c4:	b141      	cbz	r1, 80092d8 <__swsetup_r+0x4c>
 80092c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092ca:	4299      	cmp	r1, r3
 80092cc:	d002      	beq.n	80092d4 <__swsetup_r+0x48>
 80092ce:	4628      	mov	r0, r5
 80092d0:	f7fe f810 	bl	80072f4 <_free_r>
 80092d4:	2300      	movs	r3, #0
 80092d6:	6363      	str	r3, [r4, #52]	; 0x34
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	2300      	movs	r3, #0
 80092e2:	6063      	str	r3, [r4, #4]
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	f043 0308 	orr.w	r3, r3, #8
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	b94b      	cbnz	r3, 8009308 <__swsetup_r+0x7c>
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092fe:	d003      	beq.n	8009308 <__swsetup_r+0x7c>
 8009300:	4621      	mov	r1, r4
 8009302:	4628      	mov	r0, r5
 8009304:	f000 fc7e 	bl	8009c04 <__smakebuf_r>
 8009308:	89a0      	ldrh	r0, [r4, #12]
 800930a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800930e:	f010 0301 	ands.w	r3, r0, #1
 8009312:	d00a      	beq.n	800932a <__swsetup_r+0x9e>
 8009314:	2300      	movs	r3, #0
 8009316:	60a3      	str	r3, [r4, #8]
 8009318:	6963      	ldr	r3, [r4, #20]
 800931a:	425b      	negs	r3, r3
 800931c:	61a3      	str	r3, [r4, #24]
 800931e:	6923      	ldr	r3, [r4, #16]
 8009320:	b943      	cbnz	r3, 8009334 <__swsetup_r+0xa8>
 8009322:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009326:	d1c4      	bne.n	80092b2 <__swsetup_r+0x26>
 8009328:	bd38      	pop	{r3, r4, r5, pc}
 800932a:	0781      	lsls	r1, r0, #30
 800932c:	bf58      	it	pl
 800932e:	6963      	ldrpl	r3, [r4, #20]
 8009330:	60a3      	str	r3, [r4, #8]
 8009332:	e7f4      	b.n	800931e <__swsetup_r+0x92>
 8009334:	2000      	movs	r0, #0
 8009336:	e7f7      	b.n	8009328 <__swsetup_r+0x9c>
 8009338:	20000088 	.word	0x20000088

0800933c <memmove>:
 800933c:	4288      	cmp	r0, r1
 800933e:	b510      	push	{r4, lr}
 8009340:	eb01 0402 	add.w	r4, r1, r2
 8009344:	d902      	bls.n	800934c <memmove+0x10>
 8009346:	4284      	cmp	r4, r0
 8009348:	4623      	mov	r3, r4
 800934a:	d807      	bhi.n	800935c <memmove+0x20>
 800934c:	1e43      	subs	r3, r0, #1
 800934e:	42a1      	cmp	r1, r4
 8009350:	d008      	beq.n	8009364 <memmove+0x28>
 8009352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800935a:	e7f8      	b.n	800934e <memmove+0x12>
 800935c:	4402      	add	r2, r0
 800935e:	4601      	mov	r1, r0
 8009360:	428a      	cmp	r2, r1
 8009362:	d100      	bne.n	8009366 <memmove+0x2a>
 8009364:	bd10      	pop	{r4, pc}
 8009366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800936a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800936e:	e7f7      	b.n	8009360 <memmove+0x24>

08009370 <strncmp>:
 8009370:	b510      	push	{r4, lr}
 8009372:	b16a      	cbz	r2, 8009390 <strncmp+0x20>
 8009374:	3901      	subs	r1, #1
 8009376:	1884      	adds	r4, r0, r2
 8009378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800937c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009380:	429a      	cmp	r2, r3
 8009382:	d103      	bne.n	800938c <strncmp+0x1c>
 8009384:	42a0      	cmp	r0, r4
 8009386:	d001      	beq.n	800938c <strncmp+0x1c>
 8009388:	2a00      	cmp	r2, #0
 800938a:	d1f5      	bne.n	8009378 <strncmp+0x8>
 800938c:	1ad0      	subs	r0, r2, r3
 800938e:	bd10      	pop	{r4, pc}
 8009390:	4610      	mov	r0, r2
 8009392:	e7fc      	b.n	800938e <strncmp+0x1e>

08009394 <_sbrk_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d06      	ldr	r5, [pc, #24]	; (80093b0 <_sbrk_r+0x1c>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	602b      	str	r3, [r5, #0]
 80093a0:	f7f8 ffee 	bl	8002380 <_sbrk>
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d102      	bne.n	80093ae <_sbrk_r+0x1a>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	b103      	cbz	r3, 80093ae <_sbrk_r+0x1a>
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	20000480 	.word	0x20000480

080093b4 <memcpy>:
 80093b4:	440a      	add	r2, r1
 80093b6:	4291      	cmp	r1, r2
 80093b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80093bc:	d100      	bne.n	80093c0 <memcpy+0xc>
 80093be:	4770      	bx	lr
 80093c0:	b510      	push	{r4, lr}
 80093c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ca:	4291      	cmp	r1, r2
 80093cc:	d1f9      	bne.n	80093c2 <memcpy+0xe>
 80093ce:	bd10      	pop	{r4, pc}

080093d0 <nan>:
 80093d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80093d8 <nan+0x8>
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	00000000 	.word	0x00000000
 80093dc:	7ff80000 	.word	0x7ff80000

080093e0 <__assert_func>:
 80093e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093e2:	4614      	mov	r4, r2
 80093e4:	461a      	mov	r2, r3
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <__assert_func+0x2c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4605      	mov	r5, r0
 80093ec:	68d8      	ldr	r0, [r3, #12]
 80093ee:	b14c      	cbz	r4, 8009404 <__assert_func+0x24>
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <__assert_func+0x30>)
 80093f2:	9100      	str	r1, [sp, #0]
 80093f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093f8:	4906      	ldr	r1, [pc, #24]	; (8009414 <__assert_func+0x34>)
 80093fa:	462b      	mov	r3, r5
 80093fc:	f000 fbca 	bl	8009b94 <fiprintf>
 8009400:	f000 fc5e 	bl	8009cc0 <abort>
 8009404:	4b04      	ldr	r3, [pc, #16]	; (8009418 <__assert_func+0x38>)
 8009406:	461c      	mov	r4, r3
 8009408:	e7f3      	b.n	80093f2 <__assert_func+0x12>
 800940a:	bf00      	nop
 800940c:	20000088 	.word	0x20000088
 8009410:	0800a4ba 	.word	0x0800a4ba
 8009414:	0800a4c7 	.word	0x0800a4c7
 8009418:	0800a4f5 	.word	0x0800a4f5

0800941c <_calloc_r>:
 800941c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800941e:	fba1 2402 	umull	r2, r4, r1, r2
 8009422:	b94c      	cbnz	r4, 8009438 <_calloc_r+0x1c>
 8009424:	4611      	mov	r1, r2
 8009426:	9201      	str	r2, [sp, #4]
 8009428:	f7fd ffd8 	bl	80073dc <_malloc_r>
 800942c:	9a01      	ldr	r2, [sp, #4]
 800942e:	4605      	mov	r5, r0
 8009430:	b930      	cbnz	r0, 8009440 <_calloc_r+0x24>
 8009432:	4628      	mov	r0, r5
 8009434:	b003      	add	sp, #12
 8009436:	bd30      	pop	{r4, r5, pc}
 8009438:	220c      	movs	r2, #12
 800943a:	6002      	str	r2, [r0, #0]
 800943c:	2500      	movs	r5, #0
 800943e:	e7f8      	b.n	8009432 <_calloc_r+0x16>
 8009440:	4621      	mov	r1, r4
 8009442:	f7fd f858 	bl	80064f6 <memset>
 8009446:	e7f4      	b.n	8009432 <_calloc_r+0x16>

08009448 <rshift>:
 8009448:	6903      	ldr	r3, [r0, #16]
 800944a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800944e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009452:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009456:	f100 0414 	add.w	r4, r0, #20
 800945a:	dd45      	ble.n	80094e8 <rshift+0xa0>
 800945c:	f011 011f 	ands.w	r1, r1, #31
 8009460:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009464:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009468:	d10c      	bne.n	8009484 <rshift+0x3c>
 800946a:	f100 0710 	add.w	r7, r0, #16
 800946e:	4629      	mov	r1, r5
 8009470:	42b1      	cmp	r1, r6
 8009472:	d334      	bcc.n	80094de <rshift+0x96>
 8009474:	1a9b      	subs	r3, r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	1eea      	subs	r2, r5, #3
 800947a:	4296      	cmp	r6, r2
 800947c:	bf38      	it	cc
 800947e:	2300      	movcc	r3, #0
 8009480:	4423      	add	r3, r4
 8009482:	e015      	b.n	80094b0 <rshift+0x68>
 8009484:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009488:	f1c1 0820 	rsb	r8, r1, #32
 800948c:	40cf      	lsrs	r7, r1
 800948e:	f105 0e04 	add.w	lr, r5, #4
 8009492:	46a1      	mov	r9, r4
 8009494:	4576      	cmp	r6, lr
 8009496:	46f4      	mov	ip, lr
 8009498:	d815      	bhi.n	80094c6 <rshift+0x7e>
 800949a:	1a9a      	subs	r2, r3, r2
 800949c:	0092      	lsls	r2, r2, #2
 800949e:	3a04      	subs	r2, #4
 80094a0:	3501      	adds	r5, #1
 80094a2:	42ae      	cmp	r6, r5
 80094a4:	bf38      	it	cc
 80094a6:	2200      	movcc	r2, #0
 80094a8:	18a3      	adds	r3, r4, r2
 80094aa:	50a7      	str	r7, [r4, r2]
 80094ac:	b107      	cbz	r7, 80094b0 <rshift+0x68>
 80094ae:	3304      	adds	r3, #4
 80094b0:	1b1a      	subs	r2, r3, r4
 80094b2:	42a3      	cmp	r3, r4
 80094b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094b8:	bf08      	it	eq
 80094ba:	2300      	moveq	r3, #0
 80094bc:	6102      	str	r2, [r0, #16]
 80094be:	bf08      	it	eq
 80094c0:	6143      	streq	r3, [r0, #20]
 80094c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094c6:	f8dc c000 	ldr.w	ip, [ip]
 80094ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80094ce:	ea4c 0707 	orr.w	r7, ip, r7
 80094d2:	f849 7b04 	str.w	r7, [r9], #4
 80094d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094da:	40cf      	lsrs	r7, r1
 80094dc:	e7da      	b.n	8009494 <rshift+0x4c>
 80094de:	f851 cb04 	ldr.w	ip, [r1], #4
 80094e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80094e6:	e7c3      	b.n	8009470 <rshift+0x28>
 80094e8:	4623      	mov	r3, r4
 80094ea:	e7e1      	b.n	80094b0 <rshift+0x68>

080094ec <__hexdig_fun>:
 80094ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094f0:	2b09      	cmp	r3, #9
 80094f2:	d802      	bhi.n	80094fa <__hexdig_fun+0xe>
 80094f4:	3820      	subs	r0, #32
 80094f6:	b2c0      	uxtb	r0, r0
 80094f8:	4770      	bx	lr
 80094fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094fe:	2b05      	cmp	r3, #5
 8009500:	d801      	bhi.n	8009506 <__hexdig_fun+0x1a>
 8009502:	3847      	subs	r0, #71	; 0x47
 8009504:	e7f7      	b.n	80094f6 <__hexdig_fun+0xa>
 8009506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800950a:	2b05      	cmp	r3, #5
 800950c:	d801      	bhi.n	8009512 <__hexdig_fun+0x26>
 800950e:	3827      	subs	r0, #39	; 0x27
 8009510:	e7f1      	b.n	80094f6 <__hexdig_fun+0xa>
 8009512:	2000      	movs	r0, #0
 8009514:	4770      	bx	lr
	...

08009518 <__gethex>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	4617      	mov	r7, r2
 800951e:	680a      	ldr	r2, [r1, #0]
 8009520:	b085      	sub	sp, #20
 8009522:	f102 0b02 	add.w	fp, r2, #2
 8009526:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800952a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800952e:	4681      	mov	r9, r0
 8009530:	468a      	mov	sl, r1
 8009532:	9302      	str	r3, [sp, #8]
 8009534:	32fe      	adds	r2, #254	; 0xfe
 8009536:	eb02 030b 	add.w	r3, r2, fp
 800953a:	46d8      	mov	r8, fp
 800953c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	2830      	cmp	r0, #48	; 0x30
 8009544:	d0f7      	beq.n	8009536 <__gethex+0x1e>
 8009546:	f7ff ffd1 	bl	80094ec <__hexdig_fun>
 800954a:	4604      	mov	r4, r0
 800954c:	2800      	cmp	r0, #0
 800954e:	d138      	bne.n	80095c2 <__gethex+0xaa>
 8009550:	49a7      	ldr	r1, [pc, #668]	; (80097f0 <__gethex+0x2d8>)
 8009552:	2201      	movs	r2, #1
 8009554:	4640      	mov	r0, r8
 8009556:	f7ff ff0b 	bl	8009370 <strncmp>
 800955a:	4606      	mov	r6, r0
 800955c:	2800      	cmp	r0, #0
 800955e:	d169      	bne.n	8009634 <__gethex+0x11c>
 8009560:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009564:	465d      	mov	r5, fp
 8009566:	f7ff ffc1 	bl	80094ec <__hexdig_fun>
 800956a:	2800      	cmp	r0, #0
 800956c:	d064      	beq.n	8009638 <__gethex+0x120>
 800956e:	465a      	mov	r2, fp
 8009570:	7810      	ldrb	r0, [r2, #0]
 8009572:	2830      	cmp	r0, #48	; 0x30
 8009574:	4690      	mov	r8, r2
 8009576:	f102 0201 	add.w	r2, r2, #1
 800957a:	d0f9      	beq.n	8009570 <__gethex+0x58>
 800957c:	f7ff ffb6 	bl	80094ec <__hexdig_fun>
 8009580:	2301      	movs	r3, #1
 8009582:	fab0 f480 	clz	r4, r0
 8009586:	0964      	lsrs	r4, r4, #5
 8009588:	465e      	mov	r6, fp
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	4642      	mov	r2, r8
 800958e:	4615      	mov	r5, r2
 8009590:	3201      	adds	r2, #1
 8009592:	7828      	ldrb	r0, [r5, #0]
 8009594:	f7ff ffaa 	bl	80094ec <__hexdig_fun>
 8009598:	2800      	cmp	r0, #0
 800959a:	d1f8      	bne.n	800958e <__gethex+0x76>
 800959c:	4994      	ldr	r1, [pc, #592]	; (80097f0 <__gethex+0x2d8>)
 800959e:	2201      	movs	r2, #1
 80095a0:	4628      	mov	r0, r5
 80095a2:	f7ff fee5 	bl	8009370 <strncmp>
 80095a6:	b978      	cbnz	r0, 80095c8 <__gethex+0xb0>
 80095a8:	b946      	cbnz	r6, 80095bc <__gethex+0xa4>
 80095aa:	1c6e      	adds	r6, r5, #1
 80095ac:	4632      	mov	r2, r6
 80095ae:	4615      	mov	r5, r2
 80095b0:	3201      	adds	r2, #1
 80095b2:	7828      	ldrb	r0, [r5, #0]
 80095b4:	f7ff ff9a 	bl	80094ec <__hexdig_fun>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d1f8      	bne.n	80095ae <__gethex+0x96>
 80095bc:	1b73      	subs	r3, r6, r5
 80095be:	009e      	lsls	r6, r3, #2
 80095c0:	e004      	b.n	80095cc <__gethex+0xb4>
 80095c2:	2400      	movs	r4, #0
 80095c4:	4626      	mov	r6, r4
 80095c6:	e7e1      	b.n	800958c <__gethex+0x74>
 80095c8:	2e00      	cmp	r6, #0
 80095ca:	d1f7      	bne.n	80095bc <__gethex+0xa4>
 80095cc:	782b      	ldrb	r3, [r5, #0]
 80095ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095d2:	2b50      	cmp	r3, #80	; 0x50
 80095d4:	d13d      	bne.n	8009652 <__gethex+0x13a>
 80095d6:	786b      	ldrb	r3, [r5, #1]
 80095d8:	2b2b      	cmp	r3, #43	; 0x2b
 80095da:	d02f      	beq.n	800963c <__gethex+0x124>
 80095dc:	2b2d      	cmp	r3, #45	; 0x2d
 80095de:	d031      	beq.n	8009644 <__gethex+0x12c>
 80095e0:	1c69      	adds	r1, r5, #1
 80095e2:	f04f 0b00 	mov.w	fp, #0
 80095e6:	7808      	ldrb	r0, [r1, #0]
 80095e8:	f7ff ff80 	bl	80094ec <__hexdig_fun>
 80095ec:	1e42      	subs	r2, r0, #1
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	2a18      	cmp	r2, #24
 80095f2:	d82e      	bhi.n	8009652 <__gethex+0x13a>
 80095f4:	f1a0 0210 	sub.w	r2, r0, #16
 80095f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095fc:	f7ff ff76 	bl	80094ec <__hexdig_fun>
 8009600:	f100 3cff 	add.w	ip, r0, #4294967295
 8009604:	fa5f fc8c 	uxtb.w	ip, ip
 8009608:	f1bc 0f18 	cmp.w	ip, #24
 800960c:	d91d      	bls.n	800964a <__gethex+0x132>
 800960e:	f1bb 0f00 	cmp.w	fp, #0
 8009612:	d000      	beq.n	8009616 <__gethex+0xfe>
 8009614:	4252      	negs	r2, r2
 8009616:	4416      	add	r6, r2
 8009618:	f8ca 1000 	str.w	r1, [sl]
 800961c:	b1dc      	cbz	r4, 8009656 <__gethex+0x13e>
 800961e:	9b01      	ldr	r3, [sp, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	bf14      	ite	ne
 8009624:	f04f 0800 	movne.w	r8, #0
 8009628:	f04f 0806 	moveq.w	r8, #6
 800962c:	4640      	mov	r0, r8
 800962e:	b005      	add	sp, #20
 8009630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009634:	4645      	mov	r5, r8
 8009636:	4626      	mov	r6, r4
 8009638:	2401      	movs	r4, #1
 800963a:	e7c7      	b.n	80095cc <__gethex+0xb4>
 800963c:	f04f 0b00 	mov.w	fp, #0
 8009640:	1ca9      	adds	r1, r5, #2
 8009642:	e7d0      	b.n	80095e6 <__gethex+0xce>
 8009644:	f04f 0b01 	mov.w	fp, #1
 8009648:	e7fa      	b.n	8009640 <__gethex+0x128>
 800964a:	230a      	movs	r3, #10
 800964c:	fb03 0002 	mla	r0, r3, r2, r0
 8009650:	e7d0      	b.n	80095f4 <__gethex+0xdc>
 8009652:	4629      	mov	r1, r5
 8009654:	e7e0      	b.n	8009618 <__gethex+0x100>
 8009656:	eba5 0308 	sub.w	r3, r5, r8
 800965a:	3b01      	subs	r3, #1
 800965c:	4621      	mov	r1, r4
 800965e:	2b07      	cmp	r3, #7
 8009660:	dc0a      	bgt.n	8009678 <__gethex+0x160>
 8009662:	4648      	mov	r0, r9
 8009664:	f7fd ff46 	bl	80074f4 <_Balloc>
 8009668:	4604      	mov	r4, r0
 800966a:	b940      	cbnz	r0, 800967e <__gethex+0x166>
 800966c:	4b61      	ldr	r3, [pc, #388]	; (80097f4 <__gethex+0x2dc>)
 800966e:	4602      	mov	r2, r0
 8009670:	21e4      	movs	r1, #228	; 0xe4
 8009672:	4861      	ldr	r0, [pc, #388]	; (80097f8 <__gethex+0x2e0>)
 8009674:	f7ff feb4 	bl	80093e0 <__assert_func>
 8009678:	3101      	adds	r1, #1
 800967a:	105b      	asrs	r3, r3, #1
 800967c:	e7ef      	b.n	800965e <__gethex+0x146>
 800967e:	f100 0a14 	add.w	sl, r0, #20
 8009682:	2300      	movs	r3, #0
 8009684:	495a      	ldr	r1, [pc, #360]	; (80097f0 <__gethex+0x2d8>)
 8009686:	f8cd a004 	str.w	sl, [sp, #4]
 800968a:	469b      	mov	fp, r3
 800968c:	45a8      	cmp	r8, r5
 800968e:	d342      	bcc.n	8009716 <__gethex+0x1fe>
 8009690:	9801      	ldr	r0, [sp, #4]
 8009692:	f840 bb04 	str.w	fp, [r0], #4
 8009696:	eba0 000a 	sub.w	r0, r0, sl
 800969a:	1080      	asrs	r0, r0, #2
 800969c:	6120      	str	r0, [r4, #16]
 800969e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80096a2:	4658      	mov	r0, fp
 80096a4:	f7fe f818 	bl	80076d8 <__hi0bits>
 80096a8:	683d      	ldr	r5, [r7, #0]
 80096aa:	eba8 0000 	sub.w	r0, r8, r0
 80096ae:	42a8      	cmp	r0, r5
 80096b0:	dd59      	ble.n	8009766 <__gethex+0x24e>
 80096b2:	eba0 0805 	sub.w	r8, r0, r5
 80096b6:	4641      	mov	r1, r8
 80096b8:	4620      	mov	r0, r4
 80096ba:	f7fe fba7 	bl	8007e0c <__any_on>
 80096be:	4683      	mov	fp, r0
 80096c0:	b1b8      	cbz	r0, 80096f2 <__gethex+0x1da>
 80096c2:	f108 33ff 	add.w	r3, r8, #4294967295
 80096c6:	1159      	asrs	r1, r3, #5
 80096c8:	f003 021f 	and.w	r2, r3, #31
 80096cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80096d0:	f04f 0b01 	mov.w	fp, #1
 80096d4:	fa0b f202 	lsl.w	r2, fp, r2
 80096d8:	420a      	tst	r2, r1
 80096da:	d00a      	beq.n	80096f2 <__gethex+0x1da>
 80096dc:	455b      	cmp	r3, fp
 80096de:	dd06      	ble.n	80096ee <__gethex+0x1d6>
 80096e0:	f1a8 0102 	sub.w	r1, r8, #2
 80096e4:	4620      	mov	r0, r4
 80096e6:	f7fe fb91 	bl	8007e0c <__any_on>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d138      	bne.n	8009760 <__gethex+0x248>
 80096ee:	f04f 0b02 	mov.w	fp, #2
 80096f2:	4641      	mov	r1, r8
 80096f4:	4620      	mov	r0, r4
 80096f6:	f7ff fea7 	bl	8009448 <rshift>
 80096fa:	4446      	add	r6, r8
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	42b3      	cmp	r3, r6
 8009700:	da41      	bge.n	8009786 <__gethex+0x26e>
 8009702:	4621      	mov	r1, r4
 8009704:	4648      	mov	r0, r9
 8009706:	f7fd ff35 	bl	8007574 <_Bfree>
 800970a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800970c:	2300      	movs	r3, #0
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009714:	e78a      	b.n	800962c <__gethex+0x114>
 8009716:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800971a:	2a2e      	cmp	r2, #46	; 0x2e
 800971c:	d014      	beq.n	8009748 <__gethex+0x230>
 800971e:	2b20      	cmp	r3, #32
 8009720:	d106      	bne.n	8009730 <__gethex+0x218>
 8009722:	9b01      	ldr	r3, [sp, #4]
 8009724:	f843 bb04 	str.w	fp, [r3], #4
 8009728:	f04f 0b00 	mov.w	fp, #0
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	465b      	mov	r3, fp
 8009730:	7828      	ldrb	r0, [r5, #0]
 8009732:	9303      	str	r3, [sp, #12]
 8009734:	f7ff feda 	bl	80094ec <__hexdig_fun>
 8009738:	9b03      	ldr	r3, [sp, #12]
 800973a:	f000 000f 	and.w	r0, r0, #15
 800973e:	4098      	lsls	r0, r3
 8009740:	ea4b 0b00 	orr.w	fp, fp, r0
 8009744:	3304      	adds	r3, #4
 8009746:	e7a1      	b.n	800968c <__gethex+0x174>
 8009748:	45a8      	cmp	r8, r5
 800974a:	d8e8      	bhi.n	800971e <__gethex+0x206>
 800974c:	2201      	movs	r2, #1
 800974e:	4628      	mov	r0, r5
 8009750:	9303      	str	r3, [sp, #12]
 8009752:	f7ff fe0d 	bl	8009370 <strncmp>
 8009756:	4926      	ldr	r1, [pc, #152]	; (80097f0 <__gethex+0x2d8>)
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	2800      	cmp	r0, #0
 800975c:	d1df      	bne.n	800971e <__gethex+0x206>
 800975e:	e795      	b.n	800968c <__gethex+0x174>
 8009760:	f04f 0b03 	mov.w	fp, #3
 8009764:	e7c5      	b.n	80096f2 <__gethex+0x1da>
 8009766:	da0b      	bge.n	8009780 <__gethex+0x268>
 8009768:	eba5 0800 	sub.w	r8, r5, r0
 800976c:	4621      	mov	r1, r4
 800976e:	4642      	mov	r2, r8
 8009770:	4648      	mov	r0, r9
 8009772:	f7fe f919 	bl	80079a8 <__lshift>
 8009776:	eba6 0608 	sub.w	r6, r6, r8
 800977a:	4604      	mov	r4, r0
 800977c:	f100 0a14 	add.w	sl, r0, #20
 8009780:	f04f 0b00 	mov.w	fp, #0
 8009784:	e7ba      	b.n	80096fc <__gethex+0x1e4>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	42b3      	cmp	r3, r6
 800978a:	dd73      	ble.n	8009874 <__gethex+0x35c>
 800978c:	1b9e      	subs	r6, r3, r6
 800978e:	42b5      	cmp	r5, r6
 8009790:	dc34      	bgt.n	80097fc <__gethex+0x2e4>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b02      	cmp	r3, #2
 8009796:	d023      	beq.n	80097e0 <__gethex+0x2c8>
 8009798:	2b03      	cmp	r3, #3
 800979a:	d025      	beq.n	80097e8 <__gethex+0x2d0>
 800979c:	2b01      	cmp	r3, #1
 800979e:	d115      	bne.n	80097cc <__gethex+0x2b4>
 80097a0:	42b5      	cmp	r5, r6
 80097a2:	d113      	bne.n	80097cc <__gethex+0x2b4>
 80097a4:	2d01      	cmp	r5, #1
 80097a6:	d10b      	bne.n	80097c0 <__gethex+0x2a8>
 80097a8:	9a02      	ldr	r2, [sp, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	2301      	movs	r3, #1
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	f8ca 3000 	str.w	r3, [sl]
 80097b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097b8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80097bc:	601c      	str	r4, [r3, #0]
 80097be:	e735      	b.n	800962c <__gethex+0x114>
 80097c0:	1e69      	subs	r1, r5, #1
 80097c2:	4620      	mov	r0, r4
 80097c4:	f7fe fb22 	bl	8007e0c <__any_on>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d1ed      	bne.n	80097a8 <__gethex+0x290>
 80097cc:	4621      	mov	r1, r4
 80097ce:	4648      	mov	r0, r9
 80097d0:	f7fd fed0 	bl	8007574 <_Bfree>
 80097d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097d6:	2300      	movs	r3, #0
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	f04f 0850 	mov.w	r8, #80	; 0x50
 80097de:	e725      	b.n	800962c <__gethex+0x114>
 80097e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1f2      	bne.n	80097cc <__gethex+0x2b4>
 80097e6:	e7df      	b.n	80097a8 <__gethex+0x290>
 80097e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1dc      	bne.n	80097a8 <__gethex+0x290>
 80097ee:	e7ed      	b.n	80097cc <__gethex+0x2b4>
 80097f0:	0800a34c 	.word	0x0800a34c
 80097f4:	0800a1e1 	.word	0x0800a1e1
 80097f8:	0800a4f6 	.word	0x0800a4f6
 80097fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8009800:	f1bb 0f00 	cmp.w	fp, #0
 8009804:	d133      	bne.n	800986e <__gethex+0x356>
 8009806:	f1b8 0f00 	cmp.w	r8, #0
 800980a:	d004      	beq.n	8009816 <__gethex+0x2fe>
 800980c:	4641      	mov	r1, r8
 800980e:	4620      	mov	r0, r4
 8009810:	f7fe fafc 	bl	8007e0c <__any_on>
 8009814:	4683      	mov	fp, r0
 8009816:	ea4f 1268 	mov.w	r2, r8, asr #5
 800981a:	2301      	movs	r3, #1
 800981c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009820:	f008 081f 	and.w	r8, r8, #31
 8009824:	fa03 f308 	lsl.w	r3, r3, r8
 8009828:	4213      	tst	r3, r2
 800982a:	4631      	mov	r1, r6
 800982c:	4620      	mov	r0, r4
 800982e:	bf18      	it	ne
 8009830:	f04b 0b02 	orrne.w	fp, fp, #2
 8009834:	1bad      	subs	r5, r5, r6
 8009836:	f7ff fe07 	bl	8009448 <rshift>
 800983a:	687e      	ldr	r6, [r7, #4]
 800983c:	f04f 0802 	mov.w	r8, #2
 8009840:	f1bb 0f00 	cmp.w	fp, #0
 8009844:	d04a      	beq.n	80098dc <__gethex+0x3c4>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d016      	beq.n	800987a <__gethex+0x362>
 800984c:	2b03      	cmp	r3, #3
 800984e:	d018      	beq.n	8009882 <__gethex+0x36a>
 8009850:	2b01      	cmp	r3, #1
 8009852:	d109      	bne.n	8009868 <__gethex+0x350>
 8009854:	f01b 0f02 	tst.w	fp, #2
 8009858:	d006      	beq.n	8009868 <__gethex+0x350>
 800985a:	f8da 3000 	ldr.w	r3, [sl]
 800985e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009862:	f01b 0f01 	tst.w	fp, #1
 8009866:	d10f      	bne.n	8009888 <__gethex+0x370>
 8009868:	f048 0810 	orr.w	r8, r8, #16
 800986c:	e036      	b.n	80098dc <__gethex+0x3c4>
 800986e:	f04f 0b01 	mov.w	fp, #1
 8009872:	e7d0      	b.n	8009816 <__gethex+0x2fe>
 8009874:	f04f 0801 	mov.w	r8, #1
 8009878:	e7e2      	b.n	8009840 <__gethex+0x328>
 800987a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800987c:	f1c3 0301 	rsb	r3, r3, #1
 8009880:	930f      	str	r3, [sp, #60]	; 0x3c
 8009882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0ef      	beq.n	8009868 <__gethex+0x350>
 8009888:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800988c:	f104 0214 	add.w	r2, r4, #20
 8009890:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800989a:	2300      	movs	r3, #0
 800989c:	4694      	mov	ip, r2
 800989e:	f852 1b04 	ldr.w	r1, [r2], #4
 80098a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80098a6:	d01e      	beq.n	80098e6 <__gethex+0x3ce>
 80098a8:	3101      	adds	r1, #1
 80098aa:	f8cc 1000 	str.w	r1, [ip]
 80098ae:	f1b8 0f02 	cmp.w	r8, #2
 80098b2:	f104 0214 	add.w	r2, r4, #20
 80098b6:	d13d      	bne.n	8009934 <__gethex+0x41c>
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	42ab      	cmp	r3, r5
 80098be:	d10b      	bne.n	80098d8 <__gethex+0x3c0>
 80098c0:	1169      	asrs	r1, r5, #5
 80098c2:	2301      	movs	r3, #1
 80098c4:	f005 051f 	and.w	r5, r5, #31
 80098c8:	fa03 f505 	lsl.w	r5, r3, r5
 80098cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098d0:	421d      	tst	r5, r3
 80098d2:	bf18      	it	ne
 80098d4:	f04f 0801 	movne.w	r8, #1
 80098d8:	f048 0820 	orr.w	r8, r8, #32
 80098dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098de:	601c      	str	r4, [r3, #0]
 80098e0:	9b02      	ldr	r3, [sp, #8]
 80098e2:	601e      	str	r6, [r3, #0]
 80098e4:	e6a2      	b.n	800962c <__gethex+0x114>
 80098e6:	4290      	cmp	r0, r2
 80098e8:	f842 3c04 	str.w	r3, [r2, #-4]
 80098ec:	d8d6      	bhi.n	800989c <__gethex+0x384>
 80098ee:	68a2      	ldr	r2, [r4, #8]
 80098f0:	4593      	cmp	fp, r2
 80098f2:	db17      	blt.n	8009924 <__gethex+0x40c>
 80098f4:	6861      	ldr	r1, [r4, #4]
 80098f6:	4648      	mov	r0, r9
 80098f8:	3101      	adds	r1, #1
 80098fa:	f7fd fdfb 	bl	80074f4 <_Balloc>
 80098fe:	4682      	mov	sl, r0
 8009900:	b918      	cbnz	r0, 800990a <__gethex+0x3f2>
 8009902:	4b1b      	ldr	r3, [pc, #108]	; (8009970 <__gethex+0x458>)
 8009904:	4602      	mov	r2, r0
 8009906:	2184      	movs	r1, #132	; 0x84
 8009908:	e6b3      	b.n	8009672 <__gethex+0x15a>
 800990a:	6922      	ldr	r2, [r4, #16]
 800990c:	3202      	adds	r2, #2
 800990e:	f104 010c 	add.w	r1, r4, #12
 8009912:	0092      	lsls	r2, r2, #2
 8009914:	300c      	adds	r0, #12
 8009916:	f7ff fd4d 	bl	80093b4 <memcpy>
 800991a:	4621      	mov	r1, r4
 800991c:	4648      	mov	r0, r9
 800991e:	f7fd fe29 	bl	8007574 <_Bfree>
 8009922:	4654      	mov	r4, sl
 8009924:	6922      	ldr	r2, [r4, #16]
 8009926:	1c51      	adds	r1, r2, #1
 8009928:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800992c:	6121      	str	r1, [r4, #16]
 800992e:	2101      	movs	r1, #1
 8009930:	6151      	str	r1, [r2, #20]
 8009932:	e7bc      	b.n	80098ae <__gethex+0x396>
 8009934:	6921      	ldr	r1, [r4, #16]
 8009936:	4559      	cmp	r1, fp
 8009938:	dd0b      	ble.n	8009952 <__gethex+0x43a>
 800993a:	2101      	movs	r1, #1
 800993c:	4620      	mov	r0, r4
 800993e:	f7ff fd83 	bl	8009448 <rshift>
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	3601      	adds	r6, #1
 8009946:	42b3      	cmp	r3, r6
 8009948:	f6ff aedb 	blt.w	8009702 <__gethex+0x1ea>
 800994c:	f04f 0801 	mov.w	r8, #1
 8009950:	e7c2      	b.n	80098d8 <__gethex+0x3c0>
 8009952:	f015 051f 	ands.w	r5, r5, #31
 8009956:	d0f9      	beq.n	800994c <__gethex+0x434>
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	441a      	add	r2, r3
 800995c:	f1c5 0520 	rsb	r5, r5, #32
 8009960:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009964:	f7fd feb8 	bl	80076d8 <__hi0bits>
 8009968:	42a8      	cmp	r0, r5
 800996a:	dbe6      	blt.n	800993a <__gethex+0x422>
 800996c:	e7ee      	b.n	800994c <__gethex+0x434>
 800996e:	bf00      	nop
 8009970:	0800a1e1 	.word	0x0800a1e1

08009974 <L_shift>:
 8009974:	f1c2 0208 	rsb	r2, r2, #8
 8009978:	0092      	lsls	r2, r2, #2
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	f1c2 0620 	rsb	r6, r2, #32
 8009980:	6843      	ldr	r3, [r0, #4]
 8009982:	6804      	ldr	r4, [r0, #0]
 8009984:	fa03 f506 	lsl.w	r5, r3, r6
 8009988:	432c      	orrs	r4, r5
 800998a:	40d3      	lsrs	r3, r2
 800998c:	6004      	str	r4, [r0, #0]
 800998e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009992:	4288      	cmp	r0, r1
 8009994:	d3f4      	bcc.n	8009980 <L_shift+0xc>
 8009996:	bd70      	pop	{r4, r5, r6, pc}

08009998 <__match>:
 8009998:	b530      	push	{r4, r5, lr}
 800999a:	6803      	ldr	r3, [r0, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099a2:	b914      	cbnz	r4, 80099aa <__match+0x12>
 80099a4:	6003      	str	r3, [r0, #0]
 80099a6:	2001      	movs	r0, #1
 80099a8:	bd30      	pop	{r4, r5, pc}
 80099aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099b2:	2d19      	cmp	r5, #25
 80099b4:	bf98      	it	ls
 80099b6:	3220      	addls	r2, #32
 80099b8:	42a2      	cmp	r2, r4
 80099ba:	d0f0      	beq.n	800999e <__match+0x6>
 80099bc:	2000      	movs	r0, #0
 80099be:	e7f3      	b.n	80099a8 <__match+0x10>

080099c0 <__hexnan>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	680b      	ldr	r3, [r1, #0]
 80099c6:	6801      	ldr	r1, [r0, #0]
 80099c8:	115e      	asrs	r6, r3, #5
 80099ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099ce:	f013 031f 	ands.w	r3, r3, #31
 80099d2:	b087      	sub	sp, #28
 80099d4:	bf18      	it	ne
 80099d6:	3604      	addne	r6, #4
 80099d8:	2500      	movs	r5, #0
 80099da:	1f37      	subs	r7, r6, #4
 80099dc:	4682      	mov	sl, r0
 80099de:	4690      	mov	r8, r2
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80099e6:	46b9      	mov	r9, r7
 80099e8:	463c      	mov	r4, r7
 80099ea:	9502      	str	r5, [sp, #8]
 80099ec:	46ab      	mov	fp, r5
 80099ee:	784a      	ldrb	r2, [r1, #1]
 80099f0:	1c4b      	adds	r3, r1, #1
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	b342      	cbz	r2, 8009a48 <__hexnan+0x88>
 80099f6:	4610      	mov	r0, r2
 80099f8:	9105      	str	r1, [sp, #20]
 80099fa:	9204      	str	r2, [sp, #16]
 80099fc:	f7ff fd76 	bl	80094ec <__hexdig_fun>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d14f      	bne.n	8009aa4 <__hexnan+0xe4>
 8009a04:	9a04      	ldr	r2, [sp, #16]
 8009a06:	9905      	ldr	r1, [sp, #20]
 8009a08:	2a20      	cmp	r2, #32
 8009a0a:	d818      	bhi.n	8009a3e <__hexnan+0x7e>
 8009a0c:	9b02      	ldr	r3, [sp, #8]
 8009a0e:	459b      	cmp	fp, r3
 8009a10:	dd13      	ble.n	8009a3a <__hexnan+0x7a>
 8009a12:	454c      	cmp	r4, r9
 8009a14:	d206      	bcs.n	8009a24 <__hexnan+0x64>
 8009a16:	2d07      	cmp	r5, #7
 8009a18:	dc04      	bgt.n	8009a24 <__hexnan+0x64>
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7ff ffa8 	bl	8009974 <L_shift>
 8009a24:	4544      	cmp	r4, r8
 8009a26:	d950      	bls.n	8009aca <__hexnan+0x10a>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f1a4 0904 	sub.w	r9, r4, #4
 8009a2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a32:	f8cd b008 	str.w	fp, [sp, #8]
 8009a36:	464c      	mov	r4, r9
 8009a38:	461d      	mov	r5, r3
 8009a3a:	9903      	ldr	r1, [sp, #12]
 8009a3c:	e7d7      	b.n	80099ee <__hexnan+0x2e>
 8009a3e:	2a29      	cmp	r2, #41	; 0x29
 8009a40:	d155      	bne.n	8009aee <__hexnan+0x12e>
 8009a42:	3102      	adds	r1, #2
 8009a44:	f8ca 1000 	str.w	r1, [sl]
 8009a48:	f1bb 0f00 	cmp.w	fp, #0
 8009a4c:	d04f      	beq.n	8009aee <__hexnan+0x12e>
 8009a4e:	454c      	cmp	r4, r9
 8009a50:	d206      	bcs.n	8009a60 <__hexnan+0xa0>
 8009a52:	2d07      	cmp	r5, #7
 8009a54:	dc04      	bgt.n	8009a60 <__hexnan+0xa0>
 8009a56:	462a      	mov	r2, r5
 8009a58:	4649      	mov	r1, r9
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff ff8a 	bl	8009974 <L_shift>
 8009a60:	4544      	cmp	r4, r8
 8009a62:	d934      	bls.n	8009ace <__hexnan+0x10e>
 8009a64:	f1a8 0204 	sub.w	r2, r8, #4
 8009a68:	4623      	mov	r3, r4
 8009a6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a72:	429f      	cmp	r7, r3
 8009a74:	d2f9      	bcs.n	8009a6a <__hexnan+0xaa>
 8009a76:	1b3b      	subs	r3, r7, r4
 8009a78:	f023 0303 	bic.w	r3, r3, #3
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	3e03      	subs	r6, #3
 8009a80:	3401      	adds	r4, #1
 8009a82:	42a6      	cmp	r6, r4
 8009a84:	bf38      	it	cc
 8009a86:	2304      	movcc	r3, #4
 8009a88:	4443      	add	r3, r8
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f843 2b04 	str.w	r2, [r3], #4
 8009a90:	429f      	cmp	r7, r3
 8009a92:	d2fb      	bcs.n	8009a8c <__hexnan+0xcc>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	b91b      	cbnz	r3, 8009aa0 <__hexnan+0xe0>
 8009a98:	4547      	cmp	r7, r8
 8009a9a:	d126      	bne.n	8009aea <__hexnan+0x12a>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	603b      	str	r3, [r7, #0]
 8009aa0:	2005      	movs	r0, #5
 8009aa2:	e025      	b.n	8009af0 <__hexnan+0x130>
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	2d08      	cmp	r5, #8
 8009aa8:	f10b 0b01 	add.w	fp, fp, #1
 8009aac:	dd06      	ble.n	8009abc <__hexnan+0xfc>
 8009aae:	4544      	cmp	r4, r8
 8009ab0:	d9c3      	bls.n	8009a3a <__hexnan+0x7a>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ab8:	2501      	movs	r5, #1
 8009aba:	3c04      	subs	r4, #4
 8009abc:	6822      	ldr	r2, [r4, #0]
 8009abe:	f000 000f 	and.w	r0, r0, #15
 8009ac2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009ac6:	6020      	str	r0, [r4, #0]
 8009ac8:	e7b7      	b.n	8009a3a <__hexnan+0x7a>
 8009aca:	2508      	movs	r5, #8
 8009acc:	e7b5      	b.n	8009a3a <__hexnan+0x7a>
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0df      	beq.n	8009a94 <__hexnan+0xd4>
 8009ad4:	f1c3 0320 	rsb	r3, r3, #32
 8009ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8009adc:	40da      	lsrs	r2, r3
 8009ade:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ae8:	e7d4      	b.n	8009a94 <__hexnan+0xd4>
 8009aea:	3f04      	subs	r7, #4
 8009aec:	e7d2      	b.n	8009a94 <__hexnan+0xd4>
 8009aee:	2004      	movs	r0, #4
 8009af0:	b007      	add	sp, #28
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009af6 <__ascii_mbtowc>:
 8009af6:	b082      	sub	sp, #8
 8009af8:	b901      	cbnz	r1, 8009afc <__ascii_mbtowc+0x6>
 8009afa:	a901      	add	r1, sp, #4
 8009afc:	b142      	cbz	r2, 8009b10 <__ascii_mbtowc+0x1a>
 8009afe:	b14b      	cbz	r3, 8009b14 <__ascii_mbtowc+0x1e>
 8009b00:	7813      	ldrb	r3, [r2, #0]
 8009b02:	600b      	str	r3, [r1, #0]
 8009b04:	7812      	ldrb	r2, [r2, #0]
 8009b06:	1e10      	subs	r0, r2, #0
 8009b08:	bf18      	it	ne
 8009b0a:	2001      	movne	r0, #1
 8009b0c:	b002      	add	sp, #8
 8009b0e:	4770      	bx	lr
 8009b10:	4610      	mov	r0, r2
 8009b12:	e7fb      	b.n	8009b0c <__ascii_mbtowc+0x16>
 8009b14:	f06f 0001 	mvn.w	r0, #1
 8009b18:	e7f8      	b.n	8009b0c <__ascii_mbtowc+0x16>

08009b1a <_realloc_r>:
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	4680      	mov	r8, r0
 8009b20:	4614      	mov	r4, r2
 8009b22:	460e      	mov	r6, r1
 8009b24:	b921      	cbnz	r1, 8009b30 <_realloc_r+0x16>
 8009b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	f7fd bc56 	b.w	80073dc <_malloc_r>
 8009b30:	b92a      	cbnz	r2, 8009b3e <_realloc_r+0x24>
 8009b32:	f7fd fbdf 	bl	80072f4 <_free_r>
 8009b36:	4625      	mov	r5, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3e:	f000 f8c6 	bl	8009cce <_malloc_usable_size_r>
 8009b42:	4284      	cmp	r4, r0
 8009b44:	4607      	mov	r7, r0
 8009b46:	d802      	bhi.n	8009b4e <_realloc_r+0x34>
 8009b48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b4c:	d812      	bhi.n	8009b74 <_realloc_r+0x5a>
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4640      	mov	r0, r8
 8009b52:	f7fd fc43 	bl	80073dc <_malloc_r>
 8009b56:	4605      	mov	r5, r0
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d0ed      	beq.n	8009b38 <_realloc_r+0x1e>
 8009b5c:	42bc      	cmp	r4, r7
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4631      	mov	r1, r6
 8009b62:	bf28      	it	cs
 8009b64:	463a      	movcs	r2, r7
 8009b66:	f7ff fc25 	bl	80093b4 <memcpy>
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	f7fd fbc1 	bl	80072f4 <_free_r>
 8009b72:	e7e1      	b.n	8009b38 <_realloc_r+0x1e>
 8009b74:	4635      	mov	r5, r6
 8009b76:	e7df      	b.n	8009b38 <_realloc_r+0x1e>

08009b78 <__ascii_wctomb>:
 8009b78:	b149      	cbz	r1, 8009b8e <__ascii_wctomb+0x16>
 8009b7a:	2aff      	cmp	r2, #255	; 0xff
 8009b7c:	bf85      	ittet	hi
 8009b7e:	238a      	movhi	r3, #138	; 0x8a
 8009b80:	6003      	strhi	r3, [r0, #0]
 8009b82:	700a      	strbls	r2, [r1, #0]
 8009b84:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b88:	bf98      	it	ls
 8009b8a:	2001      	movls	r0, #1
 8009b8c:	4770      	bx	lr
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4770      	bx	lr
	...

08009b94 <fiprintf>:
 8009b94:	b40e      	push	{r1, r2, r3}
 8009b96:	b503      	push	{r0, r1, lr}
 8009b98:	4601      	mov	r1, r0
 8009b9a:	ab03      	add	r3, sp, #12
 8009b9c:	4805      	ldr	r0, [pc, #20]	; (8009bb4 <fiprintf+0x20>)
 8009b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba2:	6800      	ldr	r0, [r0, #0]
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	f7ff f96b 	bl	8008e80 <_vfiprintf_r>
 8009baa:	b002      	add	sp, #8
 8009bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bb0:	b003      	add	sp, #12
 8009bb2:	4770      	bx	lr
 8009bb4:	20000088 	.word	0x20000088

08009bb8 <__swhatbuf_r>:
 8009bb8:	b570      	push	{r4, r5, r6, lr}
 8009bba:	460c      	mov	r4, r1
 8009bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	b096      	sub	sp, #88	; 0x58
 8009bc4:	4615      	mov	r5, r2
 8009bc6:	461e      	mov	r6, r3
 8009bc8:	da0d      	bge.n	8009be6 <__swhatbuf_r+0x2e>
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009bd0:	f04f 0100 	mov.w	r1, #0
 8009bd4:	bf0c      	ite	eq
 8009bd6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009bda:	2340      	movne	r3, #64	; 0x40
 8009bdc:	2000      	movs	r0, #0
 8009bde:	6031      	str	r1, [r6, #0]
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	b016      	add	sp, #88	; 0x58
 8009be4:	bd70      	pop	{r4, r5, r6, pc}
 8009be6:	466a      	mov	r2, sp
 8009be8:	f000 f848 	bl	8009c7c <_fstat_r>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	dbec      	blt.n	8009bca <__swhatbuf_r+0x12>
 8009bf0:	9901      	ldr	r1, [sp, #4]
 8009bf2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009bf6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009bfa:	4259      	negs	r1, r3
 8009bfc:	4159      	adcs	r1, r3
 8009bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c02:	e7eb      	b.n	8009bdc <__swhatbuf_r+0x24>

08009c04 <__smakebuf_r>:
 8009c04:	898b      	ldrh	r3, [r1, #12]
 8009c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c08:	079d      	lsls	r5, r3, #30
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	d507      	bpl.n	8009c20 <__smakebuf_r+0x1c>
 8009c10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	6123      	str	r3, [r4, #16]
 8009c18:	2301      	movs	r3, #1
 8009c1a:	6163      	str	r3, [r4, #20]
 8009c1c:	b002      	add	sp, #8
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}
 8009c20:	ab01      	add	r3, sp, #4
 8009c22:	466a      	mov	r2, sp
 8009c24:	f7ff ffc8 	bl	8009bb8 <__swhatbuf_r>
 8009c28:	9900      	ldr	r1, [sp, #0]
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7fd fbd5 	bl	80073dc <_malloc_r>
 8009c32:	b948      	cbnz	r0, 8009c48 <__smakebuf_r+0x44>
 8009c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c38:	059a      	lsls	r2, r3, #22
 8009c3a:	d4ef      	bmi.n	8009c1c <__smakebuf_r+0x18>
 8009c3c:	f023 0303 	bic.w	r3, r3, #3
 8009c40:	f043 0302 	orr.w	r3, r3, #2
 8009c44:	81a3      	strh	r3, [r4, #12]
 8009c46:	e7e3      	b.n	8009c10 <__smakebuf_r+0xc>
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	6020      	str	r0, [r4, #0]
 8009c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c50:	81a3      	strh	r3, [r4, #12]
 8009c52:	9b00      	ldr	r3, [sp, #0]
 8009c54:	6163      	str	r3, [r4, #20]
 8009c56:	9b01      	ldr	r3, [sp, #4]
 8009c58:	6120      	str	r0, [r4, #16]
 8009c5a:	b15b      	cbz	r3, 8009c74 <__smakebuf_r+0x70>
 8009c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c60:	4630      	mov	r0, r6
 8009c62:	f000 f81d 	bl	8009ca0 <_isatty_r>
 8009c66:	b128      	cbz	r0, 8009c74 <__smakebuf_r+0x70>
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	f023 0303 	bic.w	r3, r3, #3
 8009c6e:	f043 0301 	orr.w	r3, r3, #1
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	431d      	orrs	r5, r3
 8009c78:	81a5      	strh	r5, [r4, #12]
 8009c7a:	e7cf      	b.n	8009c1c <__smakebuf_r+0x18>

08009c7c <_fstat_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d07      	ldr	r5, [pc, #28]	; (8009c9c <_fstat_r+0x20>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	4611      	mov	r1, r2
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	f7f8 fb50 	bl	800232e <_fstat>
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	d102      	bne.n	8009c98 <_fstat_r+0x1c>
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	b103      	cbz	r3, 8009c98 <_fstat_r+0x1c>
 8009c96:	6023      	str	r3, [r4, #0]
 8009c98:	bd38      	pop	{r3, r4, r5, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000480 	.word	0x20000480

08009ca0 <_isatty_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	4d06      	ldr	r5, [pc, #24]	; (8009cbc <_isatty_r+0x1c>)
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	4608      	mov	r0, r1
 8009caa:	602b      	str	r3, [r5, #0]
 8009cac:	f7f8 fb4f 	bl	800234e <_isatty>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d102      	bne.n	8009cba <_isatty_r+0x1a>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	b103      	cbz	r3, 8009cba <_isatty_r+0x1a>
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	20000480 	.word	0x20000480

08009cc0 <abort>:
 8009cc0:	b508      	push	{r3, lr}
 8009cc2:	2006      	movs	r0, #6
 8009cc4:	f000 f834 	bl	8009d30 <raise>
 8009cc8:	2001      	movs	r0, #1
 8009cca:	f7f8 fae1 	bl	8002290 <_exit>

08009cce <_malloc_usable_size_r>:
 8009cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cd2:	1f18      	subs	r0, r3, #4
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfbc      	itt	lt
 8009cd8:	580b      	ldrlt	r3, [r1, r0]
 8009cda:	18c0      	addlt	r0, r0, r3
 8009cdc:	4770      	bx	lr

08009cde <_raise_r>:
 8009cde:	291f      	cmp	r1, #31
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	460d      	mov	r5, r1
 8009ce6:	d904      	bls.n	8009cf2 <_raise_r+0x14>
 8009ce8:	2316      	movs	r3, #22
 8009cea:	6003      	str	r3, [r0, #0]
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf0:	bd38      	pop	{r3, r4, r5, pc}
 8009cf2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009cf4:	b112      	cbz	r2, 8009cfc <_raise_r+0x1e>
 8009cf6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cfa:	b94b      	cbnz	r3, 8009d10 <_raise_r+0x32>
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f000 f831 	bl	8009d64 <_getpid_r>
 8009d02:	462a      	mov	r2, r5
 8009d04:	4601      	mov	r1, r0
 8009d06:	4620      	mov	r0, r4
 8009d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d0c:	f000 b818 	b.w	8009d40 <_kill_r>
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d00a      	beq.n	8009d2a <_raise_r+0x4c>
 8009d14:	1c59      	adds	r1, r3, #1
 8009d16:	d103      	bne.n	8009d20 <_raise_r+0x42>
 8009d18:	2316      	movs	r3, #22
 8009d1a:	6003      	str	r3, [r0, #0]
 8009d1c:	2001      	movs	r0, #1
 8009d1e:	e7e7      	b.n	8009cf0 <_raise_r+0x12>
 8009d20:	2400      	movs	r4, #0
 8009d22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d26:	4628      	mov	r0, r5
 8009d28:	4798      	blx	r3
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	e7e0      	b.n	8009cf0 <_raise_r+0x12>
	...

08009d30 <raise>:
 8009d30:	4b02      	ldr	r3, [pc, #8]	; (8009d3c <raise+0xc>)
 8009d32:	4601      	mov	r1, r0
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	f7ff bfd2 	b.w	8009cde <_raise_r>
 8009d3a:	bf00      	nop
 8009d3c:	20000088 	.word	0x20000088

08009d40 <_kill_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4d07      	ldr	r5, [pc, #28]	; (8009d60 <_kill_r+0x20>)
 8009d44:	2300      	movs	r3, #0
 8009d46:	4604      	mov	r4, r0
 8009d48:	4608      	mov	r0, r1
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	602b      	str	r3, [r5, #0]
 8009d4e:	f7f8 fa8f 	bl	8002270 <_kill>
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	d102      	bne.n	8009d5c <_kill_r+0x1c>
 8009d56:	682b      	ldr	r3, [r5, #0]
 8009d58:	b103      	cbz	r3, 8009d5c <_kill_r+0x1c>
 8009d5a:	6023      	str	r3, [r4, #0]
 8009d5c:	bd38      	pop	{r3, r4, r5, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000480 	.word	0x20000480

08009d64 <_getpid_r>:
 8009d64:	f7f8 ba7c 	b.w	8002260 <_getpid>

08009d68 <atan>:
 8009d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6c:	ec55 4b10 	vmov	r4, r5, d0
 8009d70:	4bc3      	ldr	r3, [pc, #780]	; (800a080 <atan+0x318>)
 8009d72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d76:	429e      	cmp	r6, r3
 8009d78:	46ab      	mov	fp, r5
 8009d7a:	dd18      	ble.n	8009dae <atan+0x46>
 8009d7c:	4bc1      	ldr	r3, [pc, #772]	; (800a084 <atan+0x31c>)
 8009d7e:	429e      	cmp	r6, r3
 8009d80:	dc01      	bgt.n	8009d86 <atan+0x1e>
 8009d82:	d109      	bne.n	8009d98 <atan+0x30>
 8009d84:	b144      	cbz	r4, 8009d98 <atan+0x30>
 8009d86:	4622      	mov	r2, r4
 8009d88:	462b      	mov	r3, r5
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7f6 fa7d 	bl	800028c <__adddf3>
 8009d92:	4604      	mov	r4, r0
 8009d94:	460d      	mov	r5, r1
 8009d96:	e006      	b.n	8009da6 <atan+0x3e>
 8009d98:	f1bb 0f00 	cmp.w	fp, #0
 8009d9c:	f300 8131 	bgt.w	800a002 <atan+0x29a>
 8009da0:	a59b      	add	r5, pc, #620	; (adr r5, 800a010 <atan+0x2a8>)
 8009da2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009da6:	ec45 4b10 	vmov	d0, r4, r5
 8009daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dae:	4bb6      	ldr	r3, [pc, #728]	; (800a088 <atan+0x320>)
 8009db0:	429e      	cmp	r6, r3
 8009db2:	dc14      	bgt.n	8009dde <atan+0x76>
 8009db4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009db8:	429e      	cmp	r6, r3
 8009dba:	dc0d      	bgt.n	8009dd8 <atan+0x70>
 8009dbc:	a396      	add	r3, pc, #600	; (adr r3, 800a018 <atan+0x2b0>)
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	ee10 0a10 	vmov	r0, s0
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	f7f6 fa60 	bl	800028c <__adddf3>
 8009dcc:	4baf      	ldr	r3, [pc, #700]	; (800a08c <atan+0x324>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f7f6 fea2 	bl	8000b18 <__aeabi_dcmpgt>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d1e6      	bne.n	8009da6 <atan+0x3e>
 8009dd8:	f04f 3aff 	mov.w	sl, #4294967295
 8009ddc:	e02b      	b.n	8009e36 <atan+0xce>
 8009dde:	f000 f963 	bl	800a0a8 <fabs>
 8009de2:	4bab      	ldr	r3, [pc, #684]	; (800a090 <atan+0x328>)
 8009de4:	429e      	cmp	r6, r3
 8009de6:	ec55 4b10 	vmov	r4, r5, d0
 8009dea:	f300 80bf 	bgt.w	8009f6c <atan+0x204>
 8009dee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009df2:	429e      	cmp	r6, r3
 8009df4:	f300 80a0 	bgt.w	8009f38 <atan+0x1d0>
 8009df8:	ee10 2a10 	vmov	r2, s0
 8009dfc:	ee10 0a10 	vmov	r0, s0
 8009e00:	462b      	mov	r3, r5
 8009e02:	4629      	mov	r1, r5
 8009e04:	f7f6 fa42 	bl	800028c <__adddf3>
 8009e08:	4ba0      	ldr	r3, [pc, #640]	; (800a08c <atan+0x324>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f7f6 fa3c 	bl	8000288 <__aeabi_dsub>
 8009e10:	2200      	movs	r2, #0
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7f6 fa35 	bl	800028c <__adddf3>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	f7f6 fd0f 	bl	800084c <__aeabi_ddiv>
 8009e2e:	f04f 0a00 	mov.w	sl, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	460d      	mov	r5, r1
 8009e36:	4622      	mov	r2, r4
 8009e38:	462b      	mov	r3, r5
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	f7f6 fbdb 	bl	80005f8 <__aeabi_dmul>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4680      	mov	r8, r0
 8009e48:	4689      	mov	r9, r1
 8009e4a:	f7f6 fbd5 	bl	80005f8 <__aeabi_dmul>
 8009e4e:	a374      	add	r3, pc, #464	; (adr r3, 800a020 <atan+0x2b8>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	4606      	mov	r6, r0
 8009e56:	460f      	mov	r7, r1
 8009e58:	f7f6 fbce 	bl	80005f8 <__aeabi_dmul>
 8009e5c:	a372      	add	r3, pc, #456	; (adr r3, 800a028 <atan+0x2c0>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	f7f6 fa13 	bl	800028c <__adddf3>
 8009e66:	4632      	mov	r2, r6
 8009e68:	463b      	mov	r3, r7
 8009e6a:	f7f6 fbc5 	bl	80005f8 <__aeabi_dmul>
 8009e6e:	a370      	add	r3, pc, #448	; (adr r3, 800a030 <atan+0x2c8>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f7f6 fa0a 	bl	800028c <__adddf3>
 8009e78:	4632      	mov	r2, r6
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	f7f6 fbbc 	bl	80005f8 <__aeabi_dmul>
 8009e80:	a36d      	add	r3, pc, #436	; (adr r3, 800a038 <atan+0x2d0>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 fa01 	bl	800028c <__adddf3>
 8009e8a:	4632      	mov	r2, r6
 8009e8c:	463b      	mov	r3, r7
 8009e8e:	f7f6 fbb3 	bl	80005f8 <__aeabi_dmul>
 8009e92:	a36b      	add	r3, pc, #428	; (adr r3, 800a040 <atan+0x2d8>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 f9f8 	bl	800028c <__adddf3>
 8009e9c:	4632      	mov	r2, r6
 8009e9e:	463b      	mov	r3, r7
 8009ea0:	f7f6 fbaa 	bl	80005f8 <__aeabi_dmul>
 8009ea4:	a368      	add	r3, pc, #416	; (adr r3, 800a048 <atan+0x2e0>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f7f6 f9ef 	bl	800028c <__adddf3>
 8009eae:	4642      	mov	r2, r8
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	f7f6 fba1 	bl	80005f8 <__aeabi_dmul>
 8009eb6:	a366      	add	r3, pc, #408	; (adr r3, 800a050 <atan+0x2e8>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	4680      	mov	r8, r0
 8009ebe:	4689      	mov	r9, r1
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fb98 	bl	80005f8 <__aeabi_dmul>
 8009ec8:	a363      	add	r3, pc, #396	; (adr r3, 800a058 <atan+0x2f0>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f7f6 f9db 	bl	8000288 <__aeabi_dsub>
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	463b      	mov	r3, r7
 8009ed6:	f7f6 fb8f 	bl	80005f8 <__aeabi_dmul>
 8009eda:	a361      	add	r3, pc, #388	; (adr r3, 800a060 <atan+0x2f8>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f7f6 f9d2 	bl	8000288 <__aeabi_dsub>
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	463b      	mov	r3, r7
 8009ee8:	f7f6 fb86 	bl	80005f8 <__aeabi_dmul>
 8009eec:	a35e      	add	r3, pc, #376	; (adr r3, 800a068 <atan+0x300>)
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f7f6 f9c9 	bl	8000288 <__aeabi_dsub>
 8009ef6:	4632      	mov	r2, r6
 8009ef8:	463b      	mov	r3, r7
 8009efa:	f7f6 fb7d 	bl	80005f8 <__aeabi_dmul>
 8009efe:	a35c      	add	r3, pc, #368	; (adr r3, 800a070 <atan+0x308>)
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f7f6 f9c0 	bl	8000288 <__aeabi_dsub>
 8009f08:	4632      	mov	r2, r6
 8009f0a:	463b      	mov	r3, r7
 8009f0c:	f7f6 fb74 	bl	80005f8 <__aeabi_dmul>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4640      	mov	r0, r8
 8009f16:	4649      	mov	r1, r9
 8009f18:	f7f6 f9b8 	bl	800028c <__adddf3>
 8009f1c:	4622      	mov	r2, r4
 8009f1e:	462b      	mov	r3, r5
 8009f20:	f7f6 fb6a 	bl	80005f8 <__aeabi_dmul>
 8009f24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	d14b      	bne.n	8009fc6 <atan+0x25e>
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7f6 f9a9 	bl	8000288 <__aeabi_dsub>
 8009f36:	e72c      	b.n	8009d92 <atan+0x2a>
 8009f38:	ee10 0a10 	vmov	r0, s0
 8009f3c:	4b53      	ldr	r3, [pc, #332]	; (800a08c <atan+0x324>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 f9a1 	bl	8000288 <__aeabi_dsub>
 8009f46:	4b51      	ldr	r3, [pc, #324]	; (800a08c <atan+0x324>)
 8009f48:	4606      	mov	r6, r0
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	4620      	mov	r0, r4
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7f6 f99b 	bl	800028c <__adddf3>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	f7f6 fc75 	bl	800084c <__aeabi_ddiv>
 8009f62:	f04f 0a01 	mov.w	sl, #1
 8009f66:	4604      	mov	r4, r0
 8009f68:	460d      	mov	r5, r1
 8009f6a:	e764      	b.n	8009e36 <atan+0xce>
 8009f6c:	4b49      	ldr	r3, [pc, #292]	; (800a094 <atan+0x32c>)
 8009f6e:	429e      	cmp	r6, r3
 8009f70:	da1d      	bge.n	8009fae <atan+0x246>
 8009f72:	ee10 0a10 	vmov	r0, s0
 8009f76:	4b48      	ldr	r3, [pc, #288]	; (800a098 <atan+0x330>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	f7f6 f984 	bl	8000288 <__aeabi_dsub>
 8009f80:	4b45      	ldr	r3, [pc, #276]	; (800a098 <atan+0x330>)
 8009f82:	4606      	mov	r6, r0
 8009f84:	460f      	mov	r7, r1
 8009f86:	2200      	movs	r2, #0
 8009f88:	4620      	mov	r0, r4
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	f7f6 fb34 	bl	80005f8 <__aeabi_dmul>
 8009f90:	4b3e      	ldr	r3, [pc, #248]	; (800a08c <atan+0x324>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	f7f6 f97a 	bl	800028c <__adddf3>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	4639      	mov	r1, r7
 8009fa0:	f7f6 fc54 	bl	800084c <__aeabi_ddiv>
 8009fa4:	f04f 0a02 	mov.w	sl, #2
 8009fa8:	4604      	mov	r4, r0
 8009faa:	460d      	mov	r5, r1
 8009fac:	e743      	b.n	8009e36 <atan+0xce>
 8009fae:	462b      	mov	r3, r5
 8009fb0:	ee10 2a10 	vmov	r2, s0
 8009fb4:	4939      	ldr	r1, [pc, #228]	; (800a09c <atan+0x334>)
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	f7f6 fc48 	bl	800084c <__aeabi_ddiv>
 8009fbc:	f04f 0a03 	mov.w	sl, #3
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	460d      	mov	r5, r1
 8009fc4:	e737      	b.n	8009e36 <atan+0xce>
 8009fc6:	4b36      	ldr	r3, [pc, #216]	; (800a0a0 <atan+0x338>)
 8009fc8:	4e36      	ldr	r6, [pc, #216]	; (800a0a4 <atan+0x33c>)
 8009fca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	f7f6 f959 	bl	8000288 <__aeabi_dsub>
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	462b      	mov	r3, r5
 8009fda:	f7f6 f955 	bl	8000288 <__aeabi_dsub>
 8009fde:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009fea:	f7f6 f94d 	bl	8000288 <__aeabi_dsub>
 8009fee:	f1bb 0f00 	cmp.w	fp, #0
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	460d      	mov	r5, r1
 8009ff6:	f6bf aed6 	bge.w	8009da6 <atan+0x3e>
 8009ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ffe:	461d      	mov	r5, r3
 800a000:	e6d1      	b.n	8009da6 <atan+0x3e>
 800a002:	a51d      	add	r5, pc, #116	; (adr r5, 800a078 <atan+0x310>)
 800a004:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a008:	e6cd      	b.n	8009da6 <atan+0x3e>
 800a00a:	bf00      	nop
 800a00c:	f3af 8000 	nop.w
 800a010:	54442d18 	.word	0x54442d18
 800a014:	bff921fb 	.word	0xbff921fb
 800a018:	8800759c 	.word	0x8800759c
 800a01c:	7e37e43c 	.word	0x7e37e43c
 800a020:	e322da11 	.word	0xe322da11
 800a024:	3f90ad3a 	.word	0x3f90ad3a
 800a028:	24760deb 	.word	0x24760deb
 800a02c:	3fa97b4b 	.word	0x3fa97b4b
 800a030:	a0d03d51 	.word	0xa0d03d51
 800a034:	3fb10d66 	.word	0x3fb10d66
 800a038:	c54c206e 	.word	0xc54c206e
 800a03c:	3fb745cd 	.word	0x3fb745cd
 800a040:	920083ff 	.word	0x920083ff
 800a044:	3fc24924 	.word	0x3fc24924
 800a048:	5555550d 	.word	0x5555550d
 800a04c:	3fd55555 	.word	0x3fd55555
 800a050:	2c6a6c2f 	.word	0x2c6a6c2f
 800a054:	bfa2b444 	.word	0xbfa2b444
 800a058:	52defd9a 	.word	0x52defd9a
 800a05c:	3fadde2d 	.word	0x3fadde2d
 800a060:	af749a6d 	.word	0xaf749a6d
 800a064:	3fb3b0f2 	.word	0x3fb3b0f2
 800a068:	fe231671 	.word	0xfe231671
 800a06c:	3fbc71c6 	.word	0x3fbc71c6
 800a070:	9998ebc4 	.word	0x9998ebc4
 800a074:	3fc99999 	.word	0x3fc99999
 800a078:	54442d18 	.word	0x54442d18
 800a07c:	3ff921fb 	.word	0x3ff921fb
 800a080:	440fffff 	.word	0x440fffff
 800a084:	7ff00000 	.word	0x7ff00000
 800a088:	3fdbffff 	.word	0x3fdbffff
 800a08c:	3ff00000 	.word	0x3ff00000
 800a090:	3ff2ffff 	.word	0x3ff2ffff
 800a094:	40038000 	.word	0x40038000
 800a098:	3ff80000 	.word	0x3ff80000
 800a09c:	bff00000 	.word	0xbff00000
 800a0a0:	0800a578 	.word	0x0800a578
 800a0a4:	0800a558 	.word	0x0800a558

0800a0a8 <fabs>:
 800a0a8:	ec51 0b10 	vmov	r0, r1, d0
 800a0ac:	ee10 2a10 	vmov	r2, s0
 800a0b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0b4:	ec43 2b10 	vmov	d0, r2, r3
 800a0b8:	4770      	bx	lr
	...

0800a0bc <_init>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	bf00      	nop
 800a0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	469e      	mov	lr, r3
 800a0c6:	4770      	bx	lr

0800a0c8 <_fini>:
 800a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ca:	bf00      	nop
 800a0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ce:	bc08      	pop	{r3}
 800a0d0:	469e      	mov	lr, r3
 800a0d2:	4770      	bx	lr
