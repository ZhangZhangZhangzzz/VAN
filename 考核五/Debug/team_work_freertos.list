
team_work_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800da78  0800da78  0001da78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e050  0800e050  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800e050  0800e050  0001e050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e058  0800e058  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e058  0800e058  0001e058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e05c  0800e05c  0001e05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800e060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          00005730  20000208  20000208  00020208  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005938  20005938  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014ec2  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d3c  00000000  00000000  0003513d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001248  00000000  00000000  00038e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000df2  00000000  00000000  0003a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025098  00000000  00000000  0003aeba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019177  00000000  00000000  0005ff52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d31c6  00000000  00000000  000790c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ed8  00000000  00000000  0014c290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00152168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da5c 	.word	0x0800da5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800da5c 	.word	0x0800da5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief          hal��CAN�ص�����,���յ������
  * @param[in]      hcan:CAN���ָ��
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);//��������
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	f107 0214 	add.w	r2, r7, #20
 8001000:	2100      	movs	r1, #0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f002 fbd9 	bl	80037ba <HAL_CAN_GetRxMessage>

    switch (rx_header.StdId)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 800100e:	2b03      	cmp	r3, #3
 8001010:	d860      	bhi.n	80010d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
        case CAN_TRIGGER_MOTOR_ID:
        case CAN_FOURTH_MOTOR_ID:
        {
            static uint8_t i = 0;
            //get motor id
            i = rx_header.StdId - CAN_YAW_MOTOR_ID;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3b05      	subs	r3, #5
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800101c:	701a      	strb	r2, [r3, #0]
            get_motor_measure(&motor_chassis[i], rx_data);//�����ݷ���motor_chassis������
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	4a2e      	ldr	r2, [pc, #184]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800102c:	4603      	mov	r3, r0
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4403      	add	r3, r0
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	f9b3 0000 	ldrsh.w	r0, [r3]
 800103a:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800103c:	460b      	mov	r3, r1
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	3308      	adds	r3, #8
 8001048:	4602      	mov	r2, r0
 800104a:	801a      	strh	r2, [r3, #0]
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4922      	ldr	r1, [pc, #136]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001058:	7809      	ldrb	r1, [r1, #0]
 800105a:	4313      	orrs	r3, r2
 800105c:	b218      	sxth	r0, r3
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001060:	460b      	mov	r3, r1
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	4602      	mov	r2, r0
 800106c:	801a      	strh	r2, [r3, #0]
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4919      	ldr	r1, [pc, #100]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800107a:	7809      	ldrb	r1, [r1, #0]
 800107c:	4313      	orrs	r3, r2
 800107e:	b218      	sxth	r0, r3
 8001080:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001082:	460b      	mov	r3, r1
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	3302      	adds	r3, #2
 800108e:	4602      	mov	r2, r0
 8001090:	801a      	strh	r2, [r3, #0]
 8001092:	7c3b      	ldrb	r3, [r7, #16]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	7c7b      	ldrb	r3, [r7, #17]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4910      	ldr	r1, [pc, #64]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800109e:	7809      	ldrb	r1, [r1, #0]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b218      	sxth	r0, r3
 80010a4:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80010a6:	460b      	mov	r3, r1
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	3304      	adds	r3, #4
 80010b2:	4602      	mov	r2, r0
 80010b4:	801a      	strh	r2, [r3, #0]
 80010b6:	7cba      	ldrb	r2, [r7, #18]
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	b250      	sxtb	r0, r2
 80010c0:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80010c2:	460b      	mov	r3, r1
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	3306      	adds	r3, #6
 80010ce:	4602      	mov	r2, r0
 80010d0:	701a      	strb	r2, [r3, #0]
            break;
 80010d2:	e000      	b.n	80010d6 <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
        }

        default:
        {
            break;
 80010d4:	bf00      	nop
        }
    }
}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000028c 	.word	0x2000028c
 80010e4:	20000224 	.word	0x20000224

080010e8 <CAN_cmd_gimbal>:
  * @param[in]      shoot: (0x207) 2006������Ƶ���, ��Χ [-25000~0~25000]
  * @param[in]      rev: (0x208) ������������Ƶ���-25000~0~25000
  * @retval         none
  */
void CAN_cmd_gimbal(int16_t yaw, int16_t pitch, int16_t shoot, int16_t rev)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	4623      	mov	r3, r4
 80010f8:	80fb      	strh	r3, [r7, #6]
 80010fa:	4603      	mov	r3, r0
 80010fc:	80bb      	strh	r3, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	807b      	strh	r3, [r7, #2]
 8001102:	4613      	mov	r3, r2
 8001104:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    gimbal_tx_message.StdId = CAN_GIMBAL_ALL_ID;//0x1FF
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <CAN_cmd_gimbal+0xa8>)
 8001108:	f240 12ff 	movw	r2, #511	; 0x1ff
 800110c:	601a      	str	r2, [r3, #0]
    gimbal_tx_message.IDE = CAN_ID_STD;
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <CAN_cmd_gimbal+0xa8>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    gimbal_tx_message.RTR = CAN_RTR_DATA;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <CAN_cmd_gimbal+0xa8>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    gimbal_tx_message.DLC = 0x08;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <CAN_cmd_gimbal+0xa8>)
 800111c:	2208      	movs	r2, #8
 800111e:	611a      	str	r2, [r3, #16]
    gimbal_can_send_data[0] = (yaw >> 8);
 8001120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001124:	121b      	asrs	r3, r3, #8
 8001126:	b21b      	sxth	r3, r3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <CAN_cmd_gimbal+0xac>)
 800112c:	701a      	strb	r2, [r3, #0]
    gimbal_can_send_data[1] = yaw;
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <CAN_cmd_gimbal+0xac>)
 8001134:	705a      	strb	r2, [r3, #1]
    gimbal_can_send_data[2] = (pitch >> 8);
 8001136:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800113a:	121b      	asrs	r3, r3, #8
 800113c:	b21b      	sxth	r3, r3
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <CAN_cmd_gimbal+0xac>)
 8001142:	709a      	strb	r2, [r3, #2]
    gimbal_can_send_data[3] = pitch;
 8001144:	88bb      	ldrh	r3, [r7, #4]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <CAN_cmd_gimbal+0xac>)
 800114a:	70da      	strb	r2, [r3, #3]
    gimbal_can_send_data[4] = (shoot >> 8);
 800114c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001150:	121b      	asrs	r3, r3, #8
 8001152:	b21b      	sxth	r3, r3
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <CAN_cmd_gimbal+0xac>)
 8001158:	711a      	strb	r2, [r3, #4]
    gimbal_can_send_data[5] = shoot;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <CAN_cmd_gimbal+0xac>)
 8001160:	715a      	strb	r2, [r3, #5]
    gimbal_can_send_data[6] = (rev >> 8);
 8001162:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001166:	121b      	asrs	r3, r3, #8
 8001168:	b21b      	sxth	r3, r3
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <CAN_cmd_gimbal+0xac>)
 800116e:	719a      	strb	r2, [r3, #6]
    gimbal_can_send_data[7] = rev;
 8001170:	883b      	ldrh	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <CAN_cmd_gimbal+0xac>)
 8001176:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&GIMBAL_CAN, &gimbal_tx_message, gimbal_can_send_data, &send_mail_box);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <CAN_cmd_gimbal+0xac>)
 800117e:	4904      	ldr	r1, [pc, #16]	; (8001190 <CAN_cmd_gimbal+0xa8>)
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <CAN_cmd_gimbal+0xb0>)
 8001182:	f002 fa3f 	bl	8003604 <HAL_CAN_AddTxMessage>
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	2000026c 	.word	0x2000026c
 8001194:	20000284 	.word	0x20000284
 8001198:	20000290 	.word	0x20000290

0800119c <can_filter_init>:

extern CAN_HandleTypeDef hcan1;


void can_filter_init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0

    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 80011a2:	2301      	movs	r3, #1
 80011a4:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <can_filter_init+0x4c>)
 80011cc:	f002 f8f6 	bl	80033bc <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <can_filter_init+0x4c>)
 80011d2:	f002 f9d3 	bl	800357c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011d6:	2102      	movs	r1, #2
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <can_filter_init+0x4c>)
 80011da:	f002 fc00 	bl	80039de <HAL_CAN_ActivateNotification>
//    HAL_CAN_Start(&hcan2);
 //   HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);



}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	; 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000290 	.word	0x20000290

080011ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_CAN1_Init+0x64>)
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_CAN1_Init+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_CAN1_Init+0x64>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_CAN1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_CAN1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_CAN1_Init+0x64>)
 800120a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800120e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_CAN1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_CAN1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_CAN1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_CAN1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_CAN1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_CAN1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_CAN1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_CAN1_Init+0x64>)
 800123c:	f001 ffc2 	bl	80031c4 <HAL_CAN_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001246:	f001 f9cb 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000290 	.word	0x20000290
 8001254:	40006400 	.word	0x40006400

08001258 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_CAN_MspInit+0x94>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d133      	bne.n	80012e2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <HAL_CAN_MspInit+0x98>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_CAN_MspInit+0x98>)
 8001284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_CAN_MspInit+0x98>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_CAN_MspInit+0x98>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_CAN_MspInit+0x98>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_CAN_MspInit+0x98>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b2:	2303      	movs	r3, #3
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012c2:	2309      	movs	r3, #9
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_CAN_MspInit+0x9c>)
 80012ce:	f003 faef 	bl	80048b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	2014      	movs	r0, #20
 80012d8:	f002 feb1 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012dc:	2014      	movs	r0, #20
 80012de:	f002 feca 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40006400 	.word	0x40006400
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020c00 	.word	0x40020c00

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_DMA_Init+0x4c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <MX_DMA_Init+0x4c>)
 8001308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <MX_DMA_Init+0x4c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2105      	movs	r1, #5
 800131e:	203a      	movs	r0, #58	; 0x3a
 8001320:	f002 fe8d 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001324:	203a      	movs	r0, #58	; 0x3a
 8001326:	f002 fea6 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2105      	movs	r1, #5
 800132e:	2046      	movs	r0, #70	; 0x46
 8001330:	f002 fe85 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001334:	2046      	movs	r0, #70	; 0x46
 8001336:	f002 fe9e 	bl	8004076 <HAL_NVIC_EnableIRQ>

}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <vApplicationGetIdleTaskMemory+0x2c>)
 8001358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <vApplicationGetIdleTaskMemory+0x30>)
 800135e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200003cc 	.word	0x200003cc
 8001378:	20000420 	.word	0x20000420

0800137c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800137c:	b5b0      	push	{r4, r5, r7, lr}
 800137e:	b096      	sub	sp, #88	; 0x58
 8001380:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UART_DMA */
  osThreadDef(UART_DMA, StartDefaultTask, osPriorityNormal, 0, 128);
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_FREERTOS_Init+0x7c>)
 8001384:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001388:	461d      	mov	r5, r3
 800138a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_DMAHandle = osThreadCreate(osThread(UART_DMA), NULL);
 8001396:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f006 fb8e 	bl	8007abe <osThreadCreate>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a15      	ldr	r2, [pc, #84]	; (80013fc <MX_FREERTOS_Init+0x80>)
 80013a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of IMU_Start */
  osThreadDef(IMU_Start, StartTask02, osPriorityIdle, 0, 512);
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_FREERTOS_Init+0x84>)
 80013aa:	f107 0420 	add.w	r4, r7, #32
 80013ae:	461d      	mov	r5, r3
 80013b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMU_StartHandle = osThreadCreate(osThread(IMU_Start), NULL);
 80013bc:	f107 0320 	add.w	r3, r7, #32
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f006 fb7b 	bl	8007abe <osThreadCreate>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <MX_FREERTOS_Init+0x88>)
 80013cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of CAN_GM6050 */
  osThreadDef(CAN_GM6050, StartTask03, osPriorityIdle, 0, 2048);
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_FREERTOS_Init+0x8c>)
 80013d0:	1d3c      	adds	r4, r7, #4
 80013d2:	461d      	mov	r5, r3
 80013d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CAN_GM6050Handle = osThreadCreate(osThread(CAN_GM6050), NULL);
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f006 fb6a 	bl	8007abe <osThreadCreate>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <MX_FREERTOS_Init+0x90>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013f0:	bf00      	nop
 80013f2:	3758      	adds	r7, #88	; 0x58
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bdb0      	pop	{r4, r5, r7, pc}
 80013f8:	0800da84 	.word	0x0800da84
 80013fc:	200003c0 	.word	0x200003c0
 8001400:	0800daac 	.word	0x0800daac
 8001404:	200003c4 	.word	0x200003c4
 8001408:	0800dad4 	.word	0x0800dad4
 800140c:	200003c8 	.word	0x200003c8

08001410 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) ReceiveData, sizeof(ReceiveData));//开启DMA
 8001418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <StartDefaultTask+0x2c>)
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <StartDefaultTask+0x30>)
 8001420:	f005 f972 	bl	8006708 <HAL_UARTEx_ReceiveToIdle_DMA>
	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);//关闭 DMA半完成通道，以防数据传输一半就进入中断回调函数
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <StartDefaultTask+0x34>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <StartDefaultTask+0x34>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0208 	bic.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]


	  //TASK1:DMA_UART


    osDelay(5);
 8001434:	2005      	movs	r0, #5
 8001436:	f006 fb8e 	bl	8007b56 <osDelay>
 800143a:	e7fb      	b.n	8001434 <StartDefaultTask+0x24>
 800143c:	200002b8 	.word	0x200002b8
 8001440:	20000770 	.word	0x20000770
 8001444:	200007b4 	.word	0x200007b4

08001448 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  //TASK2:MPU6050
	  Angle_Calcu();
 8001450:	f000 fa0e 	bl	8001870 <Angle_Calcu>
	  osDelay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f006 fb7e 	bl	8007b56 <osDelay>
	  Angle_Calcu();
 800145a:	e7f9      	b.n	8001450 <StartTask02+0x8>

0800145c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800145c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af04      	add	r7, sp, #16
 8001464:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

	  	  now_yaw_angle = (float)(motor_chassis[0].ecd - 0)/8191.0f * 360.0f;
 8001466:	4b6d      	ldr	r3, [pc, #436]	; (800161c <StartTask03+0x1c0>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001474:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001620 <StartTask03+0x1c4>
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001624 <StartTask03+0x1c8>
 8001480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001484:	4b68      	ldr	r3, [pc, #416]	; (8001628 <StartTask03+0x1cc>)
 8001486:	edc3 7a00 	vstr	s15, [r3]

	  	  cnt++;
 800148a:	4b68      	ldr	r3, [pc, #416]	; (800162c <StartTask03+0x1d0>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	b29b      	uxth	r3, r3
 8001492:	3301      	adds	r3, #1
 8001494:	b29b      	uxth	r3, r3
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b64      	ldr	r3, [pc, #400]	; (800162c <StartTask03+0x1d0>)
 800149a:	801a      	strh	r2, [r3, #0]
	  	  if(cnt >= 100)
 800149c:	4b63      	ldr	r3, [pc, #396]	; (800162c <StartTask03+0x1d0>)
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	2b63      	cmp	r3, #99	; 0x63
 80014a4:	dd30      	ble.n	8001508 <StartTask03+0xac>
	  	  {
	  		  cnt = 0 ;
 80014a6:	4b61      	ldr	r3, [pc, #388]	; (800162c <StartTask03+0x1d0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	801a      	strh	r2, [r3, #0]
	  		  target_yaw_angle += (float)deviation_angle;
 80014ac:	4b60      	ldr	r3, [pc, #384]	; (8001630 <StartTask03+0x1d4>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ba:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <StartTask03+0x1d8>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c4:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <StartTask03+0x1d8>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
	  		  target_yaw_speed += deviation_speed;
 80014ca:	4b5b      	ldr	r3, [pc, #364]	; (8001638 <StartTask03+0x1dc>)
 80014cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b5a      	ldr	r3, [pc, #360]	; (800163c <StartTask03+0x1e0>)
 80014d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4413      	add	r3, r2
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b55      	ldr	r3, [pc, #340]	; (8001638 <StartTask03+0x1dc>)
 80014e2:	801a      	strh	r2, [r3, #0]
	  		  deviation_speed = - deviation_speed ;
 80014e4:	4b55      	ldr	r3, [pc, #340]	; (800163c <StartTask03+0x1e0>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	425b      	negs	r3, r3
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	4b52      	ldr	r3, [pc, #328]	; (800163c <StartTask03+0x1e0>)
 80014f4:	801a      	strh	r2, [r3, #0]
	  		  deviation_angle = - deviation_angle ;
 80014f6:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <StartTask03+0x1d4>)
 80014f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	425b      	negs	r3, r3
 8001500:	b29b      	uxth	r3, r3
 8001502:	b21a      	sxth	r2, r3
 8001504:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <StartTask03+0x1d4>)
 8001506:	801a      	strh	r2, [r3, #0]

	  	  }

	  	  if(flag == 0)
 8001508:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <StartTask03+0x1e4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d135      	bne.n	800157c <StartTask03+0x120>
	  	  {
	  		  pid_calc(&gimbal_yaw_speed_pid,target_yaw_speed, (motor_chassis[0]).speed_rpm);
 8001510:	4b49      	ldr	r3, [pc, #292]	; (8001638 <StartTask03+0x1dc>)
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <StartTask03+0x1c0>)
 8001520:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001524:	ee07 3a10 	vmov	s14, r3
 8001528:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 0a67 	vmov.f32	s0, s15
 8001534:	4843      	ldr	r0, [pc, #268]	; (8001644 <StartTask03+0x1e8>)
 8001536:	f001 fa37 	bl	80029a8 <pid_calc>
	  		  CAN_cmd_gimbal(gimbal_yaw_speed_pid.output,0, 0, 0);//
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <StartTask03+0x1e8>)
 800153c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001544:	ee17 3a90 	vmov	r3, s15
 8001548:	b218      	sxth	r0, r3
 800154a:	2300      	movs	r3, #0
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	f7ff fdca 	bl	80010e8 <CAN_cmd_gimbal>
	  		  printf(" %f, %d ,%d \r\n",gimbal_yaw_speed_pid.output,(motor_chassis[0]).speed_rpm,target_yaw_speed);
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <StartTask03+0x1e8>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fff5 	bl	8000548 <__aeabi_f2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	492e      	ldr	r1, [pc, #184]	; (800161c <StartTask03+0x1c0>)
 8001564:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8001568:	4608      	mov	r0, r1
 800156a:	4933      	ldr	r1, [pc, #204]	; (8001638 <StartTask03+0x1dc>)
 800156c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001570:	9101      	str	r1, [sp, #4]
 8001572:	9000      	str	r0, [sp, #0]
 8001574:	4834      	ldr	r0, [pc, #208]	; (8001648 <StartTask03+0x1ec>)
 8001576:	f008 fc17 	bl	8009da8 <iprintf>
 800157a:	e037      	b.n	80015ec <StartTask03+0x190>
	  	  }
	  	  else
	  	  {
	  		 pid_calc(&gimbal_yaw_angle_pid,target_yaw_angle, now_yaw_angle);
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <StartTask03+0x1d8>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <StartTask03+0x1cc>)
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	eef0 0a47 	vmov.f32	s1, s14
 800158c:	eeb0 0a67 	vmov.f32	s0, s15
 8001590:	482e      	ldr	r0, [pc, #184]	; (800164c <StartTask03+0x1f0>)
 8001592:	f001 fa09 	bl	80029a8 <pid_calc>
	  		 CAN_cmd_gimbal(gimbal_yaw_angle_pid.output,0, 0, 0);
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <StartTask03+0x1f0>)
 8001598:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800159c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a0:	ee17 3a90 	vmov	r3, s15
 80015a4:	b218      	sxth	r0, r3
 80015a6:	2300      	movs	r3, #0
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	f7ff fd9c 	bl	80010e8 <CAN_cmd_gimbal>
	  		 printf("%f ,%f , %f \r\n",gimbal_yaw_angle_pid.output,now_yaw_angle,target_yaw_angle);
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <StartTask03+0x1f0>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffc7 	bl	8000548 <__aeabi_f2d>
 80015ba:	4680      	mov	r8, r0
 80015bc:	4689      	mov	r9, r1
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <StartTask03+0x1cc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffc0 	bl	8000548 <__aeabi_f2d>
 80015c8:	4604      	mov	r4, r0
 80015ca:	460d      	mov	r5, r1
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <StartTask03+0x1d8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffb9 	bl	8000548 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015de:	e9cd 4500 	strd	r4, r5, [sp]
 80015e2:	4642      	mov	r2, r8
 80015e4:	464b      	mov	r3, r9
 80015e6:	481a      	ldr	r0, [pc, #104]	; (8001650 <StartTask03+0x1f4>)
 80015e8:	f008 fbde 	bl	8009da8 <iprintf>
	  	  }



	  	  	  printf("ecd,speed_rpm,given_current,temperate:%d,%d,%d,%d \r\n", (motor_chassis[0]).ecd, (motor_chassis[0]).speed_rpm, (motor_chassis[0]).given_current, (motor_chassis[0]).temperate);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <StartTask03+0x1c0>)
 80015ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <StartTask03+0x1c0>)
 80015f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <StartTask03+0x1c0>)
 80015fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <StartTask03+0x1c0>)
 8001606:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	4603      	mov	r3, r0
 800160e:	4811      	ldr	r0, [pc, #68]	; (8001654 <StartTask03+0x1f8>)
 8001610:	f008 fbca 	bl	8009da8 <iprintf>
    osDelay(20);
 8001614:	2014      	movs	r0, #20
 8001616:	f006 fa9e 	bl	8007b56 <osDelay>
	  	  now_yaw_angle = (float)(motor_chassis[0].ecd - 0)/8191.0f * 360.0f;
 800161a:	e724      	b.n	8001466 <StartTask03+0xa>
 800161c:	20000224 	.word	0x20000224
 8001620:	45fff800 	.word	0x45fff800
 8001624:	43b40000 	.word	0x43b40000
 8001628:	200003bc 	.word	0x200003bc
 800162c:	200003ba 	.word	0x200003ba
 8001630:	20000000 	.word	0x20000000
 8001634:	20000008 	.word	0x20000008
 8001638:	20000004 	.word	0x20000004
 800163c:	20000002 	.word	0x20000002
 8001640:	200003b8 	.word	0x200003b8
 8001644:	20000704 	.word	0x20000704
 8001648:	0800daf0 	.word	0x0800daf0
 800164c:	20000738 	.word	0x20000738
 8001650:	0800db00 	.word	0x0800db00
 8001654:	0800db10 	.word	0x0800db10

08001658 <MX_GPIO_Init>:
     PB4   ------> SPI1_MISO
     PB3   ------> SPI1_SCK
     PA7   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b40      	ldr	r3, [pc, #256]	; (8001774 <MX_GPIO_Init+0x11c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a3f      	ldr	r2, [pc, #252]	; (8001774 <MX_GPIO_Init+0x11c>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <MX_GPIO_Init+0x11c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <MX_GPIO_Init+0x11c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a38      	ldr	r2, [pc, #224]	; (8001774 <MX_GPIO_Init+0x11c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <MX_GPIO_Init+0x11c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b32      	ldr	r3, [pc, #200]	; (8001774 <MX_GPIO_Init+0x11c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a31      	ldr	r2, [pc, #196]	; (8001774 <MX_GPIO_Init+0x11c>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <MX_GPIO_Init+0x11c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <MX_GPIO_Init+0x11c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a2a      	ldr	r2, [pc, #168]	; (8001774 <MX_GPIO_Init+0x11c>)
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b28      	ldr	r3, [pc, #160]	; (8001774 <MX_GPIO_Init+0x11c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2110      	movs	r1, #16
 80016e2:	4825      	ldr	r0, [pc, #148]	; (8001778 <MX_GPIO_Init+0x120>)
 80016e4:	f003 fa80 	bl	8004be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2101      	movs	r1, #1
 80016ec:	4823      	ldr	r0, [pc, #140]	; (800177c <MX_GPIO_Init+0x124>)
 80016ee:	f003 fa7b 	bl	8004be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80016f2:	2318      	movs	r3, #24
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001702:	2305      	movs	r3, #5
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	481b      	ldr	r0, [pc, #108]	; (800177c <MX_GPIO_Init+0x124>)
 800170e:	f003 f8cf 	bl	80048b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001712:	2310      	movs	r3, #16
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <MX_GPIO_Init+0x120>)
 800172a:	f003 f8c1 	bl	80048b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800173e:	2305      	movs	r3, #5
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <MX_GPIO_Init+0x120>)
 800174a:	f003 f8b1 	bl	80048b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_GPIO_Init+0x124>)
 8001766:	f003 f8a3 	bl	80048b0 <HAL_GPIO_Init>

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400

08001780 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_I2C2_Init+0x50>)
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <MX_I2C2_Init+0x54>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_I2C2_Init+0x50>)
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <MX_I2C2_Init+0x58>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_I2C2_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_I2C2_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_I2C2_Init+0x50>)
 800179e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <MX_I2C2_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_I2C2_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <MX_I2C2_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_I2C2_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_I2C2_Init+0x50>)
 80017be:	f003 fa2d 	bl	8004c1c <HAL_I2C_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017c8:	f000 ff0a 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000620 	.word	0x20000620
 80017d4:	40005800 	.word	0x40005800
 80017d8:	00061a80 	.word	0x00061a80

080017dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_I2C_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12b      	bne.n	8001856 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800181a:	2303      	movs	r3, #3
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181e:	2312      	movs	r3, #18
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800182a:	2304      	movs	r3, #4
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <HAL_I2C_MspInit+0x8c>)
 8001836:	f003 f83b 	bl	80048b0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_I2C_MspInit+0x88>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40005800 	.word	0x40005800
 8001864:	40023800 	.word	0x40023800
 8001868:	40021400 	.word	0x40021400
 800186c:	00000000 	.word	0x00000000

08001870 <Angle_Calcu>:
float Angle_X_Final; 		//X最终倾斜角度
float Angle_Y_Final; 		//Y最终倾斜角度

//读取数据预处理
void Angle_Calcu(void)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af04      	add	r7, sp, #16
	//1.原始数据读取
	float accx,accy,accz;//三方向角加速度值



	MPU_Get_Gyroscope();
 8001876:	f000 ff87 	bl	8002788 <MPU_Get_Gyroscope>
	MPU_Get_Accelerometer();
 800187a:	f000 ffb5 	bl	80027e8 <MPU_Get_Accelerometer>

	aacx  = IMU_Data.Accel_X;
 800187e:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <Angle_Calcu+0x1c0>)
 8001880:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001884:	4b6b      	ldr	r3, [pc, #428]	; (8001a34 <Angle_Calcu+0x1c4>)
 8001886:	801a      	strh	r2, [r3, #0]
	aacy  = IMU_Data.Accel_Y;
 8001888:	4b69      	ldr	r3, [pc, #420]	; (8001a30 <Angle_Calcu+0x1c0>)
 800188a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800188e:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <Angle_Calcu+0x1c8>)
 8001890:	801a      	strh	r2, [r3, #0]
	aacz  = IMU_Data.Accel_Z;
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <Angle_Calcu+0x1c0>)
 8001894:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001898:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <Angle_Calcu+0x1cc>)
 800189a:	801a      	strh	r2, [r3, #0]
	gyrox = IMU_Data.Gyro_X;
 800189c:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <Angle_Calcu+0x1c0>)
 800189e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <Angle_Calcu+0x1d0>)
 80018a4:	801a      	strh	r2, [r3, #0]
	gyroy = IMU_Data.Gyro_Y;
 80018a6:	4b62      	ldr	r3, [pc, #392]	; (8001a30 <Angle_Calcu+0x1c0>)
 80018a8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80018ac:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <Angle_Calcu+0x1d4>)
 80018ae:	801a      	strh	r2, [r3, #0]
	gyroz = IMU_Data.Gyro_Z;
 80018b0:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <Angle_Calcu+0x1c0>)
 80018b2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80018b6:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <Angle_Calcu+0x1d8>)
 80018b8:	801a      	strh	r2, [r3, #0]


	printf("Accel,Gyro: %d,%d,%d  %d,%d,%d \r\n",aacx,aacy,aacz,gyrox,gyroy,gyroz);
 80018ba:	4b5e      	ldr	r3, [pc, #376]	; (8001a34 <Angle_Calcu+0x1c4>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	4618      	mov	r0, r3
 80018c2:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <Angle_Calcu+0x1c8>)
 80018c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c8:	461c      	mov	r4, r3
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <Angle_Calcu+0x1cc>)
 80018cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d0:	461d      	mov	r5, r3
 80018d2:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <Angle_Calcu+0x1d0>)
 80018d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <Angle_Calcu+0x1d4>)
 80018dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e0:	4619      	mov	r1, r3
 80018e2:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <Angle_Calcu+0x1d8>)
 80018e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	9101      	str	r1, [sp, #4]
 80018ec:	9200      	str	r2, [sp, #0]
 80018ee:	462b      	mov	r3, r5
 80018f0:	4622      	mov	r2, r4
 80018f2:	4601      	mov	r1, r0
 80018f4:	4855      	ldr	r0, [pc, #340]	; (8001a4c <Angle_Calcu+0x1dc>)
 80018f6:	f008 fa57 	bl	8009da8 <iprintf>
	//temperature = GYR_TMPU_Get_Temperature();		//得到温度值
	Accel_x = (float)aacx;//x轴加速度值暂存
 80018fa:	4b4e      	ldr	r3, [pc, #312]	; (8001a34 <Angle_Calcu+0x1c4>)
 80018fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	4b51      	ldr	r3, [pc, #324]	; (8001a50 <Angle_Calcu+0x1e0>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
	Accel_y = (float)aacy;//y轴加速度值暂存
 800190e:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <Angle_Calcu+0x1c8>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191c:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <Angle_Calcu+0x1e4>)
 800191e:	edc3 7a00 	vstr	s15, [r3]
	Accel_z = (float)aacz;//z轴加速度值暂存
 8001922:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <Angle_Calcu+0x1cc>)
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001930:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <Angle_Calcu+0x1e8>)
 8001932:	edc3 7a00 	vstr	s15, [r3]
	Gyro_x  = (float)gyrox;//x轴陀螺仪值暂存
 8001936:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <Angle_Calcu+0x1d0>)
 8001938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <Angle_Calcu+0x1ec>)
 8001946:	edc3 7a00 	vstr	s15, [r3]
	Gyro_y  = (float)gyroy;//y轴陀螺仪值暂存
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <Angle_Calcu+0x1d4>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <Angle_Calcu+0x1f0>)
 800195a:	edc3 7a00 	vstr	s15, [r3]
	Gyro_z  = (float)gyroz;//z轴陀螺仪值暂存
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <Angle_Calcu+0x1d8>)
 8001960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <Angle_Calcu+0x1f4>)
 800196e:	edc3 7a00 	vstr	s15, [r3]

	//2.角加速度原始值处理过程
	//加速度传感器配置寄存器0X1C内写入0x01,设置范围为±2g。换算关系：2^16/4 = 16384LSB/g
	if(Accel_x<32764) accx=Accel_x/16384;//计算x轴加速度
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <Angle_Calcu+0x1e0>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001a68 <Angle_Calcu+0x1f8>
 800197c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	d509      	bpl.n	800199a <Angle_Calcu+0x12a>
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <Angle_Calcu+0x1e0>)
 8001988:	ed93 7a00 	vldr	s14, [r3]
 800198c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001a6c <Angle_Calcu+0x1fc>
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	edc7 7a03 	vstr	s15, [r7, #12]
 8001998:	e010      	b.n	80019bc <Angle_Calcu+0x14c>
	else              accx=1-(Accel_x-49152)/16384;
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <Angle_Calcu+0x1e0>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001a70 <Angle_Calcu+0x200>
 80019a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001a6c <Angle_Calcu+0x1fc>
 80019ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b8:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Accel_y<32764) accy=Accel_y/16384;//计算y轴加速度
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <Angle_Calcu+0x1e4>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001a68 <Angle_Calcu+0x1f8>
 80019c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	d509      	bpl.n	80019e4 <Angle_Calcu+0x174>
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <Angle_Calcu+0x1e4>)
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001a6c <Angle_Calcu+0x1fc>
 80019da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019de:	edc7 7a02 	vstr	s15, [r7, #8]
 80019e2:	e010      	b.n	8001a06 <Angle_Calcu+0x196>
	else              accy=1-(Accel_y-49152)/16384;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <Angle_Calcu+0x1e4>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001a70 <Angle_Calcu+0x200>
 80019ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019f2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001a6c <Angle_Calcu+0x1fc>
 80019f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a02:	edc7 7a02 	vstr	s15, [r7, #8]
	if(Accel_z<32764) accz=Accel_z/16384;//计算z轴加速度
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <Angle_Calcu+0x1e8>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001a68 <Angle_Calcu+0x1f8>
 8001a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	d52c      	bpl.n	8001a74 <Angle_Calcu+0x204>
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <Angle_Calcu+0x1e8>)
 8001a1c:	ed93 7a00 	vldr	s14, [r3]
 8001a20:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001a6c <Angle_Calcu+0x1fc>
 8001a24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a28:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a2c:	e02f      	b.n	8001a8e <Angle_Calcu+0x21e>
 8001a2e:	bf00      	nop
 8001a30:	200006e8 	.word	0x200006e8
 8001a34:	20000674 	.word	0x20000674
 8001a38:	20000676 	.word	0x20000676
 8001a3c:	20000678 	.word	0x20000678
 8001a40:	2000067a 	.word	0x2000067a
 8001a44:	2000067c 	.word	0x2000067c
 8001a48:	2000067e 	.word	0x2000067e
 8001a4c:	0800db48 	.word	0x0800db48
 8001a50:	20000680 	.word	0x20000680
 8001a54:	20000684 	.word	0x20000684
 8001a58:	20000688 	.word	0x20000688
 8001a5c:	2000068c 	.word	0x2000068c
 8001a60:	20000690 	.word	0x20000690
 8001a64:	20000694 	.word	0x20000694
 8001a68:	46fff800 	.word	0x46fff800
 8001a6c:	46800000 	.word	0x46800000
 8001a70:	47400000 	.word	0x47400000
	else              accz=(Accel_z-49152)/16384;
 8001a74:	4bce      	ldr	r3, [pc, #824]	; (8001db0 <Angle_Calcu+0x540>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8001db4 <Angle_Calcu+0x544>
 8001a7e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a82:	eddf 6acd 	vldr	s13, [pc, #820]	; 8001db8 <Angle_Calcu+0x548>
 8001a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8a:	edc7 7a01 	vstr	s15, [r7, #4]
	//加速度反正切公式计算三个轴和水平面坐标系之间的夹角
	Angle_x_temp=(atan(accy/accz))*180/3.14;
 8001a8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a9a:	ee16 0a90 	vmov	r0, s13
 8001a9e:	f7fe fd53 	bl	8000548 <__aeabi_f2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	ec43 2b10 	vmov	d0, r2, r3
 8001aaa:	f00b fe2d 	bl	800d708 <atan>
 8001aae:	ec51 0b10 	vmov	r0, r1, d0
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4bc1      	ldr	r3, [pc, #772]	; (8001dbc <Angle_Calcu+0x54c>)
 8001ab8:	f7fe fd9e 	bl	80005f8 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	a3b6      	add	r3, pc, #728	; (adr r3, 8001da0 <Angle_Calcu+0x530>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe febf 	bl	800084c <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f887 	bl	8000be8 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4ab8      	ldr	r2, [pc, #736]	; (8001dc0 <Angle_Calcu+0x550>)
 8001ade:	6013      	str	r3, [r2, #0]
	Angle_y_temp=(atan(accx/accz))*180/3.14;
 8001ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ae4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001aec:	ee16 0a90 	vmov	r0, s13
 8001af0:	f7fe fd2a 	bl	8000548 <__aeabi_f2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	ec43 2b10 	vmov	d0, r2, r3
 8001afc:	f00b fe04 	bl	800d708 <atan>
 8001b00:	ec51 0b10 	vmov	r0, r1, d0
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4bac      	ldr	r3, [pc, #688]	; (8001dbc <Angle_Calcu+0x54c>)
 8001b0a:	f7fe fd75 	bl	80005f8 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	a3a2      	add	r3, pc, #648	; (adr r3, 8001da0 <Angle_Calcu+0x530>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fe96 	bl	800084c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f85e 	bl	8000be8 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4aa5      	ldr	r2, [pc, #660]	; (8001dc4 <Angle_Calcu+0x554>)
 8001b30:	6013      	str	r3, [r2, #0]
	//未经任何处理的原始欧拉角打印
//	Printf("R P :%f , %f \r\n",Angle_x_temp,Angle_y_temp);


	//判断计算后角度的正负号
	if(Accel_x<32764) Angle_y_temp = +Angle_y_temp;
 8001b32:	4ba5      	ldr	r3, [pc, #660]	; (8001dc8 <Angle_Calcu+0x558>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001dcc <Angle_Calcu+0x55c>
 8001b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b44:	d503      	bpl.n	8001b4e <Angle_Calcu+0x2de>
 8001b46:	4b9f      	ldr	r3, [pc, #636]	; (8001dc4 <Angle_Calcu+0x554>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a9e      	ldr	r2, [pc, #632]	; (8001dc4 <Angle_Calcu+0x554>)
 8001b4c:	6013      	str	r3, [r2, #0]
	if(Accel_x>32764) Angle_y_temp = -Angle_y_temp;
 8001b4e:	4b9e      	ldr	r3, [pc, #632]	; (8001dc8 <Angle_Calcu+0x558>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001dcc <Angle_Calcu+0x55c>
 8001b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	dd07      	ble.n	8001b72 <Angle_Calcu+0x302>
 8001b62:	4b98      	ldr	r3, [pc, #608]	; (8001dc4 <Angle_Calcu+0x554>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	eef1 7a67 	vneg.f32	s15, s15
 8001b6c:	4b95      	ldr	r3, [pc, #596]	; (8001dc4 <Angle_Calcu+0x554>)
 8001b6e:	edc3 7a00 	vstr	s15, [r3]
	if(Accel_y<32764) Angle_x_temp = +Angle_x_temp;
 8001b72:	4b97      	ldr	r3, [pc, #604]	; (8001dd0 <Angle_Calcu+0x560>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001dcc <Angle_Calcu+0x55c>
 8001b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b84:	d503      	bpl.n	8001b8e <Angle_Calcu+0x31e>
 8001b86:	4b8e      	ldr	r3, [pc, #568]	; (8001dc0 <Angle_Calcu+0x550>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a8d      	ldr	r2, [pc, #564]	; (8001dc0 <Angle_Calcu+0x550>)
 8001b8c:	6013      	str	r3, [r2, #0]
	if(Accel_y>32764) Angle_x_temp = -Angle_x_temp;
 8001b8e:	4b90      	ldr	r3, [pc, #576]	; (8001dd0 <Angle_Calcu+0x560>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001dcc <Angle_Calcu+0x55c>
 8001b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	dd07      	ble.n	8001bb2 <Angle_Calcu+0x342>
 8001ba2:	4b87      	ldr	r3, [pc, #540]	; (8001dc0 <Angle_Calcu+0x550>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	eef1 7a67 	vneg.f32	s15, s15
 8001bac:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <Angle_Calcu+0x550>)
 8001bae:	edc3 7a00 	vstr	s15, [r3]


	//3.角速度原始值处理过程
	//陀螺仪配置寄存器0X1B内写入0x18，设置范围为±2000deg/s。换算关系：2^16/4000=16.4LSB/(°/S)
	//计算角速度
	if(Gyro_x<32768) Gyro_x=-(Gyro_x/16.4);
 8001bb2:	4b88      	ldr	r3, [pc, #544]	; (8001dd4 <Angle_Calcu+0x564>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001dd8 <Angle_Calcu+0x568>
 8001bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d517      	bpl.n	8001bf6 <Angle_Calcu+0x386>
 8001bc6:	4b83      	ldr	r3, [pc, #524]	; (8001dd4 <Angle_Calcu+0x564>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcbc 	bl	8000548 <__aeabi_f2d>
 8001bd0:	a375      	add	r3, pc, #468	; (adr r3, 8001da8 <Angle_Calcu+0x538>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fe39 	bl	800084c <__aeabi_ddiv>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f801 	bl	8000be8 <__aeabi_d2f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef1 7a67 	vneg.f32	s15, s15
 8001bf0:	4b78      	ldr	r3, [pc, #480]	; (8001dd4 <Angle_Calcu+0x564>)
 8001bf2:	edc3 7a00 	vstr	s15, [r3]
	if(Gyro_x>32768) Gyro_x=+(65535-Gyro_x)/16.4;
 8001bf6:	4b77      	ldr	r3, [pc, #476]	; (8001dd4 <Angle_Calcu+0x564>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001dd8 <Angle_Calcu+0x568>
 8001c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c08:	dd18      	ble.n	8001c3c <Angle_Calcu+0x3cc>
 8001c0a:	4b72      	ldr	r3, [pc, #456]	; (8001dd4 <Angle_Calcu+0x564>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001ddc <Angle_Calcu+0x56c>
 8001c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c18:	ee17 0a90 	vmov	r0, s15
 8001c1c:	f7fe fc94 	bl	8000548 <__aeabi_f2d>
 8001c20:	a361      	add	r3, pc, #388	; (adr r3, 8001da8 <Angle_Calcu+0x538>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fe11 	bl	800084c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7fe ffd9 	bl	8000be8 <__aeabi_d2f>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a66      	ldr	r2, [pc, #408]	; (8001dd4 <Angle_Calcu+0x564>)
 8001c3a:	6013      	str	r3, [r2, #0]
	if(Gyro_y<32768) Gyro_y=-(Gyro_y/16.4);
 8001c3c:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <Angle_Calcu+0x570>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001dd8 <Angle_Calcu+0x568>
 8001c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d517      	bpl.n	8001c80 <Angle_Calcu+0x410>
 8001c50:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <Angle_Calcu+0x570>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc77 	bl	8000548 <__aeabi_f2d>
 8001c5a:	a353      	add	r3, pc, #332	; (adr r3, 8001da8 <Angle_Calcu+0x538>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fdf4 	bl	800084c <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe ffbc 	bl	8000be8 <__aeabi_d2f>
 8001c70:	4603      	mov	r3, r0
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eef1 7a67 	vneg.f32	s15, s15
 8001c7a:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <Angle_Calcu+0x570>)
 8001c7c:	edc3 7a00 	vstr	s15, [r3]
	if(Gyro_y>32768) Gyro_y=+(65535-Gyro_y)/16.4;
 8001c80:	4b57      	ldr	r3, [pc, #348]	; (8001de0 <Angle_Calcu+0x570>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001dd8 <Angle_Calcu+0x568>
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dd18      	ble.n	8001cc6 <Angle_Calcu+0x456>
 8001c94:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <Angle_Calcu+0x570>)
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001ddc <Angle_Calcu+0x56c>
 8001c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca2:	ee17 0a90 	vmov	r0, s15
 8001ca6:	f7fe fc4f 	bl	8000548 <__aeabi_f2d>
 8001caa:	a33f      	add	r3, pc, #252	; (adr r3, 8001da8 <Angle_Calcu+0x538>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	f7fe fdcc 	bl	800084c <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ff94 	bl	8000be8 <__aeabi_d2f>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a47      	ldr	r2, [pc, #284]	; (8001de0 <Angle_Calcu+0x570>)
 8001cc4:	6013      	str	r3, [r2, #0]
	if(Gyro_z<32768) Gyro_z=-(Gyro_z/16.4);
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <Angle_Calcu+0x574>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001dd8 <Angle_Calcu+0x568>
 8001cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	d517      	bpl.n	8001d0a <Angle_Calcu+0x49a>
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <Angle_Calcu+0x574>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc32 	bl	8000548 <__aeabi_f2d>
 8001ce4:	a330      	add	r3, pc, #192	; (adr r3, 8001da8 <Angle_Calcu+0x538>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f7fe fdaf 	bl	800084c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe ff77 	bl	8000be8 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eef1 7a67 	vneg.f32	s15, s15
 8001d04:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <Angle_Calcu+0x574>)
 8001d06:	edc3 7a00 	vstr	s15, [r3]
	if(Gyro_z>32768) Gyro_z=+(65535-Gyro_z)/16.4;
 8001d0a:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <Angle_Calcu+0x574>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001dd8 <Angle_Calcu+0x568>
 8001d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	dd18      	ble.n	8001d50 <Angle_Calcu+0x4e0>
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <Angle_Calcu+0x574>)
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001ddc <Angle_Calcu+0x56c>
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	ee17 0a90 	vmov	r0, s15
 8001d30:	f7fe fc0a 	bl	8000548 <__aeabi_f2d>
 8001d34:	a31c      	add	r3, pc, #112	; (adr r3, 8001da8 <Angle_Calcu+0x538>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fd87 	bl	800084c <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe ff4f 	bl	8000be8 <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <Angle_Calcu+0x574>)
 8001d4e:	6013      	str	r3, [r2, #0]




	//4.调用卡尔曼函数
	Kalman_Filter_X(Angle_x_temp,Gyro_x);  //卡尔曼滤波计算X倾角
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <Angle_Calcu+0x550>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <Angle_Calcu+0x564>)
 8001d58:	ed93 7a00 	vldr	s14, [r3]
 8001d5c:	eef0 0a47 	vmov.f32	s1, s14
 8001d60:	eeb0 0a67 	vmov.f32	s0, s15
 8001d64:	f000 f856 	bl	8001e14 <Kalman_Filter_X>
	Kalman_Filter_Y(Angle_y_temp,Gyro_y);  //卡尔曼滤波计算Y倾角
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <Angle_Calcu+0x554>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <Angle_Calcu+0x570>)
 8001d70:	ed93 7a00 	vldr	s14, [r3]
 8001d74:	eef0 0a47 	vmov.f32	s1, s14
 8001d78:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7c:	f000 f9be 	bl	80020fc <Kalman_Filter_Y>
	Yaw();
 8001d80:	f000 fb30 	bl	80023e4 <Yaw>

	//处理后欧拉角打印
	//printf("Roll,Pitch : %f,%f,%f,%f \r\n",Angle_X_Final,Angle_Y_Final,Angle_x_temp,Angle_y_temp);
	printf("Roll , Pitch : %f ,%f \r\n",Angle_X_Final,Angle_Y_Final);
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <Angle_Calcu+0x578>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbdd 	bl	8000548 <__aeabi_f2d>
 8001d8e:	4604      	mov	r4, r0
 8001d90:	460d      	mov	r5, r1
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <Angle_Calcu+0x57c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	e02a      	b.n	8001df0 <Angle_Calcu+0x580>
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	51eb851f 	.word	0x51eb851f
 8001da4:	40091eb8 	.word	0x40091eb8
 8001da8:	66666666 	.word	0x66666666
 8001dac:	40306666 	.word	0x40306666
 8001db0:	20000688 	.word	0x20000688
 8001db4:	47400000 	.word	0x47400000
 8001db8:	46800000 	.word	0x46800000
 8001dbc:	40668000 	.word	0x40668000
 8001dc0:	20000698 	.word	0x20000698
 8001dc4:	2000069c 	.word	0x2000069c
 8001dc8:	20000680 	.word	0x20000680
 8001dcc:	46fff800 	.word	0x46fff800
 8001dd0:	20000684 	.word	0x20000684
 8001dd4:	2000068c 	.word	0x2000068c
 8001dd8:	47000000 	.word	0x47000000
 8001ddc:	477fff00 	.word	0x477fff00
 8001de0:	20000690 	.word	0x20000690
 8001de4:	20000694 	.word	0x20000694
 8001de8:	200006a0 	.word	0x200006a0
 8001dec:	200006a4 	.word	0x200006a4
 8001df0:	f7fe fbaa 	bl	8000548 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	e9cd 2300 	strd	r2, r3, [sp]
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	462b      	mov	r3, r5
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <Angle_Calcu+0x5a0>)
 8001e02:	f007 ffd1 	bl	8009da8 <iprintf>
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0800db6c 	.word	0x0800db6c

08001e14 <Kalman_Filter_X>:
float K_0, K_1, t_0, t_1;	//卡尔曼增益  K_0:用于计算最优估计值  K_1:用于计算最优估计值的偏差 t_0/1:中间变量
float P[4] ={0,0,0,0};	//过程协方差矩阵的微分矩阵，中间变量
float PP[2][2] = { { 1, 0 },{ 0, 1 } };//过程协方差矩阵P

void Kalman_Filter_X(float Accel,float Gyro) //卡尔曼函数
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e1e:	edc7 0a00 	vstr	s1, [r7]
	//步骤一，先验估计
	//公式：X(k|k-1) = AX(k-1|k-1) + BU(k)
	//X = (Angle,Q_bias)
	//A(1,1) = 1,A(1,2) = -dt
	//A(2,1) = 0,A(2,2) = 1
	Angle_X_Final += (Gyro - Q_bias) * dt; //状态方程,角度值等于上次最优角度加角速度减零漂后积分
 8001e22:	4ba4      	ldr	r3, [pc, #656]	; (80020b4 <Kalman_Filter_X+0x2a0>)
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	ed97 7a00 	vldr	s14, [r7]
 8001e2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e30:	4ba1      	ldr	r3, [pc, #644]	; (80020b8 <Kalman_Filter_X+0x2a4>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3a:	4ba0      	ldr	r3, [pc, #640]	; (80020bc <Kalman_Filter_X+0x2a8>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e44:	4b9d      	ldr	r3, [pc, #628]	; (80020bc <Kalman_Filter_X+0x2a8>)
 8001e46:	edc3 7a00 	vstr	s15, [r3]

	//步骤二，计算过程协方差矩阵的微分矩阵
	//公式：P(k|k-1)=AP(k-1|k-1)A^T + Q
	//Q(1,1) = cov(Angle,Angle)	Q(1,2) = cov(Q_bias,Angle)
	//Q(2,1) = cov(Angle,Q_bias)	Q(2,2) = cov(Q_bias,Q_bias)
	P[0]= Q_angle - PP[0][1] - PP[1][0];
 8001e4a:	4b9d      	ldr	r3, [pc, #628]	; (80020c0 <Kalman_Filter_X+0x2ac>)
 8001e4c:	ed93 7a00 	vldr	s14, [r3]
 8001e50:	4b9c      	ldr	r3, [pc, #624]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001e52:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e5a:	4b9a      	ldr	r3, [pc, #616]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001e5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e64:	4b98      	ldr	r3, [pc, #608]	; (80020c8 <Kalman_Filter_X+0x2b4>)
 8001e66:	edc3 7a00 	vstr	s15, [r3]
	P[1]= -PP[1][1];// 先验估计误差协方差
 8001e6a:	4b96      	ldr	r3, [pc, #600]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001e6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e70:	eef1 7a67 	vneg.f32	s15, s15
 8001e74:	4b94      	ldr	r3, [pc, #592]	; (80020c8 <Kalman_Filter_X+0x2b4>)
 8001e76:	edc3 7a01 	vstr	s15, [r3, #4]
	P[2]= -PP[1][1];
 8001e7a:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001e7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e80:	eef1 7a67 	vneg.f32	s15, s15
 8001e84:	4b90      	ldr	r3, [pc, #576]	; (80020c8 <Kalman_Filter_X+0x2b4>)
 8001e86:	edc3 7a02 	vstr	s15, [r3, #8]
	P[3]= Q_gyro;
 8001e8a:	4b90      	ldr	r3, [pc, #576]	; (80020cc <Kalman_Filter_X+0x2b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a8e      	ldr	r2, [pc, #568]	; (80020c8 <Kalman_Filter_X+0x2b4>)
 8001e90:	60d3      	str	r3, [r2, #12]
	PP[0][0] += P[0] * dt;
 8001e92:	4b8c      	ldr	r3, [pc, #560]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001e94:	ed93 7a00 	vldr	s14, [r3]
 8001e98:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <Kalman_Filter_X+0x2b4>)
 8001e9a:	edd3 6a00 	vldr	s13, [r3]
 8001e9e:	4b86      	ldr	r3, [pc, #536]	; (80020b8 <Kalman_Filter_X+0x2a4>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eac:	4b85      	ldr	r3, [pc, #532]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001eae:	edc3 7a00 	vstr	s15, [r3]
	PP[0][1] += P[1] * dt;
 8001eb2:	4b84      	ldr	r3, [pc, #528]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001eb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eb8:	4b83      	ldr	r3, [pc, #524]	; (80020c8 <Kalman_Filter_X+0x2b4>)
 8001eba:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ebe:	4b7e      	ldr	r3, [pc, #504]	; (80020b8 <Kalman_Filter_X+0x2a4>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ecc:	4b7d      	ldr	r3, [pc, #500]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001ece:	edc3 7a01 	vstr	s15, [r3, #4]
	PP[1][0] += P[2] * dt;
 8001ed2:	4b7c      	ldr	r3, [pc, #496]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001ed4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ed8:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <Kalman_Filter_X+0x2b4>)
 8001eda:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ede:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <Kalman_Filter_X+0x2a4>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eec:	4b75      	ldr	r3, [pc, #468]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001eee:	edc3 7a02 	vstr	s15, [r3, #8]
	PP[1][1] += P[3] * dt;
 8001ef2:	4b74      	ldr	r3, [pc, #464]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001ef4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ef8:	4b73      	ldr	r3, [pc, #460]	; (80020c8 <Kalman_Filter_X+0x2b4>)
 8001efa:	edd3 6a03 	vldr	s13, [r3, #12]
 8001efe:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <Kalman_Filter_X+0x2a4>)
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0c:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001f0e:	edc3 7a03 	vstr	s15, [r3, #12]

	//步骤三，计算卡尔曼增益
	//公式：Kg(k)= P(k|k-1)H^T/(HP(k|k-1)H^T+R)
	//Kg = (K_0,K_1) 对应Angle,Q_bias增益
	//H = (1,0)	可由z=HX+v求出z:Accel
	PCt_0 = C_0 * PP[0][0];
 8001f12:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <Kalman_Filter_X+0x2bc>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1e:	4b69      	ldr	r3, [pc, #420]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f28:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <Kalman_Filter_X+0x2c0>)
 8001f2a:	edc3 7a00 	vstr	s15, [r3]
	PCt_1 = C_0 * PP[1][0];
 8001f2e:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <Kalman_Filter_X+0x2bc>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3a:	4b62      	ldr	r3, [pc, #392]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001f3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f44:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <Kalman_Filter_X+0x2c4>)
 8001f46:	edc3 7a00 	vstr	s15, [r3]
	E = R_angle + C_0 * PCt_0;
 8001f4a:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <Kalman_Filter_X+0x2bc>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	4b5f      	ldr	r3, [pc, #380]	; (80020d4 <Kalman_Filter_X+0x2c0>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f60:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <Kalman_Filter_X+0x2c8>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <Kalman_Filter_X+0x2cc>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
	K_0 = PCt_0 / E;
 8001f70:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <Kalman_Filter_X+0x2c0>)
 8001f72:	edd3 6a00 	vldr	s13, [r3]
 8001f76:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <Kalman_Filter_X+0x2cc>)
 8001f78:	ed93 7a00 	vldr	s14, [r3]
 8001f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f80:	4b58      	ldr	r3, [pc, #352]	; (80020e4 <Kalman_Filter_X+0x2d0>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
	K_1 = PCt_1 / E;
 8001f86:	4b54      	ldr	r3, [pc, #336]	; (80020d8 <Kalman_Filter_X+0x2c4>)
 8001f88:	edd3 6a00 	vldr	s13, [r3]
 8001f8c:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <Kalman_Filter_X+0x2cc>)
 8001f8e:	ed93 7a00 	vldr	s14, [r3]
 8001f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f96:	4b54      	ldr	r3, [pc, #336]	; (80020e8 <Kalman_Filter_X+0x2d4>)
 8001f98:	edc3 7a00 	vstr	s15, [r3]

	//步骤四，后验估计误差协方差
	//公式：P(k|k)=(I-Kg(k)H)P(k|k-1)
	//也可写为：P(k|k)=P(k|k-1)-Kg(k)HP(k|k-1)
	t_0 = PCt_0;
 8001f9c:	4b4d      	ldr	r3, [pc, #308]	; (80020d4 <Kalman_Filter_X+0x2c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <Kalman_Filter_X+0x2d8>)
 8001fa2:	6013      	str	r3, [r2, #0]
	t_1 = C_0 * PP[0][1];
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <Kalman_Filter_X+0x2bc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb0:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001fb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <Kalman_Filter_X+0x2dc>)
 8001fbc:	edc3 7a00 	vstr	s15, [r3]
	PP[0][0] -= K_0 * t_0;
 8001fc0:	4b40      	ldr	r3, [pc, #256]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001fc2:	ed93 7a00 	vldr	s14, [r3]
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <Kalman_Filter_X+0x2d0>)
 8001fc8:	edd3 6a00 	vldr	s13, [r3]
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <Kalman_Filter_X+0x2d8>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001fdc:	edc3 7a00 	vstr	s15, [r3]
	PP[0][1] -= K_0 * t_1;
 8001fe0:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001fe2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <Kalman_Filter_X+0x2d0>)
 8001fe8:	edd3 6a00 	vldr	s13, [r3]
 8001fec:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <Kalman_Filter_X+0x2dc>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8001ffc:	edc3 7a01 	vstr	s15, [r3, #4]
	PP[1][0] -= K_1 * t_0;
 8002000:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8002002:	ed93 7a02 	vldr	s14, [r3, #8]
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <Kalman_Filter_X+0x2d4>)
 8002008:	edd3 6a00 	vldr	s13, [r3]
 800200c:	4b37      	ldr	r3, [pc, #220]	; (80020ec <Kalman_Filter_X+0x2d8>)
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201a:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 800201c:	edc3 7a02 	vstr	s15, [r3, #8]
	PP[1][1] -= K_1 * t_1;
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 8002022:	ed93 7a03 	vldr	s14, [r3, #12]
 8002026:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <Kalman_Filter_X+0x2d4>)
 8002028:	edd3 6a00 	vldr	s13, [r3]
 800202c:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <Kalman_Filter_X+0x2dc>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <Kalman_Filter_X+0x2b0>)
 800203c:	edc3 7a03 	vstr	s15, [r3, #12]

	//步骤五，计算最优角速度值
	//公式：X(k|k)= X(k|k-1)+Kg(k)(Z(k)-X(k|k-1))
	Angle_err = Accel - Angle_X_Final;	//Z(k)先验估计 计算角度偏差
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <Kalman_Filter_X+0x2a8>)
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	ed97 7a01 	vldr	s14, [r7, #4]
 800204a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204e:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <Kalman_Filter_X+0x2e0>)
 8002050:	edc3 7a00 	vstr	s15, [r3]
	Angle_X_Final += K_0 * Angle_err;	 //后验估计，给出最优估计值
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <Kalman_Filter_X+0x2d0>)
 8002056:	ed93 7a00 	vldr	s14, [r3]
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <Kalman_Filter_X+0x2e0>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <Kalman_Filter_X+0x2a8>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <Kalman_Filter_X+0x2a8>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
	Q_bias        += K_1 * Angle_err;	 //后验估计，跟新最优估计值偏差
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <Kalman_Filter_X+0x2d4>)
 8002076:	ed93 7a00 	vldr	s14, [r3]
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <Kalman_Filter_X+0x2e0>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <Kalman_Filter_X+0x2a0>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <Kalman_Filter_X+0x2a0>)
 8002090:	edc3 7a00 	vstr	s15, [r3]
	Gyro_x         = Gyro - Q_bias;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <Kalman_Filter_X+0x2a0>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ed97 7a00 	vldr	s14, [r7]
 800209e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <Kalman_Filter_X+0x2e4>)
 80020a4:	edc3 7a00 	vstr	s15, [r3]


}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	200006a8 	.word	0x200006a8
 80020b8:	20000018 	.word	0x20000018
 80020bc:	200006a0 	.word	0x200006a0
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	20000020 	.word	0x20000020
 80020c8:	200006cc 	.word	0x200006cc
 80020cc:	20000010 	.word	0x20000010
 80020d0:	2000001c 	.word	0x2000001c
 80020d4:	200006b0 	.word	0x200006b0
 80020d8:	200006b4 	.word	0x200006b4
 80020dc:	20000014 	.word	0x20000014
 80020e0:	200006b8 	.word	0x200006b8
 80020e4:	200006bc 	.word	0x200006bc
 80020e8:	200006c0 	.word	0x200006c0
 80020ec:	200006c4 	.word	0x200006c4
 80020f0:	200006c8 	.word	0x200006c8
 80020f4:	200006ac 	.word	0x200006ac
 80020f8:	2000068c 	.word	0x2000068c

080020fc <Kalman_Filter_Y>:

void Kalman_Filter_Y(float Accel,float Gyro)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	ed87 0a01 	vstr	s0, [r7, #4]
 8002106:	edc7 0a00 	vstr	s1, [r7]
	Angle_Y_Final += (Gyro - Q_bias) * dt;
 800210a:	4ba4      	ldr	r3, [pc, #656]	; (800239c <Kalman_Filter_Y+0x2a0>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ed97 7a00 	vldr	s14, [r7]
 8002114:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002118:	4ba1      	ldr	r3, [pc, #644]	; (80023a0 <Kalman_Filter_Y+0x2a4>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002122:	4ba0      	ldr	r3, [pc, #640]	; (80023a4 <Kalman_Filter_Y+0x2a8>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212c:	4b9d      	ldr	r3, [pc, #628]	; (80023a4 <Kalman_Filter_Y+0x2a8>)
 800212e:	edc3 7a00 	vstr	s15, [r3]
	P[0]=Q_angle - PP[0][1] - PP[1][0];
 8002132:	4b9d      	ldr	r3, [pc, #628]	; (80023a8 <Kalman_Filter_Y+0x2ac>)
 8002134:	ed93 7a00 	vldr	s14, [r3]
 8002138:	4b9c      	ldr	r3, [pc, #624]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 800213a:	edd3 7a01 	vldr	s15, [r3, #4]
 800213e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002142:	4b9a      	ldr	r3, [pc, #616]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 8002144:	edd3 7a02 	vldr	s15, [r3, #8]
 8002148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800214c:	4b98      	ldr	r3, [pc, #608]	; (80023b0 <Kalman_Filter_Y+0x2b4>)
 800214e:	edc3 7a00 	vstr	s15, [r3]
	P[1]=-PP[1][1];
 8002152:	4b96      	ldr	r3, [pc, #600]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 8002154:	edd3 7a03 	vldr	s15, [r3, #12]
 8002158:	eef1 7a67 	vneg.f32	s15, s15
 800215c:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <Kalman_Filter_Y+0x2b4>)
 800215e:	edc3 7a01 	vstr	s15, [r3, #4]
	P[2]=-PP[1][1];
 8002162:	4b92      	ldr	r3, [pc, #584]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 8002164:	edd3 7a03 	vldr	s15, [r3, #12]
 8002168:	eef1 7a67 	vneg.f32	s15, s15
 800216c:	4b90      	ldr	r3, [pc, #576]	; (80023b0 <Kalman_Filter_Y+0x2b4>)
 800216e:	edc3 7a02 	vstr	s15, [r3, #8]
	P[3]=Q_gyro;
 8002172:	4b90      	ldr	r3, [pc, #576]	; (80023b4 <Kalman_Filter_Y+0x2b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a8e      	ldr	r2, [pc, #568]	; (80023b0 <Kalman_Filter_Y+0x2b4>)
 8002178:	60d3      	str	r3, [r2, #12]
	PP[0][0] += P[0] * dt;
 800217a:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 800217c:	ed93 7a00 	vldr	s14, [r3]
 8002180:	4b8b      	ldr	r3, [pc, #556]	; (80023b0 <Kalman_Filter_Y+0x2b4>)
 8002182:	edd3 6a00 	vldr	s13, [r3]
 8002186:	4b86      	ldr	r3, [pc, #536]	; (80023a0 <Kalman_Filter_Y+0x2a4>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	4b85      	ldr	r3, [pc, #532]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 8002196:	edc3 7a00 	vstr	s15, [r3]
	PP[0][1] += P[1] * dt;
 800219a:	4b84      	ldr	r3, [pc, #528]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 800219c:	ed93 7a01 	vldr	s14, [r3, #4]
 80021a0:	4b83      	ldr	r3, [pc, #524]	; (80023b0 <Kalman_Filter_Y+0x2b4>)
 80021a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80021a6:	4b7e      	ldr	r3, [pc, #504]	; (80023a0 <Kalman_Filter_Y+0x2a4>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b4:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80021b6:	edc3 7a01 	vstr	s15, [r3, #4]
	PP[1][0] += P[2] * dt;
 80021ba:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80021bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80021c0:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <Kalman_Filter_Y+0x2b4>)
 80021c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80021c6:	4b76      	ldr	r3, [pc, #472]	; (80023a0 <Kalman_Filter_Y+0x2a4>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	4b75      	ldr	r3, [pc, #468]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80021d6:	edc3 7a02 	vstr	s15, [r3, #8]
	PP[1][1] += P[3] * dt;
 80021da:	4b74      	ldr	r3, [pc, #464]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80021dc:	ed93 7a03 	vldr	s14, [r3, #12]
 80021e0:	4b73      	ldr	r3, [pc, #460]	; (80023b0 <Kalman_Filter_Y+0x2b4>)
 80021e2:	edd3 6a03 	vldr	s13, [r3, #12]
 80021e6:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <Kalman_Filter_Y+0x2a4>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f4:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80021f6:	edc3 7a03 	vstr	s15, [r3, #12]
	Angle_err = Accel - Angle_Y_Final;
 80021fa:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <Kalman_Filter_Y+0x2a8>)
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ed97 7a01 	vldr	s14, [r7, #4]
 8002204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002208:	4b6b      	ldr	r3, [pc, #428]	; (80023b8 <Kalman_Filter_Y+0x2bc>)
 800220a:	edc3 7a00 	vstr	s15, [r3]
	PCt_0 = C_0 * PP[0][0];
 800220e:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <Kalman_Filter_Y+0x2c0>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221a:	4b64      	ldr	r3, [pc, #400]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <Kalman_Filter_Y+0x2c4>)
 8002226:	edc3 7a00 	vstr	s15, [r3]
	PCt_1 = C_0 * PP[1][0];
 800222a:	4b64      	ldr	r3, [pc, #400]	; (80023bc <Kalman_Filter_Y+0x2c0>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 8002238:	edd3 7a02 	vldr	s15, [r3, #8]
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	4b60      	ldr	r3, [pc, #384]	; (80023c4 <Kalman_Filter_Y+0x2c8>)
 8002242:	edc3 7a00 	vstr	s15, [r3]
	E = R_angle + C_0 * PCt_0;
 8002246:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <Kalman_Filter_Y+0x2c0>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002252:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <Kalman_Filter_Y+0x2c4>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225c:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <Kalman_Filter_Y+0x2cc>)
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002266:	4b59      	ldr	r3, [pc, #356]	; (80023cc <Kalman_Filter_Y+0x2d0>)
 8002268:	edc3 7a00 	vstr	s15, [r3]
	K_0 = PCt_0 / E;
 800226c:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <Kalman_Filter_Y+0x2c4>)
 800226e:	edd3 6a00 	vldr	s13, [r3]
 8002272:	4b56      	ldr	r3, [pc, #344]	; (80023cc <Kalman_Filter_Y+0x2d0>)
 8002274:	ed93 7a00 	vldr	s14, [r3]
 8002278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227c:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <Kalman_Filter_Y+0x2d4>)
 800227e:	edc3 7a00 	vstr	s15, [r3]
	K_1 = PCt_1 / E;
 8002282:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <Kalman_Filter_Y+0x2c8>)
 8002284:	edd3 6a00 	vldr	s13, [r3]
 8002288:	4b50      	ldr	r3, [pc, #320]	; (80023cc <Kalman_Filter_Y+0x2d0>)
 800228a:	ed93 7a00 	vldr	s14, [r3]
 800228e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002292:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <Kalman_Filter_Y+0x2d8>)
 8002294:	edc3 7a00 	vstr	s15, [r3]
	t_0 = PCt_0;
 8002298:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <Kalman_Filter_Y+0x2c4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a4e      	ldr	r2, [pc, #312]	; (80023d8 <Kalman_Filter_Y+0x2dc>)
 800229e:	6013      	str	r3, [r2, #0]
	t_1 = C_0 * PP[0][1];
 80022a0:	4b46      	ldr	r3, [pc, #280]	; (80023bc <Kalman_Filter_Y+0x2c0>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ac:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80022ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	4b49      	ldr	r3, [pc, #292]	; (80023dc <Kalman_Filter_Y+0x2e0>)
 80022b8:	edc3 7a00 	vstr	s15, [r3]
	PP[0][0] -= K_0 * t_0;
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80022be:	ed93 7a00 	vldr	s14, [r3]
 80022c2:	4b43      	ldr	r3, [pc, #268]	; (80023d0 <Kalman_Filter_Y+0x2d4>)
 80022c4:	edd3 6a00 	vldr	s13, [r3]
 80022c8:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <Kalman_Filter_Y+0x2dc>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80022d8:	edc3 7a00 	vstr	s15, [r3]
	PP[0][1] -= K_0 * t_1;
 80022dc:	4b33      	ldr	r3, [pc, #204]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80022de:	ed93 7a01 	vldr	s14, [r3, #4]
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <Kalman_Filter_Y+0x2d4>)
 80022e4:	edd3 6a00 	vldr	s13, [r3]
 80022e8:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <Kalman_Filter_Y+0x2e0>)
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80022f8:	edc3 7a01 	vstr	s15, [r3, #4]
	PP[1][0] -= K_1 * t_0;
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 80022fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <Kalman_Filter_Y+0x2d8>)
 8002304:	edd3 6a00 	vldr	s13, [r3]
 8002308:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <Kalman_Filter_Y+0x2dc>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002316:	4b25      	ldr	r3, [pc, #148]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 8002318:	edc3 7a02 	vstr	s15, [r3, #8]
	PP[1][1] -= K_1 * t_1;
 800231c:	4b23      	ldr	r3, [pc, #140]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 800231e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <Kalman_Filter_Y+0x2d8>)
 8002324:	edd3 6a00 	vldr	s13, [r3]
 8002328:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <Kalman_Filter_Y+0x2e0>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <Kalman_Filter_Y+0x2b0>)
 8002338:	edc3 7a03 	vstr	s15, [r3, #12]
	Angle_Y_Final	+= K_0 * Angle_err;
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <Kalman_Filter_Y+0x2d4>)
 800233e:	ed93 7a00 	vldr	s14, [r3]
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <Kalman_Filter_Y+0x2bc>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <Kalman_Filter_Y+0x2a8>)
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <Kalman_Filter_Y+0x2a8>)
 8002358:	edc3 7a00 	vstr	s15, [r3]
	Q_bias	+= K_1 * Angle_err;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <Kalman_Filter_Y+0x2d8>)
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <Kalman_Filter_Y+0x2bc>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <Kalman_Filter_Y+0x2a0>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <Kalman_Filter_Y+0x2a0>)
 8002378:	edc3 7a00 	vstr	s15, [r3]
	Gyro_y   = Gyro - Q_bias;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <Kalman_Filter_Y+0x2a0>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ed97 7a00 	vldr	s14, [r7]
 8002386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <Kalman_Filter_Y+0x2e4>)
 800238c:	edc3 7a00 	vstr	s15, [r3]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	200006a8 	.word	0x200006a8
 80023a0:	20000018 	.word	0x20000018
 80023a4:	200006a4 	.word	0x200006a4
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	20000020 	.word	0x20000020
 80023b0:	200006cc 	.word	0x200006cc
 80023b4:	20000010 	.word	0x20000010
 80023b8:	200006ac 	.word	0x200006ac
 80023bc:	2000001c 	.word	0x2000001c
 80023c0:	200006b0 	.word	0x200006b0
 80023c4:	200006b4 	.word	0x200006b4
 80023c8:	20000014 	.word	0x20000014
 80023cc:	200006b8 	.word	0x200006b8
 80023d0:	200006bc 	.word	0x200006bc
 80023d4:	200006c0 	.word	0x200006c0
 80023d8:	200006c4 	.word	0x200006c4
 80023dc:	200006c8 	.word	0x200006c8
 80023e0:	20000690 	.word	0x20000690

080023e4 <Yaw>:

void Yaw (void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
		static const float dt = 0.20 ;
		static const int ZERO_OFFSET_COUT  = (1/dt) ;
		static int g_GetZeroOffset =0;
		static float gyroZ_offset = 0.0f;
		if(g_GetZeroOffset ++ < ZERO_OFFSET_COUT)
 80023e8:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <Yaw+0xe0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	4935      	ldr	r1, [pc, #212]	; (80024c4 <Yaw+0xe0>)
 80023f0:	600a      	str	r2, [r1, #0]
 80023f2:	4a35      	ldr	r2, [pc, #212]	; (80024c8 <Yaw+0xe4>)
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	4293      	cmp	r3, r2
 80023f8:	da0f      	bge.n	800241a <Yaw+0x36>
		{
			gyroZ_offset += Gyro_z * dt ;
 80023fa:	4b34      	ldr	r3, [pc, #208]	; (80024cc <Yaw+0xe8>)
 80023fc:	ed93 7a00 	vldr	s14, [r3]
 8002400:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <Yaw+0xec>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240a:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <Yaw+0xf0>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <Yaw+0xf0>)
 8002416:	edc3 7a00 	vstr	s15, [r3]
		}
		Gyro_z -= gyroZ_offset;
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <Yaw+0xe8>)
 800241c:	ed93 7a00 	vldr	s14, [r3]
 8002420:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <Yaw+0xf0>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242a:	4b28      	ldr	r3, [pc, #160]	; (80024cc <Yaw+0xe8>)
 800242c:	edc3 7a00 	vstr	s15, [r3]

		static float Angle_Z_Final;
		if(g_GetZeroOffset > ZERO_OFFSET_COUT)
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <Yaw+0xe0>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <Yaw+0xe4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	dd41      	ble.n	80024c0 <Yaw+0xdc>
		{
			Angle_Z_Final += Gyro_z *dt ;
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <Yaw+0xe8>)
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <Yaw+0xec>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <Yaw+0xf4>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <Yaw+0xf4>)
 8002458:	edc3 7a00 	vstr	s15, [r3]
			if(Angle_Z_Final > 360) Angle_Z_Final -= 360 ;
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <Yaw+0xf4>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80024dc <Yaw+0xf8>
 8002466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	dd09      	ble.n	8002484 <Yaw+0xa0>
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <Yaw+0xf4>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80024dc <Yaw+0xf8>
 800247a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <Yaw+0xf4>)
 8002480:	edc3 7a00 	vstr	s15, [r3]
			if(Angle_Z_Final <-360) Angle_Z_Final += 360 ;
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <Yaw+0xf4>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80024e0 <Yaw+0xfc>
 800248e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	d509      	bpl.n	80024ac <Yaw+0xc8>
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <Yaw+0xf4>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80024dc <Yaw+0xf8>
 80024a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <Yaw+0xf4>)
 80024a8:	edc3 7a00 	vstr	s15, [r3]

			printf("Yaw: %f \r\n,",Angle_Z_Final);
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <Yaw+0xf4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f849 	bl	8000548 <__aeabi_f2d>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	480a      	ldr	r0, [pc, #40]	; (80024e4 <Yaw+0x100>)
 80024bc:	f007 fc74 	bl	8009da8 <iprintf>
		}


}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200006dc 	.word	0x200006dc
 80024c8:	0800dbc0 	.word	0x0800dbc0
 80024cc:	20000694 	.word	0x20000694
 80024d0:	0800dbc4 	.word	0x0800dbc4
 80024d4:	200006e0 	.word	0x200006e0
 80024d8:	200006e4 	.word	0x200006e4
 80024dc:	43b40000 	.word	0x43b40000
 80024e0:	c3b40000 	.word	0xc3b40000
 80024e4:	0800db88 	.word	0x0800db88

080024e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ec:	f000 fdd4 	bl	8003098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024f0:	f000 f816 	bl	8002520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024f4:	f7ff f8b0 	bl	8001658 <MX_GPIO_Init>
  MX_DMA_Init();
 80024f8:	f7fe fefe 	bl	80012f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80024fc:	f000 fca2 	bl	8002e44 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8002500:	f7ff f93e 	bl	8001780 <MX_I2C2_Init>
  MX_CAN1_Init();
 8002504:	f7fe fe72 	bl	80011ec <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8002508:	f000 f870 	bl	80025ec <MPU6050_Init>
  can_filter_init();
 800250c:	f7fe fe46 	bl	800119c <can_filter_init>
   gimbal_PID_init();
 8002510:	f000 fad2 	bl	8002ab8 <gimbal_PID_init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002514:	f7fe ff32 	bl	800137c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002518:	f005 faca 	bl	8007ab0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800251c:	e7fe      	b.n	800251c <main+0x34>
	...

08002520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b094      	sub	sp, #80	; 0x50
 8002524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002526:	f107 0320 	add.w	r3, r7, #32
 800252a:	2230      	movs	r2, #48	; 0x30
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f007 fcaf 	bl	8009e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <SystemClock_Config+0xb8>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <SystemClock_Config+0xb8>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <SystemClock_Config+0xb8>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <SystemClock_Config+0xbc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <SystemClock_Config+0xbc>)
 800256a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <SystemClock_Config+0xbc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800257c:	2302      	movs	r3, #2
 800257e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002580:	2301      	movs	r3, #1
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002584:	2310      	movs	r3, #16
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002588:	2300      	movs	r3, #0
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800258c:	f107 0320 	add.w	r3, r7, #32
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fb03 	bl	8005b9c <HAL_RCC_OscConfig>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800259c:	f000 f820 	bl	80025e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a0:	230f      	movs	r3, #15
 80025a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fd64 	bl	800608c <HAL_RCC_ClockConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80025ca:	f000 f809 	bl	80025e0 <Error_Handler>
  }
}
 80025ce:	bf00      	nop
 80025d0:	3750      	adds	r7, #80	; 0x50
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40007000 	.word	0x40007000

080025e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <Error_Handler+0x8>
	...

080025ec <MPU6050_Init>:

//初始化MPU6050
//返回值:0,成功
//    其他,错误代码
uint8_t MPU6050_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  uint8_t res;
  extern I2C_HandleTypeDef hi2c2;
  HAL_I2C_Init(&hi2c2);
 80025f2:	4823      	ldr	r0, [pc, #140]	; (8002680 <MPU6050_Init+0x94>)
 80025f4:	f002 fb12 	bl	8004c1c <HAL_I2C_Init>
  MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X80);	//复位MPU6050
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	206b      	movs	r0, #107	; 0x6b
 80025fc:	f000 f946 	bl	800288c <MPU_Write_Byte>
  MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X00);	//唤醒MPU6050
 8002600:	2100      	movs	r1, #0
 8002602:	206b      	movs	r0, #107	; 0x6b
 8002604:	f000 f942 	bl	800288c <MPU_Write_Byte>
  MPU_Set_Gyro_Fsr(3);					//陀螺仪传感器,±2000dps
 8002608:	2003      	movs	r0, #3
 800260a:	f000 f83f 	bl	800268c <MPU_Set_Gyro_Fsr>
  MPU_Set_Accel_Fsr(0);					//加速度传感器,±2g
 800260e:	2000      	movs	r0, #0
 8002610:	f000 f84d 	bl	80026ae <MPU_Set_Accel_Fsr>
  MPU_Set_Rate(50);						//设置采样率50Hz
 8002614:	2032      	movs	r0, #50	; 0x32
 8002616:	f000 f88c 	bl	8002732 <MPU_Set_Rate>
  MPU_Write_Byte(MPU_INT_EN_REG,0X00);	//关闭所有中断
 800261a:	2100      	movs	r1, #0
 800261c:	2038      	movs	r0, #56	; 0x38
 800261e:	f000 f935 	bl	800288c <MPU_Write_Byte>
  MPU_Write_Byte(MPU_USER_CTRL_REG,0X00);	//I2C主模式关闭
 8002622:	2100      	movs	r1, #0
 8002624:	206a      	movs	r0, #106	; 0x6a
 8002626:	f000 f931 	bl	800288c <MPU_Write_Byte>
  MPU_Write_Byte(MPU_FIFO_EN_REG,0X00);	//关闭FIFO
 800262a:	2100      	movs	r1, #0
 800262c:	2023      	movs	r0, #35	; 0x23
 800262e:	f000 f92d 	bl	800288c <MPU_Write_Byte>
  MPU_Write_Byte(MPU_INTBP_CFG_REG,0X80);	//INT引脚低电平有效
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	2037      	movs	r0, #55	; 0x37
 8002636:	f000 f929 	bl	800288c <MPU_Write_Byte>
  res=MPU_Read_Byte(MPU_DEVICE_ID_REG);
 800263a:	2075      	movs	r0, #117	; 0x75
 800263c:	f000 f94c 	bl	80028d8 <MPU_Read_Byte>
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
 printf("MPU6050:0x%2x\r\n",res);
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	4619      	mov	r1, r3
 8002648:	480e      	ldr	r0, [pc, #56]	; (8002684 <MPU6050_Init+0x98>)
 800264a:	f007 fbad 	bl	8009da8 <iprintf>
  if(res==MPU_ADDR)//器件ID正确
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b68      	cmp	r3, #104	; 0x68
 8002652:	d10f      	bne.n	8002674 <MPU6050_Init+0x88>
  {
    MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X01);	//设置CLKSEL,PLL X轴为参考
 8002654:	2101      	movs	r1, #1
 8002656:	206b      	movs	r0, #107	; 0x6b
 8002658:	f000 f918 	bl	800288c <MPU_Write_Byte>
    MPU_Write_Byte(MPU_PWR_MGMT2_REG,0X00);	//加速度与陀螺仪都工作
 800265c:	2100      	movs	r1, #0
 800265e:	206c      	movs	r0, #108	; 0x6c
 8002660:	f000 f914 	bl	800288c <MPU_Write_Byte>
    MPU_Set_Rate(50);						//设置采样率为50Hz
 8002664:	2032      	movs	r0, #50	; 0x32
 8002666:	f000 f864 	bl	8002732 <MPU_Set_Rate>
  }else
		return 1;

  Exam_i = 1;
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <MPU6050_Init+0x9c>)
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]

  return 0;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <MPU6050_Init+0x8a>
		return 1;
 8002674:	2301      	movs	r3, #1
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000620 	.word	0x20000620
 8002684:	0800db94 	.word	0x0800db94
 8002688:	20000700 	.word	0x20000700

0800268c <MPU_Set_Gyro_Fsr>:
//设置MPU6050陀螺仪传感器满量程范围
//fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_GYRO_CFG_REG,fsr<<3);//设置陀螺仪满量程范围
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	4619      	mov	r1, r3
 800269e:	201b      	movs	r0, #27
 80026a0:	f000 f8f4 	bl	800288c <MPU_Write_Byte>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <MPU_Set_Accel_Fsr>:
//设置MPU6050加速度传感器满量程范围
//fsr:0,±2g;1,±4g;2,±8g;3,±16g
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG,fsr<<3);//设置加速度传感器满量程范围
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	4619      	mov	r1, r3
 80026c0:	201c      	movs	r0, #28
 80026c2:	f000 f8e3 	bl	800288c <MPU_Write_Byte>
 80026c6:	4603      	mov	r3, r0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <MPU_Set_LPF>:
//设置MPU6050的数字低通滤波器
//lpf:数字低通滤波频率(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_LPF(uint16_t lpf)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
	uint8_t data=0;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
	if(lpf>=188)data=1;
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	2bbb      	cmp	r3, #187	; 0xbb
 80026e2:	d902      	bls.n	80026ea <MPU_Set_LPF+0x1a>
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e019      	b.n	800271e <MPU_Set_LPF+0x4e>
	else if(lpf>=98)data=2;
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	2b61      	cmp	r3, #97	; 0x61
 80026ee:	d902      	bls.n	80026f6 <MPU_Set_LPF+0x26>
 80026f0:	2302      	movs	r3, #2
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e013      	b.n	800271e <MPU_Set_LPF+0x4e>
	else if(lpf>=42)data=3;
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b29      	cmp	r3, #41	; 0x29
 80026fa:	d902      	bls.n	8002702 <MPU_Set_LPF+0x32>
 80026fc:	2303      	movs	r3, #3
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e00d      	b.n	800271e <MPU_Set_LPF+0x4e>
	else if(lpf>=20)data=4;
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	2b13      	cmp	r3, #19
 8002706:	d902      	bls.n	800270e <MPU_Set_LPF+0x3e>
 8002708:	2304      	movs	r3, #4
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e007      	b.n	800271e <MPU_Set_LPF+0x4e>
	else if(lpf>=10)data=5;
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	2b09      	cmp	r3, #9
 8002712:	d902      	bls.n	800271a <MPU_Set_LPF+0x4a>
 8002714:	2305      	movs	r3, #5
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e001      	b.n	800271e <MPU_Set_LPF+0x4e>
	else data=6;
 800271a:	2306      	movs	r3, #6
 800271c:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG,data);//设置数字低通滤波器
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	4619      	mov	r1, r3
 8002722:	201a      	movs	r0, #26
 8002724:	f000 f8b2 	bl	800288c <MPU_Write_Byte>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <MPU_Set_Rate>:
//设置MPU6050的采样率(假定Fs=1KHz)
//rate:4~1000(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Rate(uint16_t rate)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	if(rate>1000)rate=1000;
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002742:	d902      	bls.n	800274a <MPU_Set_Rate+0x18>
 8002744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002748:	80fb      	strh	r3, [r7, #6]
	if(rate<4)rate=4;
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d801      	bhi.n	8002754 <MPU_Set_Rate+0x22>
 8002750:	2304      	movs	r3, #4
 8002752:	80fb      	strh	r3, [r7, #6]
	data=1000/rate-1;
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800275a:	fb92 f3f3 	sdiv	r3, r2, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
	data=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,data);	//设置数字低通滤波器
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	4619      	mov	r1, r3
 8002768:	2019      	movs	r0, #25
 800276a:	f000 f88f 	bl	800288c <MPU_Write_Byte>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]
 	return MPU_Set_LPF(rate/2);	//自动设置LPF为采样率的一半
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	b29b      	uxth	r3, r3
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ffa9 	bl	80026d0 <MPU_Set_LPF>
 800277e:	4603      	mov	r3, r0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <MPU_Get_Gyroscope>:
//得到陀螺仪值(原始值)
//gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Get_Gyroscope(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
    uint8_t buf[6],res;
	res=MPU_Read_Len(MPU_GYRO_XOUTH_REG,6,buf);
 800278e:	463b      	mov	r3, r7
 8002790:	461a      	mov	r2, r3
 8002792:	2106      	movs	r1, #6
 8002794:	2043      	movs	r0, #67	; 0x43
 8002796:	f000 f857 	bl	8002848 <MPU_Read_Len>
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
	if(res==0)
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d11a      	bne.n	80027da <MPU_Get_Gyroscope+0x52>
	{
		IMU_Data.Gyro_X=(((uint16_t)buf[0]<<8)|buf[1]);
 80027a4:	783b      	ldrb	r3, [r7, #0]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	b21a      	sxth	r2, r3
 80027aa:	787b      	ldrb	r3, [r7, #1]
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <MPU_Get_Gyroscope+0x5c>)
 80027b4:	80da      	strh	r2, [r3, #6]
		IMU_Data.Gyro_Y=(((uint16_t)buf[2]<<8)|buf[3]) ;
 80027b6:	78bb      	ldrb	r3, [r7, #2]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	b21b      	sxth	r3, r3
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <MPU_Get_Gyroscope+0x5c>)
 80027c6:	811a      	strh	r2, [r3, #8]
		IMU_Data.Gyro_Z=(((uint16_t)buf[4]<<8)|buf[5]) ;
 80027c8:	793b      	ldrb	r3, [r7, #4]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	797b      	ldrb	r3, [r7, #5]
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	4313      	orrs	r3, r2
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <MPU_Get_Gyroscope+0x5c>)
 80027d8:	815a      	strh	r2, [r3, #10]
	}

    return res;
 80027da:	79fb      	ldrb	r3, [r7, #7]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200006e8 	.word	0x200006e8

080027e8 <MPU_Get_Accelerometer>:
//得到加速度值(原始值)
//ax,ay,az:陀螺仪x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Get_Accelerometer(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
    uint8_t buf[6],res;
	res=MPU_Read_Len(MPU_ACCEL_XOUTH_REG,6,buf);
 80027ee:	463b      	mov	r3, r7
 80027f0:	461a      	mov	r2, r3
 80027f2:	2106      	movs	r1, #6
 80027f4:	203b      	movs	r0, #59	; 0x3b
 80027f6:	f000 f827 	bl	8002848 <MPU_Read_Len>
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
	if(res==0)
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11a      	bne.n	800283a <MPU_Get_Accelerometer+0x52>
	{
		IMU_Data.Accel_X=((uint16_t)buf[0]<<8)|buf[1];
 8002804:	783b      	ldrb	r3, [r7, #0]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	b21a      	sxth	r2, r3
 800280a:	787b      	ldrb	r3, [r7, #1]
 800280c:	b21b      	sxth	r3, r3
 800280e:	4313      	orrs	r3, r2
 8002810:	b21a      	sxth	r2, r3
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MPU_Get_Accelerometer+0x5c>)
 8002814:	801a      	strh	r2, [r3, #0]
		IMU_Data.Accel_Y=((uint16_t)buf[2]<<8)|buf[3];
 8002816:	78bb      	ldrb	r3, [r7, #2]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	b21a      	sxth	r2, r3
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	b21b      	sxth	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	b21a      	sxth	r2, r3
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <MPU_Get_Accelerometer+0x5c>)
 8002826:	805a      	strh	r2, [r3, #2]
		IMU_Data.Accel_Z=((uint16_t)buf[4]<<8)|buf[5];
 8002828:	793b      	ldrb	r3, [r7, #4]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	b21a      	sxth	r2, r3
 800282e:	797b      	ldrb	r3, [r7, #5]
 8002830:	b21b      	sxth	r3, r3
 8002832:	4313      	orrs	r3, r2
 8002834:	b21a      	sxth	r2, r3
 8002836:	4b03      	ldr	r3, [pc, #12]	; (8002844 <MPU_Get_Accelerometer+0x5c>)
 8002838:	809a      	strh	r2, [r3, #4]
	}
    return res;
 800283a:	79fb      	ldrb	r3, [r7, #7]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200006e8 	.word	0x200006e8

08002848 <MPU_Read_Len>:
//len:要读取的长度
//buf:读取到的数据存储区
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Read_Len(uint8_t reg,uint8_t len,uint8_t *buf)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af04      	add	r7, sp, #16
 800284e:	4603      	mov	r3, r0
 8002850:	603a      	str	r2, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
 8002854:	460b      	mov	r3, r1
 8002856:	71bb      	strb	r3, [r7, #6]
  extern I2C_HandleTypeDef hi2c2;
  HAL_I2C_Mem_Read(&hi2c2, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 0xfff);
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	b29a      	uxth	r2, r3
 800285c:	79bb      	ldrb	r3, [r7, #6]
 800285e:	b29b      	uxth	r3, r3
 8002860:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002864:	9102      	str	r1, [sp, #8]
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2301      	movs	r3, #1
 800286e:	21d1      	movs	r1, #209	; 0xd1
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <MPU_Read_Len+0x40>)
 8002872:	f002 fc11 	bl	8005098 <HAL_I2C_Mem_Read>
  HAL_Delay(100);
 8002876:	2064      	movs	r0, #100	; 0x64
 8002878:	f000 fc80 	bl	800317c <HAL_Delay>

  return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000620 	.word	0x20000620

0800288c <MPU_Write_Byte>:
//reg:寄存器地址
//data:数据
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Write_Byte(uint8_t reg,uint8_t data)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af04      	add	r7, sp, #16
 8002892:	4603      	mov	r3, r0
 8002894:	460a      	mov	r2, r1
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	4613      	mov	r3, r2
 800289a:	71bb      	strb	r3, [r7, #6]
  extern I2C_HandleTypeDef hi2c2;
  unsigned char W_Data=0;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]

  W_Data = data;
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, &W_Data, 1, 0xfff);
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80028ac:	9302      	str	r3, [sp, #8]
 80028ae:	2301      	movs	r3, #1
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	f107 030f 	add.w	r3, r7, #15
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	21d0      	movs	r1, #208	; 0xd0
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MPU_Write_Byte+0x48>)
 80028be:	f002 faf1 	bl	8004ea4 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80028c2:	2064      	movs	r0, #100	; 0x64
 80028c4:	f000 fc5a 	bl	800317c <HAL_Delay>

  return 0;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000620 	.word	0x20000620

080028d8 <MPU_Read_Byte>:
//IIC读一个字节
//reg:寄存器地址
//返回值:读到的数据
uint8_t MPU_Read_Byte(uint8_t reg)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af04      	add	r7, sp, #16
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  extern I2C_HandleTypeDef hi2c2;
  unsigned char R_Data=0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Mem_Read(&hi2c2, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, &R_Data, 1, 0xfff);
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	f640 73ff 	movw	r3, #4095	; 0xfff
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	2301      	movs	r3, #1
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	f107 030f 	add.w	r3, r7, #15
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2301      	movs	r3, #1
 80028fc:	21d1      	movs	r1, #209	; 0xd1
 80028fe:	4805      	ldr	r0, [pc, #20]	; (8002914 <MPU_Read_Byte+0x3c>)
 8002900:	f002 fbca 	bl	8005098 <HAL_I2C_Mem_Read>
  HAL_Delay(100);
 8002904:	2064      	movs	r0, #100	; 0x64
 8002906:	f000 fc39 	bl	800317c <HAL_Delay>

  return R_Data;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000620 	.word	0x20000620

08002918 <pid_init>:
              float kp,
              float ki,
              float kd,
              float i_max,
              float out_max)//PID��ʼ������
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6178      	str	r0, [r7, #20]
 8002920:	ed87 0a04 	vstr	s0, [r7, #16]
 8002924:	edc7 0a03 	vstr	s1, [r7, #12]
 8002928:	ed87 1a02 	vstr	s2, [r7, #8]
 800292c:	edc7 1a01 	vstr	s3, [r7, #4]
 8002930:	ed87 2a00 	vstr	s4, [r7]
  pid->kp      = kp;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	601a      	str	r2, [r3, #0]
  pid->ki      = ki;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
  pid->kd      = kd;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	609a      	str	r2, [r3, #8]
  pid->i_max   = i_max;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	60da      	str	r2, [r3, #12]
  pid->out_max = out_max;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	611a      	str	r2, [r3, #16]
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LIMIT_MIN_MAX>:

void LIMIT_MIN_MAX(float out, float fu, float zheng)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	ed87 0a03 	vstr	s0, [r7, #12]
 8002968:	edc7 0a02 	vstr	s1, [r7, #8]
 800296c:	ed87 1a01 	vstr	s2, [r7, #4]
	if(out > zheng || out < fu)
 8002970:	ed97 7a03 	vldr	s14, [r7, #12]
 8002974:	edd7 7a01 	vldr	s15, [r7, #4]
 8002978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002980:	dc09      	bgt.n	8002996 <LIMIT_MIN_MAX+0x38>
 8002982:	ed97 7a03 	vldr	s14, [r7, #12]
 8002986:	edd7 7a02 	vldr	s15, [r7, #8]
 800298a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	d400      	bmi.n	8002996 <LIMIT_MIN_MAX+0x38>
	{
		out = 0;
	}
}
 8002994:	e002      	b.n	800299c <LIMIT_MIN_MAX+0x3e>
		out = 0;
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <pid_calc>:

float pid_calc(pid_struct_t *pid, float ref, float fdb)//PID���㺯��
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80029b4:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->ref = ref;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	615a      	str	r2, [r3, #20]
  pid->fdb = fdb;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]
  pid->err[1] = pid->err[0];
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	621a      	str	r2, [r3, #32]
  pid->err[0] = pid->ref - pid->fdb;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80029d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	edc3 7a07 	vstr	s15, [r3, #28]

  pid->p_out  = pid->kp * pid->err[0];
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	ed93 7a00 	vldr	s14, [r3]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80029ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  pid->i_out += pid->ki * pid->err[0];
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  pid->d_out  = pid->kd * (pid->err[0] - pid->err[1]);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


  LIMIT_MIN_MAX(pid->i_out, -pid->i_max, pid->i_max);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a44:	eef1 7a67 	vneg.f32	s15, s15
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a4e:	eeb0 1a66 	vmov.f32	s2, s13
 8002a52:	eef0 0a67 	vmov.f32	s1, s15
 8002a56:	eeb0 0a47 	vmov.f32	s0, s14
 8002a5a:	f7ff ff80 	bl	800295e <LIMIT_MIN_MAX>

  pid->output = pid->p_out + pid->i_out + pid->d_out;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  LIMIT_MIN_MAX(pid->output, -pid->out_max, pid->out_max);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a8a:	eef1 7a67 	vneg.f32	s15, s15
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a94:	eeb0 1a66 	vmov.f32	s2, s13
 8002a98:	eef0 0a67 	vmov.f32	s1, s15
 8002a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa0:	f7ff ff5d 	bl	800295e <LIMIT_MIN_MAX>
  return pid->output;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	ee07 3a90 	vmov	s15, r3
}
 8002aac:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <gimbal_PID_init>:

void gimbal_PID_init()//�ǶȻ����ٶȻ���PID��ʼ��,ֻ�ǳ�����������ݣ����廹��Ҫ����
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	pid_init(&gimbal_yaw_speed_pid, 35, 18, 0.5, 0, 0);//P=30,I=0,D=0
 8002abc:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8002af4 <gimbal_PID_init+0x3c>
 8002ac0:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8002af4 <gimbal_PID_init+0x3c>
 8002ac4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002ac8:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 8002acc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002af8 <gimbal_PID_init+0x40>
 8002ad0:	480a      	ldr	r0, [pc, #40]	; (8002afc <gimbal_PID_init+0x44>)
 8002ad2:	f7ff ff21 	bl	8002918 <pid_init>
	pid_init(&gimbal_yaw_angle_pid, 100, 0, 0, 0, 0);//P=400,I=0,D=0
 8002ad6:	ed9f 2a07 	vldr	s4, [pc, #28]	; 8002af4 <gimbal_PID_init+0x3c>
 8002ada:	eddf 1a06 	vldr	s3, [pc, #24]	; 8002af4 <gimbal_PID_init+0x3c>
 8002ade:	ed9f 1a05 	vldr	s2, [pc, #20]	; 8002af4 <gimbal_PID_init+0x3c>
 8002ae2:	eddf 0a04 	vldr	s1, [pc, #16]	; 8002af4 <gimbal_PID_init+0x3c>
 8002ae6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002b00 <gimbal_PID_init+0x48>
 8002aea:	4806      	ldr	r0, [pc, #24]	; (8002b04 <gimbal_PID_init+0x4c>)
 8002aec:	f7ff ff14 	bl	8002918 <pid_init>
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	00000000 	.word	0x00000000
 8002af8:	420c0000 	.word	0x420c0000
 8002afc:	20000704 	.word	0x20000704
 8002b00:	42c80000 	.word	0x42c80000
 8002b04:	20000738 	.word	0x20000738

08002b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_MspInit+0x54>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4a11      	ldr	r2, [pc, #68]	; (8002b5c <HAL_MspInit+0x54>)
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <HAL_MspInit+0x54>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_MspInit+0x54>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_MspInit+0x54>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_MspInit+0x54>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	210f      	movs	r1, #15
 8002b4a:	f06f 0001 	mvn.w	r0, #1
 8002b4e:	f001 fa76 	bl	800403e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800

08002b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b64:	e7fe      	b.n	8002b64 <NMI_Handler+0x4>

08002b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b6a:	e7fe      	b.n	8002b6a <HardFault_Handler+0x4>

08002b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b70:	e7fe      	b.n	8002b70 <MemManage_Handler+0x4>

08002b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b76:	e7fe      	b.n	8002b76 <BusFault_Handler+0x4>

08002b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <UsageFault_Handler+0x4>

08002b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b90:	f000 fad4 	bl	800313c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b94:	f005 fd62 	bl	800865c <xTaskGetSchedulerState>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b9e:	f005 ffa3 	bl	8008ae8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bac:	4802      	ldr	r0, [pc, #8]	; (8002bb8 <CAN1_RX0_IRQHandler+0x10>)
 8002bae:	f000 ff3c 	bl	8003a2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000290 	.word	0x20000290

08002bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bc0:	4802      	ldr	r0, [pc, #8]	; (8002bcc <USART1_IRQHandler+0x10>)
 8002bc2:	f003 fe07 	bl	80067d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000770 	.word	0x20000770

08002bd0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bd4:	4802      	ldr	r0, [pc, #8]	; (8002be0 <DMA2_Stream2_IRQHandler+0x10>)
 8002bd6:	f001 fc01 	bl	80043dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200007b4 	.word	0x200007b4

08002be4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002be8:	4802      	ldr	r0, [pc, #8]	; (8002bf4 <DMA2_Stream7_IRQHandler+0x10>)
 8002bea:	f001 fbf7 	bl	80043dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000814 	.word	0x20000814

08002bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return 1;
 8002bfc:	2301      	movs	r3, #1
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_kill>:

int _kill(int pid, int sig)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c12:	f007 f991 	bl	8009f38 <__errno>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2216      	movs	r2, #22
 8002c1a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_exit>:

void _exit (int status)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ffe7 	bl	8002c08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c3a:	e7fe      	b.n	8002c3a <_exit+0x12>

08002c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e00a      	b.n	8002c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c4e:	f3af 8000 	nop.w
 8002c52:	4601      	mov	r1, r0
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	60ba      	str	r2, [r7, #8]
 8002c5a:	b2ca      	uxtb	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbf0      	blt.n	8002c4e <_read+0x12>
  }

  return len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e009      	b.n	8002c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	60ba      	str	r2, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f889 	bl	8002da8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	dbf1      	blt.n	8002c88 <_write+0x12>
  }
  return len;
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_close>:

int _close(int file)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <_isatty>:

int _isatty(int file)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cee:	2301      	movs	r3, #1
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <_sbrk+0x5c>)
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <_sbrk+0x60>)
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <_sbrk+0x64>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <_sbrk+0x64>)
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <_sbrk+0x68>)
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <_sbrk+0x64>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d207      	bcs.n	8002d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d48:	f007 f8f6 	bl	8009f38 <__errno>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	220c      	movs	r2, #12
 8002d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	e009      	b.n	8002d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <_sbrk+0x64>)
 8002d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20020000 	.word	0x20020000
 8002d78:	00000400 	.word	0x00000400
 8002d7c:	2000076c 	.word	0x2000076c
 8002d80:	20005938 	.word	0x20005938

08002d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <SystemInit+0x20>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <SystemInit+0x20>)
 8002d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8002db0:	1d39      	adds	r1, r7, #4
 8002db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002db6:	2201      	movs	r2, #1
 8002db8:	4803      	ldr	r0, [pc, #12]	; (8002dc8 <__io_putchar+0x20>)
 8002dba:	f003 fb94 	bl	80064e6 <HAL_UART_Transmit>
    return ch;
 8002dbe:	687b      	ldr	r3, [r7, #4]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000770 	.word	0x20000770

08002dcc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
	if(huart == &huart1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <HAL_UARTEx_RxEventCallback+0x64>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d123      	bne.n	8002e28 <HAL_UARTEx_RxEventCallback+0x5c>
	{




		printf("Sume:%d\r\n Content:",Size);
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4813      	ldr	r0, [pc, #76]	; (8002e34 <HAL_UARTEx_RxEventCallback+0x68>)
 8002de6:	f006 ffdf 	bl	8009da8 <iprintf>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ReceiveData, Size);//发送接收到的数据
 8002dea:	887b      	ldrh	r3, [r7, #2]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4912      	ldr	r1, [pc, #72]	; (8002e38 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002df0:	480f      	ldr	r0, [pc, #60]	; (8002e30 <HAL_UARTEx_RxEventCallback+0x64>)
 8002df2:	f003 fc0b 	bl	800660c <HAL_UART_Transmit_DMA>
		if(ReceiveData[0] == 0x00)
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <HAL_UARTEx_RxEventCallback+0x3a>
		{
			flag =0;
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <HAL_UARTEx_RxEventCallback+0x70>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	e002      	b.n	8002e0c <HAL_UARTEx_RxEventCallback+0x40>
		}
		else
		{
			flag = 1;
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_UARTEx_RxEventCallback+0x70>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) ReceiveData, sizeof(ReceiveData));//开启DMA
 8002e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e10:	4909      	ldr	r1, [pc, #36]	; (8002e38 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002e12:	4807      	ldr	r0, [pc, #28]	; (8002e30 <HAL_UARTEx_RxEventCallback+0x64>)
 8002e14:	f003 fc78 	bl	8006708 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);//关闭 DMA半完成通道，以防数据传输一半就进入中断回调函数
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_UARTEx_RxEventCallback+0x74>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_UARTEx_RxEventCallback+0x74>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0208 	bic.w	r2, r2, #8
 8002e26:	601a      	str	r2, [r3, #0]


	}
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000770 	.word	0x20000770
 8002e34:	0800dba4 	.word	0x0800dba4
 8002e38:	200002b8 	.word	0x200002b8
 8002e3c:	200003b8 	.word	0x200003b8
 8002e40:	200007b4 	.word	0x200007b4

08002e44 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_USART1_UART_Init+0x4c>)
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <MX_USART1_UART_Init+0x50>)
 8002e4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <MX_USART1_UART_Init+0x4c>)
 8002e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_USART1_UART_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <MX_USART1_UART_Init+0x4c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <MX_USART1_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MX_USART1_UART_Init+0x4c>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <MX_USART1_UART_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <MX_USART1_UART_Init+0x4c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_USART1_UART_Init+0x4c>)
 8002e7c:	f003 fae6 	bl	800644c <HAL_UART_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e86:	f7ff fbab 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000770 	.word	0x20000770
 8002e94:	40011000 	.word	0x40011000

08002e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a5b      	ldr	r2, [pc, #364]	; (8003024 <HAL_UART_MspInit+0x18c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	f040 80af 	bne.w	800301a <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_UART_MspInit+0x190>)
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_UART_MspInit+0x190>)
 8002ec6:	f043 0310 	orr.w	r3, r3, #16
 8002eca:	6453      	str	r3, [r2, #68]	; 0x44
 8002ecc:	4b56      	ldr	r3, [pc, #344]	; (8003028 <HAL_UART_MspInit+0x190>)
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	4b52      	ldr	r3, [pc, #328]	; (8003028 <HAL_UART_MspInit+0x190>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	4a51      	ldr	r2, [pc, #324]	; (8003028 <HAL_UART_MspInit+0x190>)
 8002ee2:	f043 0302 	orr.w	r3, r3, #2
 8002ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	; (8003028 <HAL_UART_MspInit+0x190>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	; (8003028 <HAL_UART_MspInit+0x190>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	4a4a      	ldr	r2, [pc, #296]	; (8003028 <HAL_UART_MspInit+0x190>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6313      	str	r3, [r2, #48]	; 0x30
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_UART_MspInit+0x190>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f20:	2307      	movs	r3, #7
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4840      	ldr	r0, [pc, #256]	; (800302c <HAL_UART_MspInit+0x194>)
 8002f2c:	f001 fcc0 	bl	80048b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f42:	2307      	movs	r3, #7
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4838      	ldr	r0, [pc, #224]	; (8003030 <HAL_UART_MspInit+0x198>)
 8002f4e:	f001 fcaf 	bl	80048b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f54:	4a38      	ldr	r2, [pc, #224]	; (8003038 <HAL_UART_MspInit+0x1a0>)
 8002f56:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f60:	4b34      	ldr	r3, [pc, #208]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f66:	4b33      	ldr	r3, [pc, #204]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f6c:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f72:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f7a:	4b2e      	ldr	r3, [pc, #184]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f80:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f86:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f8c:	4b29      	ldr	r3, [pc, #164]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f92:	4828      	ldr	r0, [pc, #160]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002f94:	f001 f88a 	bl	80040ac <HAL_DMA_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002f9e:	f7ff fb1f 	bl	80025e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a23      	ldr	r2, [pc, #140]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8002fa8:	4a22      	ldr	r2, [pc, #136]	; (8003034 <HAL_UART_MspInit+0x19c>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002fae:	4b23      	ldr	r3, [pc, #140]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fb0:	4a23      	ldr	r2, [pc, #140]	; (8003040 <HAL_UART_MspInit+0x1a8>)
 8002fb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fc8:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fee:	4813      	ldr	r0, [pc, #76]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8002ff0:	f001 f85c 	bl	80040ac <HAL_DMA_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8002ffa:	f7ff faf1 	bl	80025e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8003002:	635a      	str	r2, [r3, #52]	; 0x34
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_UART_MspInit+0x1a4>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800300a:	2200      	movs	r2, #0
 800300c:	2105      	movs	r1, #5
 800300e:	2025      	movs	r0, #37	; 0x25
 8003010:	f001 f815 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003014:	2025      	movs	r0, #37	; 0x25
 8003016:	f001 f82e 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	; 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40011000 	.word	0x40011000
 8003028:	40023800 	.word	0x40023800
 800302c:	40020400 	.word	0x40020400
 8003030:	40020000 	.word	0x40020000
 8003034:	200007b4 	.word	0x200007b4
 8003038:	40026440 	.word	0x40026440
 800303c:	20000814 	.word	0x20000814
 8003040:	400264b8 	.word	0x400264b8

08003044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800307c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003048:	480d      	ldr	r0, [pc, #52]	; (8003080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800304a:	490e      	ldr	r1, [pc, #56]	; (8003084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800304c:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800304e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003050:	e002      	b.n	8003058 <LoopCopyDataInit>

08003052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003056:	3304      	adds	r3, #4

08003058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800305a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800305c:	d3f9      	bcc.n	8003052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305e:	4a0b      	ldr	r2, [pc, #44]	; (800308c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003060:	4c0b      	ldr	r4, [pc, #44]	; (8003090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003064:	e001      	b.n	800306a <LoopFillZerobss>

08003066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003068:	3204      	adds	r2, #4

0800306a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800306a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800306c:	d3fb      	bcc.n	8003066 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800306e:	f7ff fe89 	bl	8002d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003072:	f006 ff67 	bl	8009f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003076:	f7ff fa37 	bl	80024e8 <main>
  bx  lr    
 800307a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800307c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003084:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003088:	0800e060 	.word	0x0800e060
  ldr r2, =_sbss
 800308c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003090:	20005938 	.word	0x20005938

08003094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC_IRQHandler>
	...

08003098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <HAL_Init+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0d      	ldr	r2, [pc, #52]	; (80030d8 <HAL_Init+0x40>)
 80030a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_Init+0x40>)
 80030ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <HAL_Init+0x40>)
 80030ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c0:	2003      	movs	r0, #3
 80030c2:	f000 ffb1 	bl	8004028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030c6:	200f      	movs	r0, #15
 80030c8:	f000 f808 	bl	80030dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030cc:	f7ff fd1c 	bl	8002b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023c00 	.word	0x40023c00

080030dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_InitTick+0x54>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_InitTick+0x58>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 ffc9 	bl	8004092 <HAL_SYSTICK_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e00e      	b.n	8003128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b0f      	cmp	r3, #15
 800310e:	d80a      	bhi.n	8003126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003110:	2200      	movs	r2, #0
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f000 ff91 	bl	800403e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800311c:	4a06      	ldr	r2, [pc, #24]	; (8003138 <HAL_InitTick+0x5c>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000030 	.word	0x20000030
 8003134:	20000038 	.word	0x20000038
 8003138:	20000034 	.word	0x20000034

0800313c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_IncTick+0x20>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_IncTick+0x24>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4413      	add	r3, r2
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_IncTick+0x24>)
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000038 	.word	0x20000038
 8003160:	20000874 	.word	0x20000874

08003164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return uwTick;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HAL_GetTick+0x14>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000874 	.word	0x20000874

0800317c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff ffee 	bl	8003164 <HAL_GetTick>
 8003188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d005      	beq.n	80031a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_Delay+0x44>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031a2:	bf00      	nop
 80031a4:	f7ff ffde 	bl	8003164 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d8f7      	bhi.n	80031a4 <HAL_Delay+0x28>
  {
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20000038 	.word	0x20000038

080031c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0ed      	b.n	80033b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fe f838 	bl	8001258 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f8:	f7ff ffb4 	bl	8003164 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031fe:	e012      	b.n	8003226 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003200:	f7ff ffb0 	bl	8003164 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b0a      	cmp	r3, #10
 800320c:	d90b      	bls.n	8003226 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2205      	movs	r2, #5
 800321e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0c5      	b.n	80033b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0e5      	beq.n	8003200 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0202 	bic.w	r2, r2, #2
 8003242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003244:	f7ff ff8e 	bl	8003164 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800324a:	e012      	b.n	8003272 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800324c:	f7ff ff8a 	bl	8003164 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b0a      	cmp	r3, #10
 8003258:	d90b      	bls.n	8003272 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2205      	movs	r2, #5
 800326a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e09f      	b.n	80033b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e5      	bne.n	800324c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7e1b      	ldrb	r3, [r3, #24]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e007      	b.n	80032aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7e5b      	ldrb	r3, [r3, #25]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e007      	b.n	80032d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7e9b      	ldrb	r3, [r3, #26]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d108      	bne.n	80032ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0220 	orr.w	r2, r2, #32
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e007      	b.n	80032fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0220 	bic.w	r2, r2, #32
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7edb      	ldrb	r3, [r3, #27]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d108      	bne.n	8003318 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0210 	bic.w	r2, r2, #16
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e007      	b.n	8003328 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0210 	orr.w	r2, r2, #16
 8003326:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7f1b      	ldrb	r3, [r3, #28]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d108      	bne.n	8003342 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e007      	b.n	8003352 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0208 	bic.w	r2, r2, #8
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7f5b      	ldrb	r3, [r3, #29]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d108      	bne.n	800336c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0204 	orr.w	r2, r2, #4
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e007      	b.n	800337c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0204 	bic.w	r2, r2, #4
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	ea42 0103 	orr.w	r1, r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d003      	beq.n	80033e2 <HAL_CAN_ConfigFilter+0x26>
 80033da:	7cfb      	ldrb	r3, [r7, #19]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	f040 80be 	bne.w	800355e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_CAN_ConfigFilter+0x1bc>)
 80033e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	431a      	orrs	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2201      	movs	r2, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43db      	mvns	r3, r3
 8003434:	401a      	ands	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d123      	bne.n	800348c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	43db      	mvns	r3, r3
 800344e:	401a      	ands	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003466:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3248      	adds	r2, #72	; 0x48
 800346c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003480:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003482:	6979      	ldr	r1, [r7, #20]
 8003484:	3348      	adds	r3, #72	; 0x48
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	440b      	add	r3, r1
 800348a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d122      	bne.n	80034da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	431a      	orrs	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	3248      	adds	r2, #72	; 0x48
 80034ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034d0:	6979      	ldr	r1, [r7, #20]
 80034d2:	3348      	adds	r3, #72	; 0x48
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	401a      	ands	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034f4:	e007      	b.n	8003506 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	431a      	orrs	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	401a      	ands	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003520:	e007      	b.n	8003532 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	431a      	orrs	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	431a      	orrs	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003550:	f023 0201 	bic.w	r2, r3, #1
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e006      	b.n	800356c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
  }
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40006400 	.word	0x40006400

0800357c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d12e      	bne.n	80035ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035a8:	f7ff fddc 	bl	8003164 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035ae:	e012      	b.n	80035d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035b0:	f7ff fdd8 	bl	8003164 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b0a      	cmp	r3, #10
 80035bc:	d90b      	bls.n	80035d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2205      	movs	r2, #5
 80035ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e012      	b.n	80035fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e5      	bne.n	80035b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e006      	b.n	80035fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003604:	b480      	push	{r7}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003618:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003622:	7ffb      	ldrb	r3, [r7, #31]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d003      	beq.n	8003630 <HAL_CAN_AddTxMessage+0x2c>
 8003628:	7ffb      	ldrb	r3, [r7, #31]
 800362a:	2b02      	cmp	r3, #2
 800362c:	f040 80b8 	bne.w	80037a0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80a0 	beq.w	8003790 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	0e1b      	lsrs	r3, r3, #24
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d907      	bls.n	8003670 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e09e      	b.n	80037ae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003670:	2201      	movs	r2, #1
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	409a      	lsls	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800368c:	68f9      	ldr	r1, [r7, #12]
 800368e:	6809      	ldr	r1, [r1, #0]
 8003690:	431a      	orrs	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	3318      	adds	r3, #24
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	440b      	add	r3, r1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e00f      	b.n	80036be <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036ae:	68f9      	ldr	r1, [r7, #12]
 80036b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80036b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3318      	adds	r3, #24
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	440b      	add	r3, r1
 80036bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3318      	adds	r3, #24
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	440b      	add	r3, r1
 80036ce:	3304      	adds	r3, #4
 80036d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	7d1b      	ldrb	r3, [r3, #20]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d111      	bne.n	80036fe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3318      	adds	r3, #24
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	4413      	add	r3, r2
 80036e6:	3304      	adds	r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	6811      	ldr	r1, [r2, #0]
 80036ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3318      	adds	r3, #24
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	440b      	add	r3, r1
 80036fa:	3304      	adds	r3, #4
 80036fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3307      	adds	r3, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	061a      	lsls	r2, r3, #24
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3306      	adds	r3, #6
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3305      	adds	r3, #5
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	4313      	orrs	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	3204      	adds	r2, #4
 800371e:	7812      	ldrb	r2, [r2, #0]
 8003720:	4610      	mov	r0, r2
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6811      	ldr	r1, [r2, #0]
 8003726:	ea43 0200 	orr.w	r2, r3, r0
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	440b      	add	r3, r1
 8003730:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003734:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3303      	adds	r3, #3
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	061a      	lsls	r2, r3, #24
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3302      	adds	r3, #2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3301      	adds	r3, #1
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	4313      	orrs	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	4610      	mov	r0, r2
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	6811      	ldr	r1, [r2, #0]
 800375c:	ea43 0200 	orr.w	r2, r3, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	440b      	add	r3, r1
 8003766:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800376a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	3318      	adds	r3, #24
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	4413      	add	r3, r2
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	6811      	ldr	r1, [r2, #0]
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	3318      	adds	r3, #24
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	440b      	add	r3, r1
 800378a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e00e      	b.n	80037ae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e006      	b.n	80037ae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3724      	adds	r7, #36	; 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80037ba:	b480      	push	{r7}
 80037bc:	b087      	sub	sp, #28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d003      	beq.n	80037de <HAL_CAN_GetRxMessage+0x24>
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	f040 80f3 	bne.w	80039c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10e      	bne.n	8003802 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0e7      	b.n	80039d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0d8      	b.n	80039d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	331b      	adds	r3, #27
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	4413      	add	r3, r2
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0204 	and.w	r2, r3, #4
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10c      	bne.n	8003858 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	331b      	adds	r3, #27
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	4413      	add	r3, r2
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0d5b      	lsrs	r3, r3, #21
 800384e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e00b      	b.n	8003870 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	331b      	adds	r3, #27
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4413      	add	r3, r2
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	08db      	lsrs	r3, r3, #3
 8003868:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	331b      	adds	r3, #27
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	4413      	add	r3, r2
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0202 	and.w	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	331b      	adds	r3, #27
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	3304      	adds	r3, #4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 020f 	and.w	r2, r3, #15
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	331b      	adds	r3, #27
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4413      	add	r3, r2
 80038aa:	3304      	adds	r3, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	331b      	adds	r3, #27
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	0a1a      	lsrs	r2, r3, #8
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	4413      	add	r3, r2
 8003908:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	0c1a      	lsrs	r2, r3, #16
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	3302      	adds	r3, #2
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	4413      	add	r3, r2
 8003922:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0e1a      	lsrs	r2, r3, #24
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	3303      	adds	r3, #3
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4413      	add	r3, r2
 800393c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	3304      	adds	r3, #4
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	4413      	add	r3, r2
 8003954:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	0a1a      	lsrs	r2, r3, #8
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	3305      	adds	r3, #5
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	4413      	add	r3, r2
 800396e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	0c1a      	lsrs	r2, r3, #16
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3306      	adds	r3, #6
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	4413      	add	r3, r2
 8003988:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0e1a      	lsrs	r2, r3, #24
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	3307      	adds	r3, #7
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d108      	bne.n	80039b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0220 	orr.w	r2, r2, #32
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	e007      	b.n	80039c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0220 	orr.w	r2, r2, #32
 80039be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e006      	b.n	80039d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d002      	beq.n	80039fc <HAL_CAN_ActivateNotification+0x1e>
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d109      	bne.n	8003a10 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6959      	ldr	r1, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e006      	b.n	8003a1e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b08a      	sub	sp, #40	; 0x28
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d07c      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d023      	beq.n	8003ac2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f983 	bl	8003d98 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a92:	e016      	b.n	8003ac2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	e00c      	b.n	8003ac2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aba:	e002      	b.n	8003ac2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f989 	bl	8003dd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d024      	beq.n	8003b16 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ad4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f963 	bl	8003dac <HAL_CAN_TxMailbox1CompleteCallback>
 8003ae6:	e016      	b.n	8003b16 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
 8003afa:	e00c      	b.n	8003b16 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0e:	e002      	b.n	8003b16 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f969 	bl	8003de8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d024      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f943 	bl	8003dc0 <HAL_CAN_TxMailbox2CompleteCallback>
 8003b3a:	e016      	b.n	8003b6a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	e00c      	b.n	8003b6a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
 8003b62:	e002      	b.n	8003b6a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f949 	bl	8003dfc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00c      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00b      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d006      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f930 	bl	8003e10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7fd fa11 	bl	8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2210      	movs	r2, #16
 8003bf0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f912 	bl	8003e38 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8f9 	bl	8003e24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00b      	beq.n	8003c54 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d006      	beq.n	8003c54 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8fc 	bl	8003e4c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f8f5 	bl	8003e60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d07b      	beq.n	8003d78 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d072      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d043      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d03e      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf8:	2b60      	cmp	r3, #96	; 0x60
 8003cfa:	d02b      	beq.n	8003d54 <HAL_CAN_IRQHandler+0x32a>
 8003cfc:	2b60      	cmp	r3, #96	; 0x60
 8003cfe:	d82e      	bhi.n	8003d5e <HAL_CAN_IRQHandler+0x334>
 8003d00:	2b50      	cmp	r3, #80	; 0x50
 8003d02:	d022      	beq.n	8003d4a <HAL_CAN_IRQHandler+0x320>
 8003d04:	2b50      	cmp	r3, #80	; 0x50
 8003d06:	d82a      	bhi.n	8003d5e <HAL_CAN_IRQHandler+0x334>
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d019      	beq.n	8003d40 <HAL_CAN_IRQHandler+0x316>
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d826      	bhi.n	8003d5e <HAL_CAN_IRQHandler+0x334>
 8003d10:	2b30      	cmp	r3, #48	; 0x30
 8003d12:	d010      	beq.n	8003d36 <HAL_CAN_IRQHandler+0x30c>
 8003d14:	2b30      	cmp	r3, #48	; 0x30
 8003d16:	d822      	bhi.n	8003d5e <HAL_CAN_IRQHandler+0x334>
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d002      	beq.n	8003d22 <HAL_CAN_IRQHandler+0x2f8>
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d005      	beq.n	8003d2c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d20:	e01d      	b.n	8003d5e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	f043 0308 	orr.w	r3, r3, #8
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d2a:	e019      	b.n	8003d60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	f043 0310 	orr.w	r3, r3, #16
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d34:	e014      	b.n	8003d60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	f043 0320 	orr.w	r3, r3, #32
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d3e:	e00f      	b.n	8003d60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d48:	e00a      	b.n	8003d60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d52:	e005      	b.n	8003d60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d5c:	e000      	b.n	8003d60 <HAL_CAN_IRQHandler+0x336>
            break;
 8003d5e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d6e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2204      	movs	r2, #4
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f872 	bl	8003e74 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d90:	bf00      	nop
 8003d92:	3728      	adds	r7, #40	; 0x28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <__NVIC_SetPriorityGrouping+0x44>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <__NVIC_SetPriorityGrouping+0x44>)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	60d3      	str	r3, [r2, #12]
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	f003 0307 	and.w	r3, r3, #7
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	db0b      	blt.n	8003f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	4907      	ldr	r1, [pc, #28]	; (8003f24 <__NVIC_EnableIRQ+0x38>)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	e000e100 	.word	0xe000e100

08003f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	db0a      	blt.n	8003f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	490c      	ldr	r1, [pc, #48]	; (8003f74 <__NVIC_SetPriority+0x4c>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f50:	e00a      	b.n	8003f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4908      	ldr	r1, [pc, #32]	; (8003f78 <__NVIC_SetPriority+0x50>)
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	440b      	add	r3, r1
 8003f66:	761a      	strb	r2, [r3, #24]
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000e100 	.word	0xe000e100
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f1c3 0307 	rsb	r3, r3, #7
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	bf28      	it	cs
 8003f9a:	2304      	movcs	r3, #4
 8003f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d902      	bls.n	8003fac <NVIC_EncodePriority+0x30>
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3b03      	subs	r3, #3
 8003faa:	e000      	b.n	8003fae <NVIC_EncodePriority+0x32>
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	43d9      	mvns	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	4313      	orrs	r3, r2
         );
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff4:	d301      	bcc.n	8003ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e00f      	b.n	800401a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <SysTick_Config+0x40>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004002:	210f      	movs	r1, #15
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	f7ff ff8e 	bl	8003f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <SysTick_Config+0x40>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <SysTick_Config+0x40>)
 8004014:	2207      	movs	r2, #7
 8004016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	e000e010 	.word	0xe000e010

08004028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ff29 	bl	8003e88 <__NVIC_SetPriorityGrouping>
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	4603      	mov	r3, r0
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004050:	f7ff ff3e 	bl	8003ed0 <__NVIC_GetPriorityGrouping>
 8004054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	6978      	ldr	r0, [r7, #20]
 800405c:	f7ff ff8e 	bl	8003f7c <NVIC_EncodePriority>
 8004060:	4602      	mov	r2, r0
 8004062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff5d 	bl	8003f28 <__NVIC_SetPriority>
}
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	4603      	mov	r3, r0
 800407e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff31 	bl	8003eec <__NVIC_EnableIRQ>
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff ffa2 	bl	8003fe4 <SysTick_Config>
 80040a0:	4603      	mov	r3, r0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040b8:	f7ff f854 	bl	8003164 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e099      	b.n	80041fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e8:	e00f      	b.n	800410a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040ea:	f7ff f83b 	bl	8003164 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d908      	bls.n	800410a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2203      	movs	r2, #3
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e078      	b.n	80041fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e8      	bne.n	80040ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4b38      	ldr	r3, [pc, #224]	; (8004204 <HAL_DMA_Init+0x158>)
 8004124:	4013      	ands	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	2b04      	cmp	r3, #4
 8004162:	d107      	bne.n	8004174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	4313      	orrs	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0307 	bic.w	r3, r3, #7
 800418a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b04      	cmp	r3, #4
 800419c:	d117      	bne.n	80041ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fb01 	bl	80047b8 <DMA_CheckFifoParam>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2240      	movs	r2, #64	; 0x40
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041ca:	2301      	movs	r3, #1
 80041cc:	e016      	b.n	80041fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fab8 	bl	800474c <DMA_CalcBaseAndBitshift>
 80041dc:	4603      	mov	r3, r0
 80041de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	223f      	movs	r2, #63	; 0x3f
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	f010803f 	.word	0xf010803f

08004208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_DMA_Start_IT+0x26>
 800422a:	2302      	movs	r3, #2
 800422c:	e040      	b.n	80042b0 <HAL_DMA_Start_IT+0xa8>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d12f      	bne.n	80042a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fa4a 	bl	80046f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	223f      	movs	r2, #63	; 0x3f
 8004262:	409a      	lsls	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0216 	orr.w	r2, r2, #22
 8004276:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e005      	b.n	80042ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
 80042ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042c6:	f7fe ff4d 	bl	8003164 <HAL_GetTick>
 80042ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d008      	beq.n	80042ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e052      	b.n	8004390 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0216 	bic.w	r2, r2, #22
 80042f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004308:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <HAL_DMA_Abort+0x62>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0208 	bic.w	r2, r2, #8
 8004328:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800433a:	e013      	b.n	8004364 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800433c:	f7fe ff12 	bl	8003164 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b05      	cmp	r3, #5
 8004348:	d90c      	bls.n	8004364 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2203      	movs	r2, #3
 8004354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e015      	b.n	8004390 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e4      	bne.n	800433c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	223f      	movs	r2, #63	; 0x3f
 8004378:	409a      	lsls	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d004      	beq.n	80043b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e00c      	b.n	80043d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2205      	movs	r2, #5
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043e8:	4b8e      	ldr	r3, [pc, #568]	; (8004624 <HAL_DMA_IRQHandler+0x248>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a8e      	ldr	r2, [pc, #568]	; (8004628 <HAL_DMA_IRQHandler+0x24c>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	0a9b      	lsrs	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	2208      	movs	r2, #8
 8004408:	409a      	lsls	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4013      	ands	r3, r2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01a      	beq.n	8004448 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0204 	bic.w	r2, r2, #4
 800442e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	2208      	movs	r2, #8
 8004436:	409a      	lsls	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	f043 0201 	orr.w	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d012      	beq.n	800447e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	2201      	movs	r2, #1
 800446c:	409a      	lsls	r2, r3
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	f043 0202 	orr.w	r2, r3, #2
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	2204      	movs	r2, #4
 8004484:	409a      	lsls	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d012      	beq.n	80044b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a0:	2204      	movs	r2, #4
 80044a2:	409a      	lsls	r2, r3
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	f043 0204 	orr.w	r2, r3, #4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	2210      	movs	r2, #16
 80044ba:	409a      	lsls	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d043      	beq.n	800454c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d03c      	beq.n	800454c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d6:	2210      	movs	r2, #16
 80044d8:	409a      	lsls	r2, r3
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d018      	beq.n	800451e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d024      	beq.n	800454c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
 800450a:	e01f      	b.n	800454c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01b      	beq.n	800454c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
 800451c:	e016      	b.n	800454c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d107      	bne.n	800453c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0208 	bic.w	r2, r2, #8
 800453a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004550:	2220      	movs	r2, #32
 8004552:	409a      	lsls	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 808f 	beq.w	800467c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8087 	beq.w	800467c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004572:	2220      	movs	r2, #32
 8004574:	409a      	lsls	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b05      	cmp	r3, #5
 8004584:	d136      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0216 	bic.w	r2, r2, #22
 8004594:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d103      	bne.n	80045b6 <HAL_DMA_IRQHandler+0x1da>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0208 	bic.w	r2, r2, #8
 80045c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	223f      	movs	r2, #63	; 0x3f
 80045cc:	409a      	lsls	r2, r3
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d07e      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
        }
        return;
 80045f2:	e079      	b.n	80046e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01d      	beq.n	800463e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10d      	bne.n	800462c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004614:	2b00      	cmp	r3, #0
 8004616:	d031      	beq.n	800467c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
 8004620:	e02c      	b.n	800467c <HAL_DMA_IRQHandler+0x2a0>
 8004622:	bf00      	nop
 8004624:	20000030 	.word	0x20000030
 8004628:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d023      	beq.n	800467c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
 800463c:	e01e      	b.n	800467c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10f      	bne.n	800466c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0210 	bic.w	r2, r2, #16
 800465a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	2b00      	cmp	r3, #0
 8004682:	d032      	beq.n	80046ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d022      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2205      	movs	r2, #5
 8004694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	3301      	adds	r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d307      	bcc.n	80046c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f2      	bne.n	80046a8 <HAL_DMA_IRQHandler+0x2cc>
 80046c2:	e000      	b.n	80046c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80046c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
 80046e6:	e000      	b.n	80046ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80046e8:	bf00      	nop
    }
  }
}
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800470c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b40      	cmp	r3, #64	; 0x40
 800471c:	d108      	bne.n	8004730 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800472e:	e007      	b.n	8004740 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	3b10      	subs	r3, #16
 800475c:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <DMA_CalcBaseAndBitshift+0x64>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004766:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d909      	bls.n	800478e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	1d1a      	adds	r2, r3, #4
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	659a      	str	r2, [r3, #88]	; 0x58
 800478c:	e007      	b.n	800479e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004796:	f023 0303 	bic.w	r3, r3, #3
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	aaaaaaab 	.word	0xaaaaaaab
 80047b4:	0800dbe0 	.word	0x0800dbe0

080047b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d11f      	bne.n	8004812 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d856      	bhi.n	8004886 <DMA_CheckFifoParam+0xce>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <DMA_CheckFifoParam+0x28>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	08004803 	.word	0x08004803
 80047e8:	080047f1 	.word	0x080047f1
 80047ec:	08004887 	.word	0x08004887
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d046      	beq.n	800488a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004800:	e043      	b.n	800488a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800480a:	d140      	bne.n	800488e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004810:	e03d      	b.n	800488e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481a:	d121      	bne.n	8004860 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d837      	bhi.n	8004892 <DMA_CheckFifoParam+0xda>
 8004822:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <DMA_CheckFifoParam+0x70>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	08004839 	.word	0x08004839
 800482c:	0800483f 	.word	0x0800483f
 8004830:	08004839 	.word	0x08004839
 8004834:	08004851 	.word	0x08004851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
      break;
 800483c:	e030      	b.n	80048a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d025      	beq.n	8004896 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484e:	e022      	b.n	8004896 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004858:	d11f      	bne.n	800489a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800485e:	e01c      	b.n	800489a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d903      	bls.n	800486e <DMA_CheckFifoParam+0xb6>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d003      	beq.n	8004874 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800486c:	e018      	b.n	80048a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
      break;
 8004872:	e015      	b.n	80048a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00e      	beq.n	800489e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	e00b      	b.n	800489e <DMA_CheckFifoParam+0xe6>
      break;
 8004886:	bf00      	nop
 8004888:	e00a      	b.n	80048a0 <DMA_CheckFifoParam+0xe8>
      break;
 800488a:	bf00      	nop
 800488c:	e008      	b.n	80048a0 <DMA_CheckFifoParam+0xe8>
      break;
 800488e:	bf00      	nop
 8004890:	e006      	b.n	80048a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004892:	bf00      	nop
 8004894:	e004      	b.n	80048a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004896:	bf00      	nop
 8004898:	e002      	b.n	80048a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <DMA_CheckFifoParam+0xe8>
      break;
 800489e:	bf00      	nop
    }
  } 
  
  return status; 
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop

080048b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b089      	sub	sp, #36	; 0x24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	e16b      	b.n	8004ba4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048cc:	2201      	movs	r2, #1
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4013      	ands	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	f040 815a 	bne.w	8004b9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d005      	beq.n	8004902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d130      	bne.n	8004964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	2203      	movs	r2, #3
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004938:	2201      	movs	r2, #1
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 0201 	and.w	r2, r3, #1
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	2b03      	cmp	r3, #3
 800496e:	d017      	beq.n	80049a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	2203      	movs	r2, #3
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d123      	bne.n	80049f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	08da      	lsrs	r2, r3, #3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3208      	adds	r2, #8
 80049b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	220f      	movs	r2, #15
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	08da      	lsrs	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3208      	adds	r2, #8
 80049ee:	69b9      	ldr	r1, [r7, #24]
 80049f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	2203      	movs	r2, #3
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 0203 	and.w	r2, r3, #3
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80b4 	beq.w	8004b9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	4b60      	ldr	r3, [pc, #384]	; (8004bbc <HAL_GPIO_Init+0x30c>)
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	4a5f      	ldr	r2, [pc, #380]	; (8004bbc <HAL_GPIO_Init+0x30c>)
 8004a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a44:	6453      	str	r3, [r2, #68]	; 0x44
 8004a46:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <HAL_GPIO_Init+0x30c>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a52:	4a5b      	ldr	r2, [pc, #364]	; (8004bc0 <HAL_GPIO_Init+0x310>)
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	3302      	adds	r3, #2
 8004a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	220f      	movs	r2, #15
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a52      	ldr	r2, [pc, #328]	; (8004bc4 <HAL_GPIO_Init+0x314>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d02b      	beq.n	8004ad6 <HAL_GPIO_Init+0x226>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a51      	ldr	r2, [pc, #324]	; (8004bc8 <HAL_GPIO_Init+0x318>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d025      	beq.n	8004ad2 <HAL_GPIO_Init+0x222>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a50      	ldr	r2, [pc, #320]	; (8004bcc <HAL_GPIO_Init+0x31c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01f      	beq.n	8004ace <HAL_GPIO_Init+0x21e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a4f      	ldr	r2, [pc, #316]	; (8004bd0 <HAL_GPIO_Init+0x320>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d019      	beq.n	8004aca <HAL_GPIO_Init+0x21a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a4e      	ldr	r2, [pc, #312]	; (8004bd4 <HAL_GPIO_Init+0x324>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <HAL_GPIO_Init+0x216>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a4d      	ldr	r2, [pc, #308]	; (8004bd8 <HAL_GPIO_Init+0x328>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00d      	beq.n	8004ac2 <HAL_GPIO_Init+0x212>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a4c      	ldr	r2, [pc, #304]	; (8004bdc <HAL_GPIO_Init+0x32c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <HAL_GPIO_Init+0x20e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a4b      	ldr	r2, [pc, #300]	; (8004be0 <HAL_GPIO_Init+0x330>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d101      	bne.n	8004aba <HAL_GPIO_Init+0x20a>
 8004ab6:	2307      	movs	r3, #7
 8004ab8:	e00e      	b.n	8004ad8 <HAL_GPIO_Init+0x228>
 8004aba:	2308      	movs	r3, #8
 8004abc:	e00c      	b.n	8004ad8 <HAL_GPIO_Init+0x228>
 8004abe:	2306      	movs	r3, #6
 8004ac0:	e00a      	b.n	8004ad8 <HAL_GPIO_Init+0x228>
 8004ac2:	2305      	movs	r3, #5
 8004ac4:	e008      	b.n	8004ad8 <HAL_GPIO_Init+0x228>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	e006      	b.n	8004ad8 <HAL_GPIO_Init+0x228>
 8004aca:	2303      	movs	r3, #3
 8004acc:	e004      	b.n	8004ad8 <HAL_GPIO_Init+0x228>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e002      	b.n	8004ad8 <HAL_GPIO_Init+0x228>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_GPIO_Init+0x228>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	f002 0203 	and.w	r2, r2, #3
 8004ade:	0092      	lsls	r2, r2, #2
 8004ae0:	4093      	lsls	r3, r2
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ae8:	4935      	ldr	r1, [pc, #212]	; (8004bc0 <HAL_GPIO_Init+0x310>)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	3302      	adds	r3, #2
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004af6:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_GPIO_Init+0x334>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b1a:	4a32      	ldr	r2, [pc, #200]	; (8004be4 <HAL_GPIO_Init+0x334>)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b20:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <HAL_GPIO_Init+0x334>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b44:	4a27      	ldr	r2, [pc, #156]	; (8004be4 <HAL_GPIO_Init+0x334>)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b4a:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <HAL_GPIO_Init+0x334>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	43db      	mvns	r3, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4013      	ands	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b6e:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <HAL_GPIO_Init+0x334>)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <HAL_GPIO_Init+0x334>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b98:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <HAL_GPIO_Init+0x334>)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	f67f ae90 	bls.w	80048cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3724      	adds	r7, #36	; 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40013800 	.word	0x40013800
 8004bc4:	40020000 	.word	0x40020000
 8004bc8:	40020400 	.word	0x40020400
 8004bcc:	40020800 	.word	0x40020800
 8004bd0:	40020c00 	.word	0x40020c00
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40021400 	.word	0x40021400
 8004bdc:	40021800 	.word	0x40021800
 8004be0:	40021c00 	.word	0x40021c00
 8004be4:	40013c00 	.word	0x40013c00

08004be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	807b      	strh	r3, [r7, #2]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bf8:	787b      	ldrb	r3, [r7, #1]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bfe:	887a      	ldrh	r2, [r7, #2]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c04:	e003      	b.n	8004c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c06:	887b      	ldrh	r3, [r7, #2]
 8004c08:	041a      	lsls	r2, r3, #16
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	619a      	str	r2, [r3, #24]
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e12b      	b.n	8004e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc fdca 	bl	80017dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2224      	movs	r2, #36	; 0x24
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c80:	f001 fbbc 	bl	80063fc <HAL_RCC_GetPCLK1Freq>
 8004c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4a81      	ldr	r2, [pc, #516]	; (8004e90 <HAL_I2C_Init+0x274>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d807      	bhi.n	8004ca0 <HAL_I2C_Init+0x84>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a80      	ldr	r2, [pc, #512]	; (8004e94 <HAL_I2C_Init+0x278>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	bf94      	ite	ls
 8004c98:	2301      	movls	r3, #1
 8004c9a:	2300      	movhi	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e006      	b.n	8004cae <HAL_I2C_Init+0x92>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a7d      	ldr	r2, [pc, #500]	; (8004e98 <HAL_I2C_Init+0x27c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	bf94      	ite	ls
 8004ca8:	2301      	movls	r3, #1
 8004caa:	2300      	movhi	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0e7      	b.n	8004e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4a78      	ldr	r2, [pc, #480]	; (8004e9c <HAL_I2C_Init+0x280>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	0c9b      	lsrs	r3, r3, #18
 8004cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	4a6a      	ldr	r2, [pc, #424]	; (8004e90 <HAL_I2C_Init+0x274>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d802      	bhi.n	8004cf0 <HAL_I2C_Init+0xd4>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3301      	adds	r3, #1
 8004cee:	e009      	b.n	8004d04 <HAL_I2C_Init+0xe8>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	4a69      	ldr	r2, [pc, #420]	; (8004ea0 <HAL_I2C_Init+0x284>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	099b      	lsrs	r3, r3, #6
 8004d02:	3301      	adds	r3, #1
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	495c      	ldr	r1, [pc, #368]	; (8004e90 <HAL_I2C_Init+0x274>)
 8004d20:	428b      	cmp	r3, r1
 8004d22:	d819      	bhi.n	8004d58 <HAL_I2C_Init+0x13c>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	1e59      	subs	r1, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d32:	1c59      	adds	r1, r3, #1
 8004d34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d38:	400b      	ands	r3, r1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_I2C_Init+0x138>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1e59      	subs	r1, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d52:	e051      	b.n	8004df8 <HAL_I2C_Init+0x1dc>
 8004d54:	2304      	movs	r3, #4
 8004d56:	e04f      	b.n	8004df8 <HAL_I2C_Init+0x1dc>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d111      	bne.n	8004d84 <HAL_I2C_Init+0x168>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1e58      	subs	r0, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	440b      	add	r3, r1
 8004d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d72:	3301      	adds	r3, #1
 8004d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e012      	b.n	8004daa <HAL_I2C_Init+0x18e>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1e58      	subs	r0, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6859      	ldr	r1, [r3, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	0099      	lsls	r1, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Init+0x196>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e022      	b.n	8004df8 <HAL_I2C_Init+0x1dc>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10e      	bne.n	8004dd8 <HAL_I2C_Init+0x1bc>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1e58      	subs	r0, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6859      	ldr	r1, [r3, #4]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	440b      	add	r3, r1
 8004dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dcc:	3301      	adds	r3, #1
 8004dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd6:	e00f      	b.n	8004df8 <HAL_I2C_Init+0x1dc>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1e58      	subs	r0, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6859      	ldr	r1, [r3, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	0099      	lsls	r1, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dee:	3301      	adds	r3, #1
 8004df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	6809      	ldr	r1, [r1, #0]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69da      	ldr	r2, [r3, #28]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6911      	ldr	r1, [r2, #16]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68d2      	ldr	r2, [r2, #12]
 8004e32:	4311      	orrs	r1, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	000186a0 	.word	0x000186a0
 8004e94:	001e847f 	.word	0x001e847f
 8004e98:	003d08ff 	.word	0x003d08ff
 8004e9c:	431bde83 	.word	0x431bde83
 8004ea0:	10624dd3 	.word	0x10624dd3

08004ea4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	4608      	mov	r0, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	817b      	strh	r3, [r7, #10]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	813b      	strh	r3, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ebe:	f7fe f951 	bl	8003164 <HAL_GetTick>
 8004ec2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	f040 80d9 	bne.w	8005084 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	2319      	movs	r3, #25
 8004ed8:	2201      	movs	r2, #1
 8004eda:	496d      	ldr	r1, [pc, #436]	; (8005090 <HAL_I2C_Mem_Write+0x1ec>)
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fc7f 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e0cc      	b.n	8005086 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_I2C_Mem_Write+0x56>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0c5      	b.n	8005086 <HAL_I2C_Mem_Write+0x1e2>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d007      	beq.n	8004f20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2221      	movs	r2, #33	; 0x21
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2240      	movs	r2, #64	; 0x40
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a4d      	ldr	r2, [pc, #308]	; (8005094 <HAL_I2C_Mem_Write+0x1f0>)
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f62:	88f8      	ldrh	r0, [r7, #6]
 8004f64:	893a      	ldrh	r2, [r7, #8]
 8004f66:	8979      	ldrh	r1, [r7, #10]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	4603      	mov	r3, r0
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fab6 	bl	80054e4 <I2C_RequestMemoryWrite>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d052      	beq.n	8005024 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e081      	b.n	8005086 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 fd00 	bl	800598c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00d      	beq.n	8004fae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d107      	bne.n	8004faa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e06b      	b.n	8005086 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d11b      	bne.n	8005024 <HAL_I2C_Mem_Write+0x180>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1aa      	bne.n	8004f82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fcec 	bl	8005a0e <I2C_WaitOnBTFFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00d      	beq.n	8005058 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	2b04      	cmp	r3, #4
 8005042:	d107      	bne.n	8005054 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005052:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e016      	b.n	8005086 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e000      	b.n	8005086 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005084:	2302      	movs	r3, #2
  }
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	00100002 	.word	0x00100002
 8005094:	ffff0000 	.word	0xffff0000

08005098 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08c      	sub	sp, #48	; 0x30
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	4608      	mov	r0, r1
 80050a2:	4611      	mov	r1, r2
 80050a4:	461a      	mov	r2, r3
 80050a6:	4603      	mov	r3, r0
 80050a8:	817b      	strh	r3, [r7, #10]
 80050aa:	460b      	mov	r3, r1
 80050ac:	813b      	strh	r3, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050b2:	f7fe f857 	bl	8003164 <HAL_GetTick>
 80050b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	f040 8208 	bne.w	80054d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	2319      	movs	r3, #25
 80050cc:	2201      	movs	r2, #1
 80050ce:	497b      	ldr	r1, [pc, #492]	; (80052bc <HAL_I2C_Mem_Read+0x224>)
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fb85 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
 80050de:	e1fb      	b.n	80054d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_I2C_Mem_Read+0x56>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e1f4      	b.n	80054d8 <HAL_I2C_Mem_Read+0x440>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d007      	beq.n	8005114 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2222      	movs	r2, #34	; 0x22
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2240      	movs	r2, #64	; 0x40
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a5b      	ldr	r2, [pc, #364]	; (80052c0 <HAL_I2C_Mem_Read+0x228>)
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005156:	88f8      	ldrh	r0, [r7, #6]
 8005158:	893a      	ldrh	r2, [r7, #8]
 800515a:	8979      	ldrh	r1, [r7, #10]
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	4603      	mov	r3, r0
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fa52 	bl	8005610 <I2C_RequestMemoryRead>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e1b0      	b.n	80054d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	d113      	bne.n	80051a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517e:	2300      	movs	r3, #0
 8005180:	623b      	str	r3, [r7, #32]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	623b      	str	r3, [r7, #32]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e184      	b.n	80054b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d11b      	bne.n	80051e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e164      	b.n	80054b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d11b      	bne.n	8005226 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800520c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	e144      	b.n	80054b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800523c:	e138      	b.n	80054b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	2b03      	cmp	r3, #3
 8005244:	f200 80f1 	bhi.w	800542a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	2b01      	cmp	r3, #1
 800524e:	d123      	bne.n	8005298 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fc1b 	bl	8005a90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e139      	b.n	80054d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005296:	e10b      	b.n	80054b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529c:	2b02      	cmp	r3, #2
 800529e:	d14e      	bne.n	800533e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	2200      	movs	r2, #0
 80052a8:	4906      	ldr	r1, [pc, #24]	; (80052c4 <HAL_I2C_Mem_Read+0x22c>)
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fa98 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e10e      	b.n	80054d8 <HAL_I2C_Mem_Read+0x440>
 80052ba:	bf00      	nop
 80052bc:	00100002 	.word	0x00100002
 80052c0:	ffff0000 	.word	0xffff0000
 80052c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800533c:	e0b8      	b.n	80054b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005344:	2200      	movs	r2, #0
 8005346:	4966      	ldr	r1, [pc, #408]	; (80054e0 <HAL_I2C_Mem_Read+0x448>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fa49 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0bf      	b.n	80054d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	2200      	movs	r2, #0
 80053a2:	494f      	ldr	r1, [pc, #316]	; (80054e0 <HAL_I2C_Mem_Read+0x448>)
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fa1b 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e091      	b.n	80054d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005428:	e042      	b.n	80054b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800542a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 fb2e 	bl	8005a90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e04c      	b.n	80054d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b04      	cmp	r3, #4
 800547c:	d118      	bne.n	80054b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f47f aec2 	bne.w	800523e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e000      	b.n	80054d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3728      	adds	r7, #40	; 0x28
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	00010004 	.word	0x00010004

080054e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	4608      	mov	r0, r1
 80054ee:	4611      	mov	r1, r2
 80054f0:	461a      	mov	r2, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	817b      	strh	r3, [r7, #10]
 80054f6:	460b      	mov	r3, r1
 80054f8:	813b      	strh	r3, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800550c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	2200      	movs	r2, #0
 8005516:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f960 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00d      	beq.n	8005542 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005534:	d103      	bne.n	800553e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e05f      	b.n	8005602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005550:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	492d      	ldr	r1, [pc, #180]	; (800560c <I2C_RequestMemoryWrite+0x128>)
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f998 	bl	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e04c      	b.n	8005602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800557e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005580:	6a39      	ldr	r1, [r7, #32]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fa02 	bl	800598c <I2C_WaitOnTXEFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00d      	beq.n	80055aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b04      	cmp	r3, #4
 8005594:	d107      	bne.n	80055a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e02b      	b.n	8005602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d105      	bne.n	80055bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055b0:	893b      	ldrh	r3, [r7, #8]
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	611a      	str	r2, [r3, #16]
 80055ba:	e021      	b.n	8005600 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055bc:	893b      	ldrh	r3, [r7, #8]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055cc:	6a39      	ldr	r1, [r7, #32]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f9dc 	bl	800598c <I2C_WaitOnTXEFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00d      	beq.n	80055f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d107      	bne.n	80055f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e005      	b.n	8005602 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055f6:	893b      	ldrh	r3, [r7, #8]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	00010002 	.word	0x00010002

08005610 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	4608      	mov	r0, r1
 800561a:	4611      	mov	r1, r2
 800561c:	461a      	mov	r2, r3
 800561e:	4603      	mov	r3, r0
 8005620:	817b      	strh	r3, [r7, #10]
 8005622:	460b      	mov	r3, r1
 8005624:	813b      	strh	r3, [r7, #8]
 8005626:	4613      	mov	r3, r2
 8005628:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005638:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005648:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	2200      	movs	r2, #0
 8005652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f8c2 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005670:	d103      	bne.n	800567a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005678:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e0aa      	b.n	80057d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800567e:	897b      	ldrh	r3, [r7, #10]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800568c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	6a3a      	ldr	r2, [r7, #32]
 8005692:	4952      	ldr	r1, [pc, #328]	; (80057dc <I2C_RequestMemoryRead+0x1cc>)
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f8fa 	bl	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e097      	b.n	80057d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056bc:	6a39      	ldr	r1, [r7, #32]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f964 	bl	800598c <I2C_WaitOnTXEFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d107      	bne.n	80056e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e076      	b.n	80057d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d105      	bne.n	80056f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056ec:	893b      	ldrh	r3, [r7, #8]
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	611a      	str	r2, [r3, #16]
 80056f6:	e021      	b.n	800573c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056f8:	893b      	ldrh	r3, [r7, #8]
 80056fa:	0a1b      	lsrs	r3, r3, #8
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005708:	6a39      	ldr	r1, [r7, #32]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f93e 	bl	800598c <I2C_WaitOnTXEFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00d      	beq.n	8005732 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	2b04      	cmp	r3, #4
 800571c:	d107      	bne.n	800572e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e050      	b.n	80057d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005732:	893b      	ldrh	r3, [r7, #8]
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	6a39      	ldr	r1, [r7, #32]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f923 	bl	800598c <I2C_WaitOnTXEFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00d      	beq.n	8005768 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	2b04      	cmp	r3, #4
 8005752:	d107      	bne.n	8005764 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005762:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e035      	b.n	80057d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005776:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	2200      	movs	r2, #0
 8005780:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f82b 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579e:	d103      	bne.n	80057a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e013      	b.n	80057d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057ac:	897b      	ldrh	r3, [r7, #10]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	6a3a      	ldr	r2, [r7, #32]
 80057c0:	4906      	ldr	r1, [pc, #24]	; (80057dc <I2C_RequestMemoryRead+0x1cc>)
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f863 	bl	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	00010002 	.word	0x00010002

080057e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f0:	e025      	b.n	800583e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d021      	beq.n	800583e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fa:	f7fd fcb3 	bl	8003164 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d302      	bcc.n	8005810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d116      	bne.n	800583e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f043 0220 	orr.w	r2, r3, #32
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e023      	b.n	8005886 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	0c1b      	lsrs	r3, r3, #16
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b01      	cmp	r3, #1
 8005846:	d10d      	bne.n	8005864 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	43da      	mvns	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4013      	ands	r3, r2
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf0c      	ite	eq
 800585a:	2301      	moveq	r3, #1
 800585c:	2300      	movne	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	e00c      	b.n	800587e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	43da      	mvns	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4013      	ands	r3, r2
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	429a      	cmp	r2, r3
 8005882:	d0b6      	beq.n	80057f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800589c:	e051      	b.n	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ac:	d123      	bne.n	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f043 0204 	orr.w	r2, r3, #4
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e046      	b.n	8005984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d021      	beq.n	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fe:	f7fd fc31 	bl	8003164 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	429a      	cmp	r2, r3
 800590c:	d302      	bcc.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d116      	bne.n	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e020      	b.n	8005984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d10c      	bne.n	8005966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	43da      	mvns	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf14      	ite	ne
 800595e:	2301      	movne	r3, #1
 8005960:	2300      	moveq	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	e00b      	b.n	800597e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	43da      	mvns	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4013      	ands	r3, r2
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf14      	ite	ne
 8005978:	2301      	movne	r3, #1
 800597a:	2300      	moveq	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d18d      	bne.n	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005998:	e02d      	b.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f8ce 	bl	8005b3c <I2C_IsAcknowledgeFailed>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e02d      	b.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d021      	beq.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fd fbd7 	bl	8003164 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d116      	bne.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e007      	b.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d1ca      	bne.n	800599a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a1a:	e02d      	b.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f88d 	bl	8005b3c <I2C_IsAcknowledgeFailed>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e02d      	b.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d021      	beq.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a34:	f7fd fb96 	bl	8003164 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d302      	bcc.n	8005a4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d116      	bne.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e007      	b.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d1ca      	bne.n	8005a1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a9c:	e042      	b.n	8005b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d119      	bne.n	8005ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0210 	mvn.w	r2, #16
 8005ab4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e029      	b.n	8005b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae0:	f7fd fb40 	bl	8003164 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d302      	bcc.n	8005af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d116      	bne.n	8005b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	f043 0220 	orr.w	r2, r3, #32
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e007      	b.n	8005b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d1b5      	bne.n	8005a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b52:	d11b      	bne.n	8005b8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	f043 0204 	orr.w	r2, r3, #4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e267      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d075      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bba:	4b88      	ldr	r3, [pc, #544]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d00c      	beq.n	8005be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bc6:	4b85      	ldr	r3, [pc, #532]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d112      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bd2:	4b82      	ldr	r3, [pc, #520]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be0:	4b7e      	ldr	r3, [pc, #504]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d05b      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x108>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d157      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e242      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c00:	d106      	bne.n	8005c10 <HAL_RCC_OscConfig+0x74>
 8005c02:	4b76      	ldr	r3, [pc, #472]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a75      	ldr	r2, [pc, #468]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	e01d      	b.n	8005c4c <HAL_RCC_OscConfig+0xb0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x98>
 8005c1a:	4b70      	ldr	r3, [pc, #448]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a6f      	ldr	r2, [pc, #444]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	4b6d      	ldr	r3, [pc, #436]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a6c      	ldr	r2, [pc, #432]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	e00b      	b.n	8005c4c <HAL_RCC_OscConfig+0xb0>
 8005c34:	4b69      	ldr	r3, [pc, #420]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a68      	ldr	r2, [pc, #416]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	4b66      	ldr	r3, [pc, #408]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a65      	ldr	r2, [pc, #404]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d013      	beq.n	8005c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c54:	f7fd fa86 	bl	8003164 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c5c:	f7fd fa82 	bl	8003164 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b64      	cmp	r3, #100	; 0x64
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e207      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6e:	4b5b      	ldr	r3, [pc, #364]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f0      	beq.n	8005c5c <HAL_RCC_OscConfig+0xc0>
 8005c7a:	e014      	b.n	8005ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7c:	f7fd fa72 	bl	8003164 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c84:	f7fd fa6e 	bl	8003164 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	; 0x64
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e1f3      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c96:	4b51      	ldr	r3, [pc, #324]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0xe8>
 8005ca2:	e000      	b.n	8005ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d063      	beq.n	8005d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cb2:	4b4a      	ldr	r3, [pc, #296]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cbe:	4b47      	ldr	r3, [pc, #284]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d11c      	bne.n	8005d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cca:	4b44      	ldr	r3, [pc, #272]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d116      	bne.n	8005d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd6:	4b41      	ldr	r3, [pc, #260]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <HAL_RCC_OscConfig+0x152>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d001      	beq.n	8005cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e1c7      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cee:	4b3b      	ldr	r3, [pc, #236]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4937      	ldr	r1, [pc, #220]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d02:	e03a      	b.n	8005d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d020      	beq.n	8005d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d0c:	4b34      	ldr	r3, [pc, #208]	; (8005de0 <HAL_RCC_OscConfig+0x244>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d12:	f7fd fa27 	bl	8003164 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d1a:	f7fd fa23 	bl	8003164 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e1a8      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2c:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d38:	4b28      	ldr	r3, [pc, #160]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4925      	ldr	r1, [pc, #148]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	600b      	str	r3, [r1, #0]
 8005d4c:	e015      	b.n	8005d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d4e:	4b24      	ldr	r3, [pc, #144]	; (8005de0 <HAL_RCC_OscConfig+0x244>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fd fa06 	bl	8003164 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d5c:	f7fd fa02 	bl	8003164 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e187      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6e:	4b1b      	ldr	r3, [pc, #108]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d036      	beq.n	8005df4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d016      	beq.n	8005dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <HAL_RCC_OscConfig+0x248>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fd f9e6 	bl	8003164 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9c:	f7fd f9e2 	bl	8003164 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e167      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <HAL_RCC_OscConfig+0x240>)
 8005db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x200>
 8005dba:	e01b      	b.n	8005df4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <HAL_RCC_OscConfig+0x248>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc2:	f7fd f9cf 	bl	8003164 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc8:	e00e      	b.n	8005de8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dca:	f7fd f9cb 	bl	8003164 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d907      	bls.n	8005de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e150      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	42470000 	.word	0x42470000
 8005de4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de8:	4b88      	ldr	r3, [pc, #544]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1ea      	bne.n	8005dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8097 	beq.w	8005f30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e06:	4b81      	ldr	r3, [pc, #516]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10f      	bne.n	8005e32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	4b7d      	ldr	r3, [pc, #500]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	4a7c      	ldr	r2, [pc, #496]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e20:	6413      	str	r3, [r2, #64]	; 0x40
 8005e22:	4b7a      	ldr	r3, [pc, #488]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e32:	4b77      	ldr	r3, [pc, #476]	; (8006010 <HAL_RCC_OscConfig+0x474>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d118      	bne.n	8005e70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e3e:	4b74      	ldr	r3, [pc, #464]	; (8006010 <HAL_RCC_OscConfig+0x474>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a73      	ldr	r2, [pc, #460]	; (8006010 <HAL_RCC_OscConfig+0x474>)
 8005e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e4a:	f7fd f98b 	bl	8003164 <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e52:	f7fd f987 	bl	8003164 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e10c      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e64:	4b6a      	ldr	r3, [pc, #424]	; (8006010 <HAL_RCC_OscConfig+0x474>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d106      	bne.n	8005e86 <HAL_RCC_OscConfig+0x2ea>
 8005e78:	4b64      	ldr	r3, [pc, #400]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7c:	4a63      	ldr	r2, [pc, #396]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	6713      	str	r3, [r2, #112]	; 0x70
 8005e84:	e01c      	b.n	8005ec0 <HAL_RCC_OscConfig+0x324>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b05      	cmp	r3, #5
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x30c>
 8005e8e:	4b5f      	ldr	r3, [pc, #380]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e92:	4a5e      	ldr	r2, [pc, #376]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005e94:	f043 0304 	orr.w	r3, r3, #4
 8005e98:	6713      	str	r3, [r2, #112]	; 0x70
 8005e9a:	4b5c      	ldr	r3, [pc, #368]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	4a5b      	ldr	r2, [pc, #364]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005ea0:	f043 0301 	orr.w	r3, r3, #1
 8005ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea6:	e00b      	b.n	8005ec0 <HAL_RCC_OscConfig+0x324>
 8005ea8:	4b58      	ldr	r3, [pc, #352]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eac:	4a57      	ldr	r2, [pc, #348]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb4:	4b55      	ldr	r3, [pc, #340]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	4a54      	ldr	r2, [pc, #336]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005eba:	f023 0304 	bic.w	r3, r3, #4
 8005ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec8:	f7fd f94c 	bl	8003164 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ece:	e00a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed0:	f7fd f948 	bl	8003164 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e0cb      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee6:	4b49      	ldr	r3, [pc, #292]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0ee      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x334>
 8005ef2:	e014      	b.n	8005f1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef4:	f7fd f936 	bl	8003164 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005efc:	f7fd f932 	bl	8003164 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e0b5      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f12:	4b3e      	ldr	r3, [pc, #248]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1ee      	bne.n	8005efc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d105      	bne.n	8005f30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f24:	4b39      	ldr	r3, [pc, #228]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	4a38      	ldr	r2, [pc, #224]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80a1 	beq.w	800607c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f3a:	4b34      	ldr	r3, [pc, #208]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d05c      	beq.n	8006000 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d141      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f4e:	4b31      	ldr	r3, [pc, #196]	; (8006014 <HAL_RCC_OscConfig+0x478>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f54:	f7fd f906 	bl	8003164 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f5c:	f7fd f902 	bl	8003164 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e087      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6e:	4b27      	ldr	r3, [pc, #156]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f0      	bne.n	8005f5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69da      	ldr	r2, [r3, #28]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	019b      	lsls	r3, r3, #6
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	3b01      	subs	r3, #1
 8005f94:	041b      	lsls	r3, r3, #16
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	061b      	lsls	r3, r3, #24
 8005f9e:	491b      	ldr	r1, [pc, #108]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <HAL_RCC_OscConfig+0x478>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005faa:	f7fd f8db 	bl	8003164 <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb2:	f7fd f8d7 	bl	8003164 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e05c      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc4:	4b11      	ldr	r3, [pc, #68]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0f0      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x416>
 8005fd0:	e054      	b.n	800607c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd2:	4b10      	ldr	r3, [pc, #64]	; (8006014 <HAL_RCC_OscConfig+0x478>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd8:	f7fd f8c4 	bl	8003164 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe0:	f7fd f8c0 	bl	8003164 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e045      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_RCC_OscConfig+0x470>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1f0      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x444>
 8005ffe:	e03d      	b.n	800607c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d107      	bne.n	8006018 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e038      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
 800600c:	40023800 	.word	0x40023800
 8006010:	40007000 	.word	0x40007000
 8006014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <HAL_RCC_OscConfig+0x4ec>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d028      	beq.n	8006078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006030:	429a      	cmp	r2, r3
 8006032:	d121      	bne.n	8006078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603e:	429a      	cmp	r2, r3
 8006040:	d11a      	bne.n	8006078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006048:	4013      	ands	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800604e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006050:	4293      	cmp	r3, r2
 8006052:	d111      	bne.n	8006078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	3b01      	subs	r3, #1
 8006062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006064:	429a      	cmp	r2, r3
 8006066:	d107      	bne.n	8006078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006074:	429a      	cmp	r2, r3
 8006076:	d001      	beq.n	800607c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800

0800608c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e0cc      	b.n	800623a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060a0:	4b68      	ldr	r3, [pc, #416]	; (8006244 <HAL_RCC_ClockConfig+0x1b8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d90c      	bls.n	80060c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ae:	4b65      	ldr	r3, [pc, #404]	; (8006244 <HAL_RCC_ClockConfig+0x1b8>)
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b6:	4b63      	ldr	r3, [pc, #396]	; (8006244 <HAL_RCC_ClockConfig+0x1b8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d001      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0b8      	b.n	800623a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d020      	beq.n	8006116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060e0:	4b59      	ldr	r3, [pc, #356]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	4a58      	ldr	r2, [pc, #352]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060f8:	4b53      	ldr	r3, [pc, #332]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	4a52      	ldr	r2, [pc, #328]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006104:	4b50      	ldr	r3, [pc, #320]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	494d      	ldr	r1, [pc, #308]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	4313      	orrs	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d044      	beq.n	80061ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d107      	bne.n	800613a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612a:	4b47      	ldr	r3, [pc, #284]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d119      	bne.n	800616a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e07f      	b.n	800623a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d003      	beq.n	800614a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006146:	2b03      	cmp	r3, #3
 8006148:	d107      	bne.n	800615a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800614a:	4b3f      	ldr	r3, [pc, #252]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e06f      	b.n	800623a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800615a:	4b3b      	ldr	r3, [pc, #236]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e067      	b.n	800623a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800616a:	4b37      	ldr	r3, [pc, #220]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f023 0203 	bic.w	r2, r3, #3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	4934      	ldr	r1, [pc, #208]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	4313      	orrs	r3, r2
 800617a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800617c:	f7fc fff2 	bl	8003164 <HAL_GetTick>
 8006180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006182:	e00a      	b.n	800619a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006184:	f7fc ffee 	bl	8003164 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e04f      	b.n	800623a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800619a:	4b2b      	ldr	r3, [pc, #172]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 020c 	and.w	r2, r3, #12
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d1eb      	bne.n	8006184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061ac:	4b25      	ldr	r3, [pc, #148]	; (8006244 <HAL_RCC_ClockConfig+0x1b8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d20c      	bcs.n	80061d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ba:	4b22      	ldr	r3, [pc, #136]	; (8006244 <HAL_RCC_ClockConfig+0x1b8>)
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c2:	4b20      	ldr	r3, [pc, #128]	; (8006244 <HAL_RCC_ClockConfig+0x1b8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d001      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e032      	b.n	800623a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061e0:	4b19      	ldr	r3, [pc, #100]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	4916      	ldr	r1, [pc, #88]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d009      	beq.n	8006212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061fe:	4b12      	ldr	r3, [pc, #72]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	490e      	ldr	r1, [pc, #56]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006212:	f000 f821 	bl	8006258 <HAL_RCC_GetSysClockFreq>
 8006216:	4602      	mov	r2, r0
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	f003 030f 	and.w	r3, r3, #15
 8006222:	490a      	ldr	r1, [pc, #40]	; (800624c <HAL_RCC_ClockConfig+0x1c0>)
 8006224:	5ccb      	ldrb	r3, [r1, r3]
 8006226:	fa22 f303 	lsr.w	r3, r2, r3
 800622a:	4a09      	ldr	r2, [pc, #36]	; (8006250 <HAL_RCC_ClockConfig+0x1c4>)
 800622c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f7fc ff52 	bl	80030dc <HAL_InitTick>

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40023c00 	.word	0x40023c00
 8006248:	40023800 	.word	0x40023800
 800624c:	0800dbc8 	.word	0x0800dbc8
 8006250:	20000030 	.word	0x20000030
 8006254:	20000034 	.word	0x20000034

08006258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800625c:	b090      	sub	sp, #64	; 0x40
 800625e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
 8006264:	2300      	movs	r3, #0
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006268:	2300      	movs	r3, #0
 800626a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006270:	4b59      	ldr	r3, [pc, #356]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 030c 	and.w	r3, r3, #12
 8006278:	2b08      	cmp	r3, #8
 800627a:	d00d      	beq.n	8006298 <HAL_RCC_GetSysClockFreq+0x40>
 800627c:	2b08      	cmp	r3, #8
 800627e:	f200 80a1 	bhi.w	80063c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_RCC_GetSysClockFreq+0x34>
 8006286:	2b04      	cmp	r3, #4
 8006288:	d003      	beq.n	8006292 <HAL_RCC_GetSysClockFreq+0x3a>
 800628a:	e09b      	b.n	80063c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800628c:	4b53      	ldr	r3, [pc, #332]	; (80063dc <HAL_RCC_GetSysClockFreq+0x184>)
 800628e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006290:	e09b      	b.n	80063ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006292:	4b53      	ldr	r3, [pc, #332]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006296:	e098      	b.n	80063ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006298:	4b4f      	ldr	r3, [pc, #316]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062a2:	4b4d      	ldr	r3, [pc, #308]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d028      	beq.n	8006300 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ae:	4b4a      	ldr	r3, [pc, #296]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	099b      	lsrs	r3, r3, #6
 80062b4:	2200      	movs	r2, #0
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	627a      	str	r2, [r7, #36]	; 0x24
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80062c0:	2100      	movs	r1, #0
 80062c2:	4b47      	ldr	r3, [pc, #284]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80062c4:	fb03 f201 	mul.w	r2, r3, r1
 80062c8:	2300      	movs	r3, #0
 80062ca:	fb00 f303 	mul.w	r3, r0, r3
 80062ce:	4413      	add	r3, r2
 80062d0:	4a43      	ldr	r2, [pc, #268]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80062d2:	fba0 1202 	umull	r1, r2, r0, r2
 80062d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d8:	460a      	mov	r2, r1
 80062da:	62ba      	str	r2, [r7, #40]	; 0x28
 80062dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062de:	4413      	add	r3, r2
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	2200      	movs	r2, #0
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	61fa      	str	r2, [r7, #28]
 80062ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80062f2:	f7fa fcc9 	bl	8000c88 <__aeabi_uldivmod>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4613      	mov	r3, r2
 80062fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fe:	e053      	b.n	80063a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006300:	4b35      	ldr	r3, [pc, #212]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	099b      	lsrs	r3, r3, #6
 8006306:	2200      	movs	r2, #0
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	617a      	str	r2, [r7, #20]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006312:	f04f 0b00 	mov.w	fp, #0
 8006316:	4652      	mov	r2, sl
 8006318:	465b      	mov	r3, fp
 800631a:	f04f 0000 	mov.w	r0, #0
 800631e:	f04f 0100 	mov.w	r1, #0
 8006322:	0159      	lsls	r1, r3, #5
 8006324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006328:	0150      	lsls	r0, r2, #5
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	ebb2 080a 	subs.w	r8, r2, sl
 8006332:	eb63 090b 	sbc.w	r9, r3, fp
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006342:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006346:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800634a:	ebb2 0408 	subs.w	r4, r2, r8
 800634e:	eb63 0509 	sbc.w	r5, r3, r9
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	00eb      	lsls	r3, r5, #3
 800635c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006360:	00e2      	lsls	r2, r4, #3
 8006362:	4614      	mov	r4, r2
 8006364:	461d      	mov	r5, r3
 8006366:	eb14 030a 	adds.w	r3, r4, sl
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	eb45 030b 	adc.w	r3, r5, fp
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800637e:	4629      	mov	r1, r5
 8006380:	028b      	lsls	r3, r1, #10
 8006382:	4621      	mov	r1, r4
 8006384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006388:	4621      	mov	r1, r4
 800638a:	028a      	lsls	r2, r1, #10
 800638c:	4610      	mov	r0, r2
 800638e:	4619      	mov	r1, r3
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	2200      	movs	r2, #0
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	60fa      	str	r2, [r7, #12]
 8006398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800639c:	f7fa fc74 	bl	8000c88 <__aeabi_uldivmod>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4613      	mov	r3, r2
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	0c1b      	lsrs	r3, r3, #16
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	3301      	adds	r3, #1
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80063b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80063c2:	e002      	b.n	80063ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <HAL_RCC_GetSysClockFreq+0x184>)
 80063c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80063c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3740      	adds	r7, #64	; 0x40
 80063d0:	46bd      	mov	sp, r7
 80063d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d6:	bf00      	nop
 80063d8:	40023800 	.word	0x40023800
 80063dc:	00f42400 	.word	0x00f42400
 80063e0:	017d7840 	.word	0x017d7840

080063e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063e8:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80063ea:	681b      	ldr	r3, [r3, #0]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000030 	.word	0x20000030

080063fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006400:	f7ff fff0 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 8006404:	4602      	mov	r2, r0
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	0a9b      	lsrs	r3, r3, #10
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	4903      	ldr	r1, [pc, #12]	; (8006420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006412:	5ccb      	ldrb	r3, [r1, r3]
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006418:	4618      	mov	r0, r3
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40023800 	.word	0x40023800
 8006420:	0800dbd8 	.word	0x0800dbd8

08006424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006428:	f7ff ffdc 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 800642c:	4602      	mov	r2, r0
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	0b5b      	lsrs	r3, r3, #13
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	4903      	ldr	r1, [pc, #12]	; (8006448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800643a:	5ccb      	ldrb	r3, [r1, r3]
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40023800 	.word	0x40023800
 8006448:	0800dbd8 	.word	0x0800dbd8

0800644c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e03f      	b.n	80064de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fc fd10 	bl	8002e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2224      	movs	r2, #36	; 0x24
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800648e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 f881 	bl	8007598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b08a      	sub	sp, #40	; 0x28
 80064ea:	af02      	add	r7, sp, #8
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	4613      	mov	r3, r2
 80064f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b20      	cmp	r3, #32
 8006504:	d17c      	bne.n	8006600 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <HAL_UART_Transmit+0x2c>
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e075      	b.n	8006602 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_UART_Transmit+0x3e>
 8006520:	2302      	movs	r3, #2
 8006522:	e06e      	b.n	8006602 <HAL_UART_Transmit+0x11c>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2221      	movs	r2, #33	; 0x21
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800653a:	f7fc fe13 	bl	8003164 <HAL_GetTick>
 800653e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	88fa      	ldrh	r2, [r7, #6]
 800654a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006554:	d108      	bne.n	8006568 <HAL_UART_Transmit+0x82>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	e003      	b.n	8006570 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006578:	e02a      	b.n	80065d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2200      	movs	r2, #0
 8006582:	2180      	movs	r1, #128	; 0x80
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fd38 	bl	8006ffa <UART_WaitOnFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e036      	b.n	8006602 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	3302      	adds	r3, #2
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e007      	b.n	80065c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	3301      	adds	r3, #1
 80065c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1cf      	bne.n	800657a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2200      	movs	r2, #0
 80065e2:	2140      	movs	r1, #64	; 0x40
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 fd08 	bl	8006ffa <UART_WaitOnFlagUntilTimeout>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e006      	b.n	8006602 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	e000      	b.n	8006602 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006600:	2302      	movs	r3, #2
  }
}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b20      	cmp	r3, #32
 8006624:	d165      	bne.n	80066f2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <HAL_UART_Transmit_DMA+0x26>
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e05e      	b.n	80066f4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_UART_Transmit_DMA+0x38>
 8006640:	2302      	movs	r3, #2
 8006642:	e057      	b.n	80066f4 <HAL_UART_Transmit_DMA+0xe8>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	88fa      	ldrh	r2, [r7, #6]
 8006656:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	88fa      	ldrh	r2, [r7, #6]
 800665c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2221      	movs	r2, #33	; 0x21
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006670:	4a22      	ldr	r2, [pc, #136]	; (80066fc <HAL_UART_Transmit_DMA+0xf0>)
 8006672:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006678:	4a21      	ldr	r2, [pc, #132]	; (8006700 <HAL_UART_Transmit_DMA+0xf4>)
 800667a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	4a20      	ldr	r2, [pc, #128]	; (8006704 <HAL_UART_Transmit_DMA+0xf8>)
 8006682:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	2200      	movs	r2, #0
 800668a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800668c:	f107 0308 	add.w	r3, r7, #8
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	6819      	ldr	r1, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3304      	adds	r3, #4
 80066a0:	461a      	mov	r2, r3
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	f7fd fdb0 	bl	8004208 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066b0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3314      	adds	r3, #20
 80066c0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	617b      	str	r3, [r7, #20]
   return(result);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066da:	627a      	str	r2, [r7, #36]	; 0x24
 80066dc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6a39      	ldr	r1, [r7, #32]
 80066e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e5      	bne.n	80066ba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e000      	b.n	80066f4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80066f2:	2302      	movs	r3, #2
  }
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3730      	adds	r7, #48	; 0x30
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	08006d55 	.word	0x08006d55
 8006700:	08006def 	.word	0x08006def
 8006704:	08006f67 	.word	0x08006f67

08006708 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	; 0x30
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b20      	cmp	r3, #32
 8006720:	d152      	bne.n	80067c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006728:	88fb      	ldrh	r3, [r7, #6]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e04b      	b.n	80067ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800673c:	2302      	movs	r3, #2
 800673e:	e044      	b.n	80067ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	461a      	mov	r2, r3
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 fcbf 	bl	80070d8 <UART_Start_Receive_DMA>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006760:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006764:	2b00      	cmp	r3, #0
 8006766:	d12c      	bne.n	80067c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676c:	2b01      	cmp	r3, #1
 800676e:	d125      	bne.n	80067bc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006770:	2300      	movs	r3, #0
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	330c      	adds	r3, #12
 800678c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	617b      	str	r3, [r7, #20]
   return(result);
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f043 0310 	orr.w	r3, r3, #16
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a6:	627a      	str	r2, [r7, #36]	; 0x24
 80067a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6a39      	ldr	r1, [r7, #32]
 80067ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e5      	bne.n	8006786 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80067ba:	e002      	b.n	80067c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80067c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067c6:	e000      	b.n	80067ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3730      	adds	r7, #48	; 0x30
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b0ba      	sub	sp, #232	; 0xe8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10f      	bne.n	800683a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <HAL_UART_IRQHandler+0x66>
 8006826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fdf5 	bl	8007422 <UART_Receive_IT>
      return;
 8006838:	e256      	b.n	8006ce8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800683a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80de 	beq.w	8006a00 <HAL_UART_IRQHandler+0x22c>
 8006844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006854:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 80d1 	beq.w	8006a00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <HAL_UART_IRQHandler+0xae>
 800686a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800686e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	f043 0201 	orr.w	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <HAL_UART_IRQHandler+0xd2>
 800688e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f043 0202 	orr.w	r2, r3, #2
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00b      	beq.n	80068ca <HAL_UART_IRQHandler+0xf6>
 80068b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f043 0204 	orr.w	r2, r3, #4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ce:	f003 0308 	and.w	r3, r3, #8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d011      	beq.n	80068fa <HAL_UART_IRQHandler+0x126>
 80068d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d105      	bne.n	80068ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f043 0208 	orr.w	r2, r3, #8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 81ed 	beq.w	8006cde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_UART_IRQHandler+0x14e>
 8006910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fd80 	bl	8007422 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	bf0c      	ite	eq
 8006930:	2301      	moveq	r3, #1
 8006932:	2300      	movne	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <HAL_UART_IRQHandler+0x17a>
 8006946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d04f      	beq.n	80069ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fc88 	bl	8007264 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	d141      	bne.n	80069e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3314      	adds	r3, #20
 8006968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800697c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3314      	adds	r3, #20
 800698a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800698e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800699a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1d9      	bne.n	8006962 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d013      	beq.n	80069de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	4a7d      	ldr	r2, [pc, #500]	; (8006bb0 <HAL_UART_IRQHandler+0x3dc>)
 80069bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fd fce8 	bl	8004398 <HAL_DMA_Abort_IT>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d016      	beq.n	80069fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	e00e      	b.n	80069fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9ae 	bl	8006d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e4:	e00a      	b.n	80069fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f9aa 	bl	8006d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ec:	e006      	b.n	80069fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f9a6 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069fa:	e170      	b.n	8006cde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	bf00      	nop
    return;
 80069fe:	e16e      	b.n	8006cde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	f040 814a 	bne.w	8006c9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 8143 	beq.w	8006c9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 813c 	beq.w	8006c9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a26:	2300      	movs	r3, #0
 8006a28:	60bb      	str	r3, [r7, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	f040 80b4 	bne.w	8006bb4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8140 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	f080 8139 	bcs.w	8006ce2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a82:	f000 8088 	beq.w	8006b96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	330c      	adds	r3, #12
 8006aae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006abe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1d9      	bne.n	8006a86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3314      	adds	r3, #20
 8006ad8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae4:	f023 0301 	bic.w	r3, r3, #1
 8006ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3314      	adds	r3, #20
 8006af2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006af6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006afa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006afe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e1      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3314      	adds	r3, #20
 8006b14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e3      	bne.n	8006b0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b66:	f023 0310 	bic.w	r3, r3, #16
 8006b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b78:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e3      	bne.n	8006b54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd fb91 	bl	80042b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fc f910 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bac:	e099      	b.n	8006ce2 <HAL_UART_IRQHandler+0x50e>
 8006bae:	bf00      	nop
 8006bb0:	0800732b 	.word	0x0800732b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 808b 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8086 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	330c      	adds	r3, #12
 8006bfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bfe:	647a      	str	r2, [r7, #68]	; 0x44
 8006c00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e3      	bne.n	8006bda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3314      	adds	r3, #20
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	623b      	str	r3, [r7, #32]
   return(result);
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	f023 0301 	bic.w	r3, r3, #1
 8006c28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3314      	adds	r3, #20
 8006c32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c36:	633a      	str	r2, [r7, #48]	; 0x30
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e3      	bne.n	8006c12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0310 	bic.w	r3, r3, #16
 8006c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	330c      	adds	r3, #12
 8006c78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c7c:	61fa      	str	r2, [r7, #28]
 8006c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	69b9      	ldr	r1, [r7, #24]
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	617b      	str	r3, [r7, #20]
   return(result);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e3      	bne.n	8006c58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fc f898 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c9c:	e023      	b.n	8006ce6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <HAL_UART_IRQHandler+0x4ea>
 8006caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fb4b 	bl	8007352 <UART_Transmit_IT>
    return;
 8006cbc:	e014      	b.n	8006ce8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x514>
 8006cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fb8b 	bl	80073f2 <UART_EndTransmit_IT>
    return;
 8006cdc:	e004      	b.n	8006ce8 <HAL_UART_IRQHandler+0x514>
    return;
 8006cde:	bf00      	nop
 8006ce0:	e002      	b.n	8006ce8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ce2:	bf00      	nop
 8006ce4:	e000      	b.n	8006ce8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ce6:	bf00      	nop
  }
}
 8006ce8:	37e8      	adds	r7, #232	; 0xe8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop

08006cf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b090      	sub	sp, #64	; 0x40
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d137      	bne.n	8006de0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d72:	2200      	movs	r2, #0
 8006d74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3314      	adds	r3, #20
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	623b      	str	r3, [r7, #32]
   return(result);
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3314      	adds	r3, #20
 8006d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d96:	633a      	str	r2, [r7, #48]	; 0x30
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e5      	bne.n	8006d76 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	330c      	adds	r3, #12
 8006db0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dca:	61fa      	str	r2, [r7, #28]
 8006dcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	69b9      	ldr	r1, [r7, #24]
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e5      	bne.n	8006daa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dde:	e002      	b.n	8006de6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006de0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006de2:	f7ff ff85 	bl	8006cf0 <HAL_UART_TxCpltCallback>
}
 8006de6:	bf00      	nop
 8006de8:	3740      	adds	r7, #64	; 0x40
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff ff81 	bl	8006d04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b09c      	sub	sp, #112	; 0x70
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d172      	bne.n	8006f0c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e28:	2200      	movs	r2, #0
 8006e2a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e5      	bne.n	8006e2c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	667b      	str	r3, [r7, #100]	; 0x64
 8006e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e80:	647a      	str	r2, [r7, #68]	; 0x44
 8006e82:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3314      	adds	r3, #20
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8006eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eb4:	633a      	str	r2, [r7, #48]	; 0x30
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e5      	bne.n	8006e94 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d119      	bne.n	8006f0c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ef8:	61fa      	str	r2, [r7, #28]
 8006efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	69b9      	ldr	r1, [r7, #24]
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	617b      	str	r3, [r7, #20]
   return(result);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e5      	bne.n	8006ed8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d106      	bne.n	8006f22 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f1c:	f7fb ff56 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f20:	e002      	b.n	8006f28 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006f22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f24:	f7ff fef8 	bl	8006d18 <HAL_UART_RxCpltCallback>
}
 8006f28:	bf00      	nop
 8006f2a:	3770      	adds	r7, #112	; 0x70
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d108      	bne.n	8006f58 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7fb ff3b 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f56:	e002      	b.n	8006f5e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff fee7 	bl	8006d2c <HAL_UART_RxHalfCpltCallback>
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f82:	2b80      	cmp	r3, #128	; 0x80
 8006f84:	bf0c      	ite	eq
 8006f86:	2301      	moveq	r3, #1
 8006f88:	2300      	movne	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b21      	cmp	r3, #33	; 0x21
 8006f98:	d108      	bne.n	8006fac <UART_DMAError+0x46>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006fa6:	68b8      	ldr	r0, [r7, #8]
 8006fa8:	f000 f934 	bl	8007214 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b40      	cmp	r3, #64	; 0x40
 8006fb8:	bf0c      	ite	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	2300      	movne	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b22      	cmp	r3, #34	; 0x22
 8006fcc:	d108      	bne.n	8006fe0 <UART_DMAError+0x7a>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006fda:	68b8      	ldr	r0, [r7, #8]
 8006fdc:	f000 f942 	bl	8007264 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	f043 0210 	orr.w	r2, r3, #16
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fec:	68b8      	ldr	r0, [r7, #8]
 8006fee:	f7ff fea7 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ff2:	bf00      	nop
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b090      	sub	sp, #64	; 0x40
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4613      	mov	r3, r2
 8007008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700a:	e050      	b.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800700c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007012:	d04c      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <UART_WaitOnFlagUntilTimeout+0x30>
 800701a:	f7fc f8a3 	bl	8003164 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007026:	429a      	cmp	r2, r3
 8007028:	d241      	bcs.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	330c      	adds	r3, #12
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	330c      	adds	r3, #12
 8007048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800704a:	637a      	str	r2, [r7, #52]	; 0x34
 800704c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e5      	bne.n	800702a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3314      	adds	r3, #20
 8007064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	613b      	str	r3, [r7, #16]
   return(result);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3314      	adds	r3, #20
 800707c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800707e:	623a      	str	r2, [r7, #32]
 8007080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	69f9      	ldr	r1, [r7, #28]
 8007084:	6a3a      	ldr	r2, [r7, #32]
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	61bb      	str	r3, [r7, #24]
   return(result);
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e5      	bne.n	800705e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e00f      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4013      	ands	r3, r2
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d09f      	beq.n	800700c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3740      	adds	r7, #64	; 0x40
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b098      	sub	sp, #96	; 0x60
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	4613      	mov	r3, r2
 80070e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	88fa      	ldrh	r2, [r7, #6]
 80070f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2222      	movs	r2, #34	; 0x22
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	4a40      	ldr	r2, [pc, #256]	; (8007208 <UART_Start_Receive_DMA+0x130>)
 8007106:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710c:	4a3f      	ldr	r2, [pc, #252]	; (800720c <UART_Start_Receive_DMA+0x134>)
 800710e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	4a3e      	ldr	r2, [pc, #248]	; (8007210 <UART_Start_Receive_DMA+0x138>)
 8007116:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	2200      	movs	r2, #0
 800711e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007120:	f107 0308 	add.w	r3, r7, #8
 8007124:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	f7fd f866 	bl	8004208 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800713c:	2300      	movs	r3, #0
 800713e:	613b      	str	r3, [r7, #16]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d019      	beq.n	8007196 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007178:	65bb      	str	r3, [r7, #88]	; 0x58
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	330c      	adds	r3, #12
 8007180:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007182:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007184:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e5      	bne.n	8007162 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3314      	adds	r3, #20
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	f043 0301 	orr.w	r3, r3, #1
 80071ac:	657b      	str	r3, [r7, #84]	; 0x54
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e5      	bne.n	8007196 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3314      	adds	r3, #20
 80071d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	617b      	str	r3, [r7, #20]
   return(result);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e0:	653b      	str	r3, [r7, #80]	; 0x50
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3314      	adds	r3, #20
 80071e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071ea:	627a      	str	r2, [r7, #36]	; 0x24
 80071ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6a39      	ldr	r1, [r7, #32]
 80071f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3760      	adds	r7, #96	; 0x60
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	08006e0b 	.word	0x08006e0b
 800720c:	08006f31 	.word	0x08006f31
 8007210:	08006f67 	.word	0x08006f67

08007214 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b089      	sub	sp, #36	; 0x24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	330c      	adds	r3, #12
 8007222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	60bb      	str	r3, [r7, #8]
   return(result);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	61ba      	str	r2, [r7, #24]
 800723e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6979      	ldr	r1, [r7, #20]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	613b      	str	r3, [r7, #16]
   return(result);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e5      	bne.n	800721c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007258:	bf00      	nop
 800725a:	3724      	adds	r7, #36	; 0x24
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007264:	b480      	push	{r7}
 8007266:	b095      	sub	sp, #84	; 0x54
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	330c      	adds	r3, #12
 8007272:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	330c      	adds	r3, #12
 800728a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800728c:	643a      	str	r2, [r7, #64]	; 0x40
 800728e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e5      	bne.n	800726c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3314      	adds	r3, #20
 80072a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	f023 0301 	bic.w	r3, r3, #1
 80072b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3314      	adds	r3, #20
 80072be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e5      	bne.n	80072a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d119      	bne.n	8007310 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	330c      	adds	r3, #12
 80072e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f023 0310 	bic.w	r3, r3, #16
 80072f2:	647b      	str	r3, [r7, #68]	; 0x44
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	330c      	adds	r3, #12
 80072fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072fc:	61ba      	str	r2, [r7, #24]
 80072fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	6979      	ldr	r1, [r7, #20]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	613b      	str	r3, [r7, #16]
   return(result);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e5      	bne.n	80072dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800731e:	bf00      	nop
 8007320:	3754      	adds	r7, #84	; 0x54
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007336:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff fcfb 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b21      	cmp	r3, #33	; 0x21
 8007364:	d13e      	bne.n	80073e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	d114      	bne.n	800739a <UART_Transmit_IT+0x48>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d110      	bne.n	800739a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800738c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	1c9a      	adds	r2, r3, #2
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	621a      	str	r2, [r3, #32]
 8007398:	e008      	b.n	80073ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	1c59      	adds	r1, r3, #1
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6211      	str	r1, [r2, #32]
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	4619      	mov	r1, r3
 80073ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10f      	bne.n	80073e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e000      	b.n	80073e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073e4:	2302      	movs	r3, #2
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007408:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff fc6c 	bl	8006cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b08c      	sub	sp, #48	; 0x30
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b22      	cmp	r3, #34	; 0x22
 8007434:	f040 80ab 	bne.w	800758e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007440:	d117      	bne.n	8007472 <UART_Receive_IT+0x50>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d113      	bne.n	8007472 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007460:	b29a      	uxth	r2, r3
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	1c9a      	adds	r2, r3, #2
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	629a      	str	r2, [r3, #40]	; 0x28
 8007470:	e026      	b.n	80074c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007478:	2300      	movs	r3, #0
 800747a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007484:	d007      	beq.n	8007496 <UART_Receive_IT+0x74>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <UART_Receive_IT+0x82>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	b2da      	uxtb	r2, r3
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e008      	b.n	80074b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	4619      	mov	r1, r3
 80074ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d15a      	bne.n	800758a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0220 	bic.w	r2, r2, #32
 80074e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	2b01      	cmp	r3, #1
 8007512:	d135      	bne.n	8007580 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	613b      	str	r3, [r7, #16]
   return(result);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f023 0310 	bic.w	r3, r3, #16
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	330c      	adds	r3, #12
 8007538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753a:	623a      	str	r2, [r7, #32]
 800753c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	69f9      	ldr	r1, [r7, #28]
 8007540:	6a3a      	ldr	r2, [r7, #32]
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	61bb      	str	r3, [r7, #24]
   return(result);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e5      	bne.n	800751a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0310 	and.w	r3, r3, #16
 8007558:	2b10      	cmp	r3, #16
 800755a:	d10a      	bne.n	8007572 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7fb fc27 	bl	8002dcc <HAL_UARTEx_RxEventCallback>
 800757e:	e002      	b.n	8007586 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff fbc9 	bl	8006d18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e002      	b.n	8007590 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	e000      	b.n	8007590 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800758e:	2302      	movs	r3, #2
  }
}
 8007590:	4618      	mov	r0, r3
 8007592:	3730      	adds	r7, #48	; 0x30
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800759c:	b0c0      	sub	sp, #256	; 0x100
 800759e:	af00      	add	r7, sp, #0
 80075a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b4:	68d9      	ldr	r1, [r3, #12]
 80075b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	ea40 0301 	orr.w	r3, r0, r1
 80075c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	431a      	orrs	r2, r3
 80075d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075f0:	f021 010c 	bic.w	r1, r1, #12
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075fe:	430b      	orrs	r3, r1
 8007600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800760e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007612:	6999      	ldr	r1, [r3, #24]
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	ea40 0301 	orr.w	r3, r0, r1
 800761e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4b8f      	ldr	r3, [pc, #572]	; (8007864 <UART_SetConfig+0x2cc>)
 8007628:	429a      	cmp	r2, r3
 800762a:	d005      	beq.n	8007638 <UART_SetConfig+0xa0>
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	4b8d      	ldr	r3, [pc, #564]	; (8007868 <UART_SetConfig+0x2d0>)
 8007634:	429a      	cmp	r2, r3
 8007636:	d104      	bne.n	8007642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007638:	f7fe fef4 	bl	8006424 <HAL_RCC_GetPCLK2Freq>
 800763c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007640:	e003      	b.n	800764a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007642:	f7fe fedb 	bl	80063fc <HAL_RCC_GetPCLK1Freq>
 8007646:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800764a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007654:	f040 810c 	bne.w	8007870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800765c:	2200      	movs	r2, #0
 800765e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007662:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800766a:	4622      	mov	r2, r4
 800766c:	462b      	mov	r3, r5
 800766e:	1891      	adds	r1, r2, r2
 8007670:	65b9      	str	r1, [r7, #88]	; 0x58
 8007672:	415b      	adcs	r3, r3
 8007674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800767a:	4621      	mov	r1, r4
 800767c:	eb12 0801 	adds.w	r8, r2, r1
 8007680:	4629      	mov	r1, r5
 8007682:	eb43 0901 	adc.w	r9, r3, r1
 8007686:	f04f 0200 	mov.w	r2, #0
 800768a:	f04f 0300 	mov.w	r3, #0
 800768e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800769a:	4690      	mov	r8, r2
 800769c:	4699      	mov	r9, r3
 800769e:	4623      	mov	r3, r4
 80076a0:	eb18 0303 	adds.w	r3, r8, r3
 80076a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076a8:	462b      	mov	r3, r5
 80076aa:	eb49 0303 	adc.w	r3, r9, r3
 80076ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80076c6:	460b      	mov	r3, r1
 80076c8:	18db      	adds	r3, r3, r3
 80076ca:	653b      	str	r3, [r7, #80]	; 0x50
 80076cc:	4613      	mov	r3, r2
 80076ce:	eb42 0303 	adc.w	r3, r2, r3
 80076d2:	657b      	str	r3, [r7, #84]	; 0x54
 80076d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076dc:	f7f9 fad4 	bl	8000c88 <__aeabi_uldivmod>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4b61      	ldr	r3, [pc, #388]	; (800786c <UART_SetConfig+0x2d4>)
 80076e6:	fba3 2302 	umull	r2, r3, r3, r2
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	011c      	lsls	r4, r3, #4
 80076ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80076fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007700:	4642      	mov	r2, r8
 8007702:	464b      	mov	r3, r9
 8007704:	1891      	adds	r1, r2, r2
 8007706:	64b9      	str	r1, [r7, #72]	; 0x48
 8007708:	415b      	adcs	r3, r3
 800770a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800770c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007710:	4641      	mov	r1, r8
 8007712:	eb12 0a01 	adds.w	sl, r2, r1
 8007716:	4649      	mov	r1, r9
 8007718:	eb43 0b01 	adc.w	fp, r3, r1
 800771c:	f04f 0200 	mov.w	r2, #0
 8007720:	f04f 0300 	mov.w	r3, #0
 8007724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800772c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007730:	4692      	mov	sl, r2
 8007732:	469b      	mov	fp, r3
 8007734:	4643      	mov	r3, r8
 8007736:	eb1a 0303 	adds.w	r3, sl, r3
 800773a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800773e:	464b      	mov	r3, r9
 8007740:	eb4b 0303 	adc.w	r3, fp, r3
 8007744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007754:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800775c:	460b      	mov	r3, r1
 800775e:	18db      	adds	r3, r3, r3
 8007760:	643b      	str	r3, [r7, #64]	; 0x40
 8007762:	4613      	mov	r3, r2
 8007764:	eb42 0303 	adc.w	r3, r2, r3
 8007768:	647b      	str	r3, [r7, #68]	; 0x44
 800776a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800776e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007772:	f7f9 fa89 	bl	8000c88 <__aeabi_uldivmod>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4611      	mov	r1, r2
 800777c:	4b3b      	ldr	r3, [pc, #236]	; (800786c <UART_SetConfig+0x2d4>)
 800777e:	fba3 2301 	umull	r2, r3, r3, r1
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	2264      	movs	r2, #100	; 0x64
 8007786:	fb02 f303 	mul.w	r3, r2, r3
 800778a:	1acb      	subs	r3, r1, r3
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007792:	4b36      	ldr	r3, [pc, #216]	; (800786c <UART_SetConfig+0x2d4>)
 8007794:	fba3 2302 	umull	r2, r3, r3, r2
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077a0:	441c      	add	r4, r3
 80077a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80077b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80077b4:	4642      	mov	r2, r8
 80077b6:	464b      	mov	r3, r9
 80077b8:	1891      	adds	r1, r2, r2
 80077ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80077bc:	415b      	adcs	r3, r3
 80077be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077c4:	4641      	mov	r1, r8
 80077c6:	1851      	adds	r1, r2, r1
 80077c8:	6339      	str	r1, [r7, #48]	; 0x30
 80077ca:	4649      	mov	r1, r9
 80077cc:	414b      	adcs	r3, r1
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80077dc:	4659      	mov	r1, fp
 80077de:	00cb      	lsls	r3, r1, #3
 80077e0:	4651      	mov	r1, sl
 80077e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077e6:	4651      	mov	r1, sl
 80077e8:	00ca      	lsls	r2, r1, #3
 80077ea:	4610      	mov	r0, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	4642      	mov	r2, r8
 80077f2:	189b      	adds	r3, r3, r2
 80077f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077f8:	464b      	mov	r3, r9
 80077fa:	460a      	mov	r2, r1
 80077fc:	eb42 0303 	adc.w	r3, r2, r3
 8007800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007810:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007818:	460b      	mov	r3, r1
 800781a:	18db      	adds	r3, r3, r3
 800781c:	62bb      	str	r3, [r7, #40]	; 0x28
 800781e:	4613      	mov	r3, r2
 8007820:	eb42 0303 	adc.w	r3, r2, r3
 8007824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800782a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800782e:	f7f9 fa2b 	bl	8000c88 <__aeabi_uldivmod>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <UART_SetConfig+0x2d4>)
 8007838:	fba3 1302 	umull	r1, r3, r3, r2
 800783c:	095b      	lsrs	r3, r3, #5
 800783e:	2164      	movs	r1, #100	; 0x64
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	3332      	adds	r3, #50	; 0x32
 800784a:	4a08      	ldr	r2, [pc, #32]	; (800786c <UART_SetConfig+0x2d4>)
 800784c:	fba2 2303 	umull	r2, r3, r2, r3
 8007850:	095b      	lsrs	r3, r3, #5
 8007852:	f003 0207 	and.w	r2, r3, #7
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4422      	add	r2, r4
 800785e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007860:	e106      	b.n	8007a70 <UART_SetConfig+0x4d8>
 8007862:	bf00      	nop
 8007864:	40011000 	.word	0x40011000
 8007868:	40011400 	.word	0x40011400
 800786c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007874:	2200      	movs	r2, #0
 8007876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800787a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800787e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007882:	4642      	mov	r2, r8
 8007884:	464b      	mov	r3, r9
 8007886:	1891      	adds	r1, r2, r2
 8007888:	6239      	str	r1, [r7, #32]
 800788a:	415b      	adcs	r3, r3
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
 800788e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007892:	4641      	mov	r1, r8
 8007894:	1854      	adds	r4, r2, r1
 8007896:	4649      	mov	r1, r9
 8007898:	eb43 0501 	adc.w	r5, r3, r1
 800789c:	f04f 0200 	mov.w	r2, #0
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	00eb      	lsls	r3, r5, #3
 80078a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078aa:	00e2      	lsls	r2, r4, #3
 80078ac:	4614      	mov	r4, r2
 80078ae:	461d      	mov	r5, r3
 80078b0:	4643      	mov	r3, r8
 80078b2:	18e3      	adds	r3, r4, r3
 80078b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078b8:	464b      	mov	r3, r9
 80078ba:	eb45 0303 	adc.w	r3, r5, r3
 80078be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078d2:	f04f 0200 	mov.w	r2, #0
 80078d6:	f04f 0300 	mov.w	r3, #0
 80078da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80078de:	4629      	mov	r1, r5
 80078e0:	008b      	lsls	r3, r1, #2
 80078e2:	4621      	mov	r1, r4
 80078e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078e8:	4621      	mov	r1, r4
 80078ea:	008a      	lsls	r2, r1, #2
 80078ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078f0:	f7f9 f9ca 	bl	8000c88 <__aeabi_uldivmod>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4b60      	ldr	r3, [pc, #384]	; (8007a7c <UART_SetConfig+0x4e4>)
 80078fa:	fba3 2302 	umull	r2, r3, r3, r2
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	011c      	lsls	r4, r3, #4
 8007902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007906:	2200      	movs	r2, #0
 8007908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800790c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007914:	4642      	mov	r2, r8
 8007916:	464b      	mov	r3, r9
 8007918:	1891      	adds	r1, r2, r2
 800791a:	61b9      	str	r1, [r7, #24]
 800791c:	415b      	adcs	r3, r3
 800791e:	61fb      	str	r3, [r7, #28]
 8007920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007924:	4641      	mov	r1, r8
 8007926:	1851      	adds	r1, r2, r1
 8007928:	6139      	str	r1, [r7, #16]
 800792a:	4649      	mov	r1, r9
 800792c:	414b      	adcs	r3, r1
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800793c:	4659      	mov	r1, fp
 800793e:	00cb      	lsls	r3, r1, #3
 8007940:	4651      	mov	r1, sl
 8007942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007946:	4651      	mov	r1, sl
 8007948:	00ca      	lsls	r2, r1, #3
 800794a:	4610      	mov	r0, r2
 800794c:	4619      	mov	r1, r3
 800794e:	4603      	mov	r3, r0
 8007950:	4642      	mov	r2, r8
 8007952:	189b      	adds	r3, r3, r2
 8007954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007958:	464b      	mov	r3, r9
 800795a:	460a      	mov	r2, r1
 800795c:	eb42 0303 	adc.w	r3, r2, r3
 8007960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	67bb      	str	r3, [r7, #120]	; 0x78
 800796e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800797c:	4649      	mov	r1, r9
 800797e:	008b      	lsls	r3, r1, #2
 8007980:	4641      	mov	r1, r8
 8007982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007986:	4641      	mov	r1, r8
 8007988:	008a      	lsls	r2, r1, #2
 800798a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800798e:	f7f9 f97b 	bl	8000c88 <__aeabi_uldivmod>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4611      	mov	r1, r2
 8007998:	4b38      	ldr	r3, [pc, #224]	; (8007a7c <UART_SetConfig+0x4e4>)
 800799a:	fba3 2301 	umull	r2, r3, r3, r1
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	2264      	movs	r2, #100	; 0x64
 80079a2:	fb02 f303 	mul.w	r3, r2, r3
 80079a6:	1acb      	subs	r3, r1, r3
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	3332      	adds	r3, #50	; 0x32
 80079ac:	4a33      	ldr	r2, [pc, #204]	; (8007a7c <UART_SetConfig+0x4e4>)
 80079ae:	fba2 2303 	umull	r2, r3, r2, r3
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079b8:	441c      	add	r4, r3
 80079ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079be:	2200      	movs	r2, #0
 80079c0:	673b      	str	r3, [r7, #112]	; 0x70
 80079c2:	677a      	str	r2, [r7, #116]	; 0x74
 80079c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80079c8:	4642      	mov	r2, r8
 80079ca:	464b      	mov	r3, r9
 80079cc:	1891      	adds	r1, r2, r2
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	415b      	adcs	r3, r3
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079d8:	4641      	mov	r1, r8
 80079da:	1851      	adds	r1, r2, r1
 80079dc:	6039      	str	r1, [r7, #0]
 80079de:	4649      	mov	r1, r9
 80079e0:	414b      	adcs	r3, r1
 80079e2:	607b      	str	r3, [r7, #4]
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079f0:	4659      	mov	r1, fp
 80079f2:	00cb      	lsls	r3, r1, #3
 80079f4:	4651      	mov	r1, sl
 80079f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079fa:	4651      	mov	r1, sl
 80079fc:	00ca      	lsls	r2, r1, #3
 80079fe:	4610      	mov	r0, r2
 8007a00:	4619      	mov	r1, r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	4642      	mov	r2, r8
 8007a06:	189b      	adds	r3, r3, r2
 8007a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	460a      	mov	r2, r1
 8007a0e:	eb42 0303 	adc.w	r3, r2, r3
 8007a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a1e:	667a      	str	r2, [r7, #100]	; 0x64
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	008b      	lsls	r3, r1, #2
 8007a30:	4641      	mov	r1, r8
 8007a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a36:	4641      	mov	r1, r8
 8007a38:	008a      	lsls	r2, r1, #2
 8007a3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a3e:	f7f9 f923 	bl	8000c88 <__aeabi_uldivmod>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <UART_SetConfig+0x4e4>)
 8007a48:	fba3 1302 	umull	r1, r3, r3, r2
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	2164      	movs	r1, #100	; 0x64
 8007a50:	fb01 f303 	mul.w	r3, r1, r3
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	3332      	adds	r3, #50	; 0x32
 8007a5a:	4a08      	ldr	r2, [pc, #32]	; (8007a7c <UART_SetConfig+0x4e4>)
 8007a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	f003 020f 	and.w	r2, r3, #15
 8007a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4422      	add	r2, r4
 8007a6e:	609a      	str	r2, [r3, #8]
}
 8007a70:	bf00      	nop
 8007a72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a76:	46bd      	mov	sp, r7
 8007a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a7c:	51eb851f 	.word	0x51eb851f

08007a80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a92:	2b84      	cmp	r3, #132	; 0x84
 8007a94:	d005      	beq.n	8007aa2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3303      	adds	r3, #3
 8007aa0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007ab4:	f000 fade 	bl	8008074 <vTaskStartScheduler>
  
  return osOK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	bd80      	pop	{r7, pc}

08007abe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac0:	b089      	sub	sp, #36	; 0x24
 8007ac2:	af04      	add	r7, sp, #16
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d020      	beq.n	8007b12 <osThreadCreate+0x54>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01c      	beq.n	8007b12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685c      	ldr	r4, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691e      	ldr	r6, [r3, #16]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff ffc8 	bl	8007a80 <makeFreeRtosPriority>
 8007af0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007afa:	9202      	str	r2, [sp, #8]
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	9100      	str	r1, [sp, #0]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	4632      	mov	r2, r6
 8007b04:	4629      	mov	r1, r5
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 f8ed 	bl	8007ce6 <xTaskCreateStatic>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	e01c      	b.n	8007b4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685c      	ldr	r4, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b1e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff ffaa 	bl	8007a80 <makeFreeRtosPriority>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	f107 030c 	add.w	r3, r7, #12
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	9200      	str	r2, [sp, #0]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	4632      	mov	r2, r6
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f000 f92f 	bl	8007da0 <xTaskCreate>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d001      	beq.n	8007b4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e000      	b.n	8007b4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <osDelay+0x16>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	e000      	b.n	8007b6e <osDelay+0x18>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fa4c 	bl	800800c <vTaskDelay>
  
  return osOK;
 8007b74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f103 0208 	add.w	r2, r3, #8
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f04f 32ff 	mov.w	r2, #4294967295
 8007b96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f103 0208 	add.w	r2, r3, #8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f103 0208 	add.w	r2, r3, #8
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c36:	d103      	bne.n	8007c40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	e00c      	b.n	8007c5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3308      	adds	r3, #8
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e002      	b.n	8007c4e <vListInsert+0x2e>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d2f6      	bcs.n	8007c48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	601a      	str	r2, [r3, #0]
}
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6892      	ldr	r2, [r2, #8]
 8007ca8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6852      	ldr	r2, [r2, #4]
 8007cb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d103      	bne.n	8007cc6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	1e5a      	subs	r2, r3, #1
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b08e      	sub	sp, #56	; 0x38
 8007cea:	af04      	add	r7, sp, #16
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
 8007cf2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <xTaskCreateStatic+0x46>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	61fb      	str	r3, [r7, #28]
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d2c:	2354      	movs	r3, #84	; 0x54
 8007d2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	2b54      	cmp	r3, #84	; 0x54
 8007d34:	d00a      	beq.n	8007d4c <xTaskCreateStatic+0x66>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	61bb      	str	r3, [r7, #24]
}
 8007d48:	bf00      	nop
 8007d4a:	e7fe      	b.n	8007d4a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01e      	beq.n	8007d92 <xTaskCreateStatic+0xac>
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01b      	beq.n	8007d92 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9303      	str	r3, [sp, #12]
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	9302      	str	r3, [sp, #8]
 8007d74:	f107 0314 	add.w	r3, r7, #20
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 f850 	bl	8007e2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d8c:	f000 f8d4 	bl	8007f38 <prvAddNewTaskToReadyList>
 8007d90:	e001      	b.n	8007d96 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d96:	697b      	ldr	r3, [r7, #20]
	}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3728      	adds	r7, #40	; 0x28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08c      	sub	sp, #48	; 0x30
 8007da4:	af04      	add	r7, sp, #16
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	4613      	mov	r3, r2
 8007dae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007db0:	88fb      	ldrh	r3, [r7, #6]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fee7 	bl	8008b88 <pvPortMalloc>
 8007dba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00e      	beq.n	8007de0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007dc2:	2054      	movs	r0, #84	; 0x54
 8007dc4:	f000 fee0 	bl	8008b88 <pvPortMalloc>
 8007dc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8007dd6:	e005      	b.n	8007de4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007dd8:	6978      	ldr	r0, [r7, #20]
 8007dda:	f000 ffa1 	bl	8008d20 <vPortFree>
 8007dde:	e001      	b.n	8007de4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d017      	beq.n	8007e1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007df2:	88fa      	ldrh	r2, [r7, #6]
 8007df4:	2300      	movs	r3, #0
 8007df6:	9303      	str	r3, [sp, #12]
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	9302      	str	r3, [sp, #8]
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	9301      	str	r3, [sp, #4]
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f80e 	bl	8007e2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e0e:	69f8      	ldr	r0, [r7, #28]
 8007e10:	f000 f892 	bl	8007f38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e14:	2301      	movs	r3, #1
 8007e16:	61bb      	str	r3, [r7, #24]
 8007e18:	e002      	b.n	8007e20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e20:	69bb      	ldr	r3, [r7, #24]
	}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3720      	adds	r7, #32
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b088      	sub	sp, #32
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e42:	3b01      	subs	r3, #1
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f023 0307 	bic.w	r3, r3, #7
 8007e50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	617b      	str	r3, [r7, #20]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01f      	beq.n	8007eb8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	e012      	b.n	8007ea4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4413      	add	r3, r2
 8007e84:	7819      	ldrb	r1, [r3, #0]
 8007e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	3334      	adds	r3, #52	; 0x34
 8007e8e:	460a      	mov	r2, r1
 8007e90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4413      	add	r3, r2
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d006      	beq.n	8007eac <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	2b0f      	cmp	r3, #15
 8007ea8:	d9e9      	bls.n	8007e7e <prvInitialiseNewTask+0x54>
 8007eaa:	e000      	b.n	8007eae <prvInitialiseNewTask+0x84>
			{
				break;
 8007eac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007eb6:	e003      	b.n	8007ec0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	2b06      	cmp	r3, #6
 8007ec4:	d901      	bls.n	8007eca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ec6:	2306      	movs	r3, #6
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ece:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2200      	movs	r2, #0
 8007eda:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff fe6c 	bl	8007bbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	3318      	adds	r3, #24
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff fe67 	bl	8007bbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef8:	f1c3 0207 	rsb	r2, r3, #7
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	2200      	movs	r2, #0
 8007f0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	69b8      	ldr	r0, [r7, #24]
 8007f1a:	f000 fc23 	bl	8008764 <pxPortInitialiseStack>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f30:	bf00      	nop
 8007f32:	3720      	adds	r7, #32
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f40:	f000 fd40 	bl	80089c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f44:	4b2a      	ldr	r3, [pc, #168]	; (8007ff0 <prvAddNewTaskToReadyList+0xb8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4a29      	ldr	r2, [pc, #164]	; (8007ff0 <prvAddNewTaskToReadyList+0xb8>)
 8007f4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f4e:	4b29      	ldr	r3, [pc, #164]	; (8007ff4 <prvAddNewTaskToReadyList+0xbc>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d109      	bne.n	8007f6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f56:	4a27      	ldr	r2, [pc, #156]	; (8007ff4 <prvAddNewTaskToReadyList+0xbc>)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f5c:	4b24      	ldr	r3, [pc, #144]	; (8007ff0 <prvAddNewTaskToReadyList+0xb8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d110      	bne.n	8007f86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f64:	f000 fabc 	bl	80084e0 <prvInitialiseTaskLists>
 8007f68:	e00d      	b.n	8007f86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f6a:	4b23      	ldr	r3, [pc, #140]	; (8007ff8 <prvAddNewTaskToReadyList+0xc0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d109      	bne.n	8007f86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f72:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <prvAddNewTaskToReadyList+0xbc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d802      	bhi.n	8007f86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f80:	4a1c      	ldr	r2, [pc, #112]	; (8007ff4 <prvAddNewTaskToReadyList+0xbc>)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f86:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <prvAddNewTaskToReadyList+0xc4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	4a1b      	ldr	r2, [pc, #108]	; (8007ffc <prvAddNewTaskToReadyList+0xc4>)
 8007f8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	2201      	movs	r2, #1
 8007f96:	409a      	lsls	r2, r3
 8007f98:	4b19      	ldr	r3, [pc, #100]	; (8008000 <prvAddNewTaskToReadyList+0xc8>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	4a18      	ldr	r2, [pc, #96]	; (8008000 <prvAddNewTaskToReadyList+0xc8>)
 8007fa0:	6013      	str	r3, [r2, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4a15      	ldr	r2, [pc, #84]	; (8008004 <prvAddNewTaskToReadyList+0xcc>)
 8007fb0:	441a      	add	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	f7ff fe0d 	bl	8007bd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fbe:	f000 fd31 	bl	8008a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	; (8007ff8 <prvAddNewTaskToReadyList+0xc0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00e      	beq.n	8007fe8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fca:	4b0a      	ldr	r3, [pc, #40]	; (8007ff4 <prvAddNewTaskToReadyList+0xbc>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d207      	bcs.n	8007fe8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fd8:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <prvAddNewTaskToReadyList+0xd0>)
 8007fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20000978 	.word	0x20000978
 8007ff4:	20000878 	.word	0x20000878
 8007ff8:	20000984 	.word	0x20000984
 8007ffc:	20000994 	.word	0x20000994
 8008000:	20000980 	.word	0x20000980
 8008004:	2000087c 	.word	0x2000087c
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d017      	beq.n	800804e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <vTaskDelay+0x60>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <vTaskDelay+0x30>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	60bb      	str	r3, [r7, #8]
}
 8008038:	bf00      	nop
 800803a:	e7fe      	b.n	800803a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800803c:	f000 f87a 	bl	8008134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008040:	2100      	movs	r1, #0
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fb28 	bl	8008698 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008048:	f000 f882 	bl	8008150 <xTaskResumeAll>
 800804c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d107      	bne.n	8008064 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <vTaskDelay+0x64>)
 8008056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	200009a0 	.word	0x200009a0
 8008070:	e000ed04 	.word	0xe000ed04

08008074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08a      	sub	sp, #40	; 0x28
 8008078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008082:	463a      	mov	r2, r7
 8008084:	1d39      	adds	r1, r7, #4
 8008086:	f107 0308 	add.w	r3, r7, #8
 800808a:	4618      	mov	r0, r3
 800808c:	f7f9 f95c 	bl	8001348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	9202      	str	r2, [sp, #8]
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	2300      	movs	r3, #0
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	2300      	movs	r3, #0
 80080a0:	460a      	mov	r2, r1
 80080a2:	491e      	ldr	r1, [pc, #120]	; (800811c <vTaskStartScheduler+0xa8>)
 80080a4:	481e      	ldr	r0, [pc, #120]	; (8008120 <vTaskStartScheduler+0xac>)
 80080a6:	f7ff fe1e 	bl	8007ce6 <xTaskCreateStatic>
 80080aa:	4603      	mov	r3, r0
 80080ac:	4a1d      	ldr	r2, [pc, #116]	; (8008124 <vTaskStartScheduler+0xb0>)
 80080ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080b0:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <vTaskStartScheduler+0xb0>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080b8:	2301      	movs	r3, #1
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	e001      	b.n	80080c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d116      	bne.n	80080f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	613b      	str	r3, [r7, #16]
}
 80080da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080dc:	4b12      	ldr	r3, [pc, #72]	; (8008128 <vTaskStartScheduler+0xb4>)
 80080de:	f04f 32ff 	mov.w	r2, #4294967295
 80080e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080e4:	4b11      	ldr	r3, [pc, #68]	; (800812c <vTaskStartScheduler+0xb8>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080ea:	4b11      	ldr	r3, [pc, #68]	; (8008130 <vTaskStartScheduler+0xbc>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080f0:	f000 fbc6 	bl	8008880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080f4:	e00e      	b.n	8008114 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fc:	d10a      	bne.n	8008114 <vTaskStartScheduler+0xa0>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	60fb      	str	r3, [r7, #12]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <vTaskStartScheduler+0x9e>
}
 8008114:	bf00      	nop
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	0800dbb8 	.word	0x0800dbb8
 8008120:	080084b1 	.word	0x080084b1
 8008124:	2000099c 	.word	0x2000099c
 8008128:	20000998 	.word	0x20000998
 800812c:	20000984 	.word	0x20000984
 8008130:	2000097c 	.word	0x2000097c

08008134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008138:	4b04      	ldr	r3, [pc, #16]	; (800814c <vTaskSuspendAll+0x18>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3301      	adds	r3, #1
 800813e:	4a03      	ldr	r2, [pc, #12]	; (800814c <vTaskSuspendAll+0x18>)
 8008140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008142:	bf00      	nop
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	200009a0 	.word	0x200009a0

08008150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800815a:	2300      	movs	r3, #0
 800815c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800815e:	4b41      	ldr	r3, [pc, #260]	; (8008264 <xTaskResumeAll+0x114>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10a      	bne.n	800817c <xTaskResumeAll+0x2c>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	603b      	str	r3, [r7, #0]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800817c:	f000 fc22 	bl	80089c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008180:	4b38      	ldr	r3, [pc, #224]	; (8008264 <xTaskResumeAll+0x114>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3b01      	subs	r3, #1
 8008186:	4a37      	ldr	r2, [pc, #220]	; (8008264 <xTaskResumeAll+0x114>)
 8008188:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800818a:	4b36      	ldr	r3, [pc, #216]	; (8008264 <xTaskResumeAll+0x114>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d161      	bne.n	8008256 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008192:	4b35      	ldr	r3, [pc, #212]	; (8008268 <xTaskResumeAll+0x118>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d05d      	beq.n	8008256 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800819a:	e02e      	b.n	80081fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800819c:	4b33      	ldr	r3, [pc, #204]	; (800826c <xTaskResumeAll+0x11c>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3318      	adds	r3, #24
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff fd72 	bl	8007c92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff fd6d 	bl	8007c92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	2201      	movs	r2, #1
 80081be:	409a      	lsls	r2, r3
 80081c0:	4b2b      	ldr	r3, [pc, #172]	; (8008270 <xTaskResumeAll+0x120>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	4a2a      	ldr	r2, [pc, #168]	; (8008270 <xTaskResumeAll+0x120>)
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4a27      	ldr	r2, [pc, #156]	; (8008274 <xTaskResumeAll+0x124>)
 80081d8:	441a      	add	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3304      	adds	r3, #4
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f7ff fcf9 	bl	8007bd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ea:	4b23      	ldr	r3, [pc, #140]	; (8008278 <xTaskResumeAll+0x128>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d302      	bcc.n	80081fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80081f4:	4b21      	ldr	r3, [pc, #132]	; (800827c <xTaskResumeAll+0x12c>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081fa:	4b1c      	ldr	r3, [pc, #112]	; (800826c <xTaskResumeAll+0x11c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1cc      	bne.n	800819c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008208:	f000 fa08 	bl	800861c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800820c:	4b1c      	ldr	r3, [pc, #112]	; (8008280 <xTaskResumeAll+0x130>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d010      	beq.n	800823a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008218:	f000 f836 	bl	8008288 <xTaskIncrementTick>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008222:	4b16      	ldr	r3, [pc, #88]	; (800827c <xTaskResumeAll+0x12c>)
 8008224:	2201      	movs	r2, #1
 8008226:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3b01      	subs	r3, #1
 800822c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f1      	bne.n	8008218 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008234:	4b12      	ldr	r3, [pc, #72]	; (8008280 <xTaskResumeAll+0x130>)
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800823a:	4b10      	ldr	r3, [pc, #64]	; (800827c <xTaskResumeAll+0x12c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d009      	beq.n	8008256 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008242:	2301      	movs	r3, #1
 8008244:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008246:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <xTaskResumeAll+0x134>)
 8008248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008256:	f000 fbe5 	bl	8008a24 <vPortExitCritical>

	return xAlreadyYielded;
 800825a:	68bb      	ldr	r3, [r7, #8]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	200009a0 	.word	0x200009a0
 8008268:	20000978 	.word	0x20000978
 800826c:	20000938 	.word	0x20000938
 8008270:	20000980 	.word	0x20000980
 8008274:	2000087c 	.word	0x2000087c
 8008278:	20000878 	.word	0x20000878
 800827c:	2000098c 	.word	0x2000098c
 8008280:	20000988 	.word	0x20000988
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008292:	4b4e      	ldr	r3, [pc, #312]	; (80083cc <xTaskIncrementTick+0x144>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f040 808e 	bne.w	80083b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800829c:	4b4c      	ldr	r3, [pc, #304]	; (80083d0 <xTaskIncrementTick+0x148>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3301      	adds	r3, #1
 80082a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082a4:	4a4a      	ldr	r2, [pc, #296]	; (80083d0 <xTaskIncrementTick+0x148>)
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d120      	bne.n	80082f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80082b0:	4b48      	ldr	r3, [pc, #288]	; (80083d4 <xTaskIncrementTick+0x14c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	603b      	str	r3, [r7, #0]
}
 80082cc:	bf00      	nop
 80082ce:	e7fe      	b.n	80082ce <xTaskIncrementTick+0x46>
 80082d0:	4b40      	ldr	r3, [pc, #256]	; (80083d4 <xTaskIncrementTick+0x14c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	4b40      	ldr	r3, [pc, #256]	; (80083d8 <xTaskIncrementTick+0x150>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a3e      	ldr	r2, [pc, #248]	; (80083d4 <xTaskIncrementTick+0x14c>)
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	4a3e      	ldr	r2, [pc, #248]	; (80083d8 <xTaskIncrementTick+0x150>)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	4b3d      	ldr	r3, [pc, #244]	; (80083dc <xTaskIncrementTick+0x154>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3301      	adds	r3, #1
 80082ea:	4a3c      	ldr	r2, [pc, #240]	; (80083dc <xTaskIncrementTick+0x154>)
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	f000 f995 	bl	800861c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082f2:	4b3b      	ldr	r3, [pc, #236]	; (80083e0 <xTaskIncrementTick+0x158>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d348      	bcc.n	800838e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082fc:	4b35      	ldr	r3, [pc, #212]	; (80083d4 <xTaskIncrementTick+0x14c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d104      	bne.n	8008310 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008306:	4b36      	ldr	r3, [pc, #216]	; (80083e0 <xTaskIncrementTick+0x158>)
 8008308:	f04f 32ff 	mov.w	r2, #4294967295
 800830c:	601a      	str	r2, [r3, #0]
					break;
 800830e:	e03e      	b.n	800838e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008310:	4b30      	ldr	r3, [pc, #192]	; (80083d4 <xTaskIncrementTick+0x14c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d203      	bcs.n	8008330 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008328:	4a2d      	ldr	r2, [pc, #180]	; (80083e0 <xTaskIncrementTick+0x158>)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800832e:	e02e      	b.n	800838e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	3304      	adds	r3, #4
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff fcac 	bl	8007c92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	2b00      	cmp	r3, #0
 8008340:	d004      	beq.n	800834c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	3318      	adds	r3, #24
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fca3 	bl	8007c92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	2201      	movs	r2, #1
 8008352:	409a      	lsls	r2, r3
 8008354:	4b23      	ldr	r3, [pc, #140]	; (80083e4 <xTaskIncrementTick+0x15c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4313      	orrs	r3, r2
 800835a:	4a22      	ldr	r2, [pc, #136]	; (80083e4 <xTaskIncrementTick+0x15c>)
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4a1f      	ldr	r2, [pc, #124]	; (80083e8 <xTaskIncrementTick+0x160>)
 800836c:	441a      	add	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	3304      	adds	r3, #4
 8008372:	4619      	mov	r1, r3
 8008374:	4610      	mov	r0, r2
 8008376:	f7ff fc2f 	bl	8007bd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837e:	4b1b      	ldr	r3, [pc, #108]	; (80083ec <xTaskIncrementTick+0x164>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	429a      	cmp	r2, r3
 8008386:	d3b9      	bcc.n	80082fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008388:	2301      	movs	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800838c:	e7b6      	b.n	80082fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800838e:	4b17      	ldr	r3, [pc, #92]	; (80083ec <xTaskIncrementTick+0x164>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008394:	4914      	ldr	r1, [pc, #80]	; (80083e8 <xTaskIncrementTick+0x160>)
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	440b      	add	r3, r1
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d901      	bls.n	80083aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083aa:	4b11      	ldr	r3, [pc, #68]	; (80083f0 <xTaskIncrementTick+0x168>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d007      	beq.n	80083c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80083b2:	2301      	movs	r3, #1
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	e004      	b.n	80083c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083b8:	4b0e      	ldr	r3, [pc, #56]	; (80083f4 <xTaskIncrementTick+0x16c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3301      	adds	r3, #1
 80083be:	4a0d      	ldr	r2, [pc, #52]	; (80083f4 <xTaskIncrementTick+0x16c>)
 80083c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083c2:	697b      	ldr	r3, [r7, #20]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	200009a0 	.word	0x200009a0
 80083d0:	2000097c 	.word	0x2000097c
 80083d4:	20000930 	.word	0x20000930
 80083d8:	20000934 	.word	0x20000934
 80083dc:	20000990 	.word	0x20000990
 80083e0:	20000998 	.word	0x20000998
 80083e4:	20000980 	.word	0x20000980
 80083e8:	2000087c 	.word	0x2000087c
 80083ec:	20000878 	.word	0x20000878
 80083f0:	2000098c 	.word	0x2000098c
 80083f4:	20000988 	.word	0x20000988

080083f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083fe:	4b27      	ldr	r3, [pc, #156]	; (800849c <vTaskSwitchContext+0xa4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008406:	4b26      	ldr	r3, [pc, #152]	; (80084a0 <vTaskSwitchContext+0xa8>)
 8008408:	2201      	movs	r2, #1
 800840a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800840c:	e03f      	b.n	800848e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800840e:	4b24      	ldr	r3, [pc, #144]	; (80084a0 <vTaskSwitchContext+0xa8>)
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008414:	4b23      	ldr	r3, [pc, #140]	; (80084a4 <vTaskSwitchContext+0xac>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	fab3 f383 	clz	r3, r3
 8008420:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	f1c3 031f 	rsb	r3, r3, #31
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	491f      	ldr	r1, [pc, #124]	; (80084a8 <vTaskSwitchContext+0xb0>)
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <vTaskSwitchContext+0x5c>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	607b      	str	r3, [r7, #4]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <vTaskSwitchContext+0x5a>
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4a12      	ldr	r2, [pc, #72]	; (80084a8 <vTaskSwitchContext+0xb0>)
 8008460:	4413      	add	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	3308      	adds	r3, #8
 8008476:	429a      	cmp	r2, r3
 8008478:	d104      	bne.n	8008484 <vTaskSwitchContext+0x8c>
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	605a      	str	r2, [r3, #4]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	4a08      	ldr	r2, [pc, #32]	; (80084ac <vTaskSwitchContext+0xb4>)
 800848c:	6013      	str	r3, [r2, #0]
}
 800848e:	bf00      	nop
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	200009a0 	.word	0x200009a0
 80084a0:	2000098c 	.word	0x2000098c
 80084a4:	20000980 	.word	0x20000980
 80084a8:	2000087c 	.word	0x2000087c
 80084ac:	20000878 	.word	0x20000878

080084b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80084b8:	f000 f852 	bl	8008560 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084bc:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <prvIdleTask+0x28>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d9f9      	bls.n	80084b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80084c4:	4b05      	ldr	r3, [pc, #20]	; (80084dc <prvIdleTask+0x2c>)
 80084c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084d4:	e7f0      	b.n	80084b8 <prvIdleTask+0x8>
 80084d6:	bf00      	nop
 80084d8:	2000087c 	.word	0x2000087c
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084e6:	2300      	movs	r3, #0
 80084e8:	607b      	str	r3, [r7, #4]
 80084ea:	e00c      	b.n	8008506 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4a12      	ldr	r2, [pc, #72]	; (8008540 <prvInitialiseTaskLists+0x60>)
 80084f8:	4413      	add	r3, r2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff fb3f 	bl	8007b7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3301      	adds	r3, #1
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b06      	cmp	r3, #6
 800850a:	d9ef      	bls.n	80084ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800850c:	480d      	ldr	r0, [pc, #52]	; (8008544 <prvInitialiseTaskLists+0x64>)
 800850e:	f7ff fb36 	bl	8007b7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008512:	480d      	ldr	r0, [pc, #52]	; (8008548 <prvInitialiseTaskLists+0x68>)
 8008514:	f7ff fb33 	bl	8007b7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008518:	480c      	ldr	r0, [pc, #48]	; (800854c <prvInitialiseTaskLists+0x6c>)
 800851a:	f7ff fb30 	bl	8007b7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800851e:	480c      	ldr	r0, [pc, #48]	; (8008550 <prvInitialiseTaskLists+0x70>)
 8008520:	f7ff fb2d 	bl	8007b7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008524:	480b      	ldr	r0, [pc, #44]	; (8008554 <prvInitialiseTaskLists+0x74>)
 8008526:	f7ff fb2a 	bl	8007b7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800852a:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <prvInitialiseTaskLists+0x78>)
 800852c:	4a05      	ldr	r2, [pc, #20]	; (8008544 <prvInitialiseTaskLists+0x64>)
 800852e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <prvInitialiseTaskLists+0x7c>)
 8008532:	4a05      	ldr	r2, [pc, #20]	; (8008548 <prvInitialiseTaskLists+0x68>)
 8008534:	601a      	str	r2, [r3, #0]
}
 8008536:	bf00      	nop
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	2000087c 	.word	0x2000087c
 8008544:	20000908 	.word	0x20000908
 8008548:	2000091c 	.word	0x2000091c
 800854c:	20000938 	.word	0x20000938
 8008550:	2000094c 	.word	0x2000094c
 8008554:	20000964 	.word	0x20000964
 8008558:	20000930 	.word	0x20000930
 800855c:	20000934 	.word	0x20000934

08008560 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008566:	e019      	b.n	800859c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008568:	f000 fa2c 	bl	80089c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856c:	4b10      	ldr	r3, [pc, #64]	; (80085b0 <prvCheckTasksWaitingTermination+0x50>)
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3304      	adds	r3, #4
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff fb8a 	bl	8007c92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800857e:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <prvCheckTasksWaitingTermination+0x54>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3b01      	subs	r3, #1
 8008584:	4a0b      	ldr	r2, [pc, #44]	; (80085b4 <prvCheckTasksWaitingTermination+0x54>)
 8008586:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008588:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <prvCheckTasksWaitingTermination+0x58>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3b01      	subs	r3, #1
 800858e:	4a0a      	ldr	r2, [pc, #40]	; (80085b8 <prvCheckTasksWaitingTermination+0x58>)
 8008590:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008592:	f000 fa47 	bl	8008a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f810 	bl	80085bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800859c:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <prvCheckTasksWaitingTermination+0x58>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e1      	bne.n	8008568 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	2000094c 	.word	0x2000094c
 80085b4:	20000978 	.word	0x20000978
 80085b8:	20000960 	.word	0x20000960

080085bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d108      	bne.n	80085e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fba4 	bl	8008d20 <vPortFree>
				vPortFree( pxTCB );
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fba1 	bl	8008d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085de:	e018      	b.n	8008612 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d103      	bne.n	80085f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fb98 	bl	8008d20 <vPortFree>
	}
 80085f0:	e00f      	b.n	8008612 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d00a      	beq.n	8008612 <prvDeleteTCB+0x56>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	60fb      	str	r3, [r7, #12]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <prvDeleteTCB+0x54>
	}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008622:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <prvResetNextTaskUnblockTime+0x38>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <prvResetNextTaskUnblockTime+0x3c>)
 800862e:	f04f 32ff 	mov.w	r2, #4294967295
 8008632:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008634:	e008      	b.n	8008648 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008636:	4b07      	ldr	r3, [pc, #28]	; (8008654 <prvResetNextTaskUnblockTime+0x38>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	4a04      	ldr	r2, [pc, #16]	; (8008658 <prvResetNextTaskUnblockTime+0x3c>)
 8008646:	6013      	str	r3, [r2, #0]
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	20000930 	.word	0x20000930
 8008658:	20000998 	.word	0x20000998

0800865c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008662:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <xTaskGetSchedulerState+0x34>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800866a:	2301      	movs	r3, #1
 800866c:	607b      	str	r3, [r7, #4]
 800866e:	e008      	b.n	8008682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008670:	4b08      	ldr	r3, [pc, #32]	; (8008694 <xTaskGetSchedulerState+0x38>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008678:	2302      	movs	r3, #2
 800867a:	607b      	str	r3, [r7, #4]
 800867c:	e001      	b.n	8008682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800867e:	2300      	movs	r3, #0
 8008680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008682:	687b      	ldr	r3, [r7, #4]
	}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20000984 	.word	0x20000984
 8008694:	200009a0 	.word	0x200009a0

08008698 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086a2:	4b29      	ldr	r3, [pc, #164]	; (8008748 <prvAddCurrentTaskToDelayedList+0xb0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086a8:	4b28      	ldr	r3, [pc, #160]	; (800874c <prvAddCurrentTaskToDelayedList+0xb4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7ff faef 	bl	8007c92 <uxListRemove>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10b      	bne.n	80086d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80086ba:	4b24      	ldr	r3, [pc, #144]	; (800874c <prvAddCurrentTaskToDelayedList+0xb4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	2201      	movs	r2, #1
 80086c2:	fa02 f303 	lsl.w	r3, r2, r3
 80086c6:	43da      	mvns	r2, r3
 80086c8:	4b21      	ldr	r3, [pc, #132]	; (8008750 <prvAddCurrentTaskToDelayedList+0xb8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4013      	ands	r3, r2
 80086ce:	4a20      	ldr	r2, [pc, #128]	; (8008750 <prvAddCurrentTaskToDelayedList+0xb8>)
 80086d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d8:	d10a      	bne.n	80086f0 <prvAddCurrentTaskToDelayedList+0x58>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086e0:	4b1a      	ldr	r3, [pc, #104]	; (800874c <prvAddCurrentTaskToDelayedList+0xb4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3304      	adds	r3, #4
 80086e6:	4619      	mov	r1, r3
 80086e8:	481a      	ldr	r0, [pc, #104]	; (8008754 <prvAddCurrentTaskToDelayedList+0xbc>)
 80086ea:	f7ff fa75 	bl	8007bd8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086ee:	e026      	b.n	800873e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4413      	add	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086f8:	4b14      	ldr	r3, [pc, #80]	; (800874c <prvAddCurrentTaskToDelayedList+0xb4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	429a      	cmp	r2, r3
 8008706:	d209      	bcs.n	800871c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008708:	4b13      	ldr	r3, [pc, #76]	; (8008758 <prvAddCurrentTaskToDelayedList+0xc0>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	4b0f      	ldr	r3, [pc, #60]	; (800874c <prvAddCurrentTaskToDelayedList+0xb4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3304      	adds	r3, #4
 8008712:	4619      	mov	r1, r3
 8008714:	4610      	mov	r0, r2
 8008716:	f7ff fa83 	bl	8007c20 <vListInsert>
}
 800871a:	e010      	b.n	800873e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800871c:	4b0f      	ldr	r3, [pc, #60]	; (800875c <prvAddCurrentTaskToDelayedList+0xc4>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3304      	adds	r3, #4
 8008726:	4619      	mov	r1, r3
 8008728:	4610      	mov	r0, r2
 800872a:	f7ff fa79 	bl	8007c20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800872e:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	d202      	bcs.n	800873e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008738:	4a09      	ldr	r2, [pc, #36]	; (8008760 <prvAddCurrentTaskToDelayedList+0xc8>)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6013      	str	r3, [r2, #0]
}
 800873e:	bf00      	nop
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	2000097c 	.word	0x2000097c
 800874c:	20000878 	.word	0x20000878
 8008750:	20000980 	.word	0x20000980
 8008754:	20000964 	.word	0x20000964
 8008758:	20000934 	.word	0x20000934
 800875c:	20000930 	.word	0x20000930
 8008760:	20000998 	.word	0x20000998

08008764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3b04      	subs	r3, #4
 8008774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800877c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3b04      	subs	r3, #4
 8008782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f023 0201 	bic.w	r2, r3, #1
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3b04      	subs	r3, #4
 8008792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008794:	4a0c      	ldr	r2, [pc, #48]	; (80087c8 <pxPortInitialiseStack+0x64>)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3b14      	subs	r3, #20
 800879e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3b04      	subs	r3, #4
 80087aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f06f 0202 	mvn.w	r2, #2
 80087b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3b20      	subs	r3, #32
 80087b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087ba:	68fb      	ldr	r3, [r7, #12]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	080087cd 	.word	0x080087cd

080087cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087d6:	4b12      	ldr	r3, [pc, #72]	; (8008820 <prvTaskExitError+0x54>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087de:	d00a      	beq.n	80087f6 <prvTaskExitError+0x2a>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	60fb      	str	r3, [r7, #12]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <prvTaskExitError+0x28>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	60bb      	str	r3, [r7, #8]
}
 8008808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800880a:	bf00      	nop
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0fc      	beq.n	800880c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	2000003c 	.word	0x2000003c
	...

08008830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008830:	4b07      	ldr	r3, [pc, #28]	; (8008850 <pxCurrentTCBConst2>)
 8008832:	6819      	ldr	r1, [r3, #0]
 8008834:	6808      	ldr	r0, [r1, #0]
 8008836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883a:	f380 8809 	msr	PSP, r0
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f04f 0000 	mov.w	r0, #0
 8008846:	f380 8811 	msr	BASEPRI, r0
 800884a:	4770      	bx	lr
 800884c:	f3af 8000 	nop.w

08008850 <pxCurrentTCBConst2>:
 8008850:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008858:	4808      	ldr	r0, [pc, #32]	; (800887c <prvPortStartFirstTask+0x24>)
 800885a:	6800      	ldr	r0, [r0, #0]
 800885c:	6800      	ldr	r0, [r0, #0]
 800885e:	f380 8808 	msr	MSP, r0
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8814 	msr	CONTROL, r0
 800886a:	b662      	cpsie	i
 800886c:	b661      	cpsie	f
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	df00      	svc	0
 8008878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800887a:	bf00      	nop
 800887c:	e000ed08 	.word	0xe000ed08

08008880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008886:	4b46      	ldr	r3, [pc, #280]	; (80089a0 <xPortStartScheduler+0x120>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a46      	ldr	r2, [pc, #280]	; (80089a4 <xPortStartScheduler+0x124>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d10a      	bne.n	80088a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	613b      	str	r3, [r7, #16]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088a6:	4b3e      	ldr	r3, [pc, #248]	; (80089a0 <xPortStartScheduler+0x120>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a3f      	ldr	r2, [pc, #252]	; (80089a8 <xPortStartScheduler+0x128>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d10a      	bne.n	80088c6 <xPortStartScheduler+0x46>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	60fb      	str	r3, [r7, #12]
}
 80088c2:	bf00      	nop
 80088c4:	e7fe      	b.n	80088c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088c6:	4b39      	ldr	r3, [pc, #228]	; (80089ac <xPortStartScheduler+0x12c>)
 80088c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	22ff      	movs	r2, #255	; 0xff
 80088d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	4b31      	ldr	r3, [pc, #196]	; (80089b0 <xPortStartScheduler+0x130>)
 80088ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088ee:	4b31      	ldr	r3, [pc, #196]	; (80089b4 <xPortStartScheduler+0x134>)
 80088f0:	2207      	movs	r2, #7
 80088f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088f4:	e009      	b.n	800890a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80088f6:	4b2f      	ldr	r3, [pc, #188]	; (80089b4 <xPortStartScheduler+0x134>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4a2d      	ldr	r2, [pc, #180]	; (80089b4 <xPortStartScheduler+0x134>)
 80088fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008912:	2b80      	cmp	r3, #128	; 0x80
 8008914:	d0ef      	beq.n	80088f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008916:	4b27      	ldr	r3, [pc, #156]	; (80089b4 <xPortStartScheduler+0x134>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f1c3 0307 	rsb	r3, r3, #7
 800891e:	2b04      	cmp	r3, #4
 8008920:	d00a      	beq.n	8008938 <xPortStartScheduler+0xb8>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	60bb      	str	r3, [r7, #8]
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008938:	4b1e      	ldr	r3, [pc, #120]	; (80089b4 <xPortStartScheduler+0x134>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	4a1d      	ldr	r2, [pc, #116]	; (80089b4 <xPortStartScheduler+0x134>)
 8008940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008942:	4b1c      	ldr	r3, [pc, #112]	; (80089b4 <xPortStartScheduler+0x134>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800894a:	4a1a      	ldr	r2, [pc, #104]	; (80089b4 <xPortStartScheduler+0x134>)
 800894c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	b2da      	uxtb	r2, r3
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008956:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <xPortStartScheduler+0x138>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a17      	ldr	r2, [pc, #92]	; (80089b8 <xPortStartScheduler+0x138>)
 800895c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008962:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <xPortStartScheduler+0x138>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a14      	ldr	r2, [pc, #80]	; (80089b8 <xPortStartScheduler+0x138>)
 8008968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800896c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800896e:	f000 f8dd 	bl	8008b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008972:	4b12      	ldr	r3, [pc, #72]	; (80089bc <xPortStartScheduler+0x13c>)
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008978:	f000 f8fc 	bl	8008b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800897c:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <xPortStartScheduler+0x140>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a0f      	ldr	r2, [pc, #60]	; (80089c0 <xPortStartScheduler+0x140>)
 8008982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008988:	f7ff ff66 	bl	8008858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800898c:	f7ff fd34 	bl	80083f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008990:	f7ff ff1c 	bl	80087cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	e000ed00 	.word	0xe000ed00
 80089a4:	410fc271 	.word	0x410fc271
 80089a8:	410fc270 	.word	0x410fc270
 80089ac:	e000e400 	.word	0xe000e400
 80089b0:	200009a4 	.word	0x200009a4
 80089b4:	200009a8 	.word	0x200009a8
 80089b8:	e000ed20 	.word	0xe000ed20
 80089bc:	2000003c 	.word	0x2000003c
 80089c0:	e000ef34 	.word	0xe000ef34

080089c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	607b      	str	r3, [r7, #4]
}
 80089dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089de:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <vPortEnterCritical+0x58>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	4a0d      	ldr	r2, [pc, #52]	; (8008a1c <vPortEnterCritical+0x58>)
 80089e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089e8:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <vPortEnterCritical+0x58>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d10f      	bne.n	8008a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <vPortEnterCritical+0x5c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	603b      	str	r3, [r7, #0]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <vPortEnterCritical+0x4a>
	}
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	2000003c 	.word	0x2000003c
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a2a:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <vPortExitCritical+0x50>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <vPortExitCritical+0x24>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	607b      	str	r3, [r7, #4]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a48:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <vPortExitCritical+0x50>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <vPortExitCritical+0x50>)
 8008a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a52:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <vPortExitCritical+0x50>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d105      	bne.n	8008a66 <vPortExitCritical+0x42>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	2000003c 	.word	0x2000003c
	...

08008a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a80:	f3ef 8009 	mrs	r0, PSP
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <pxCurrentTCBConst>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	f01e 0f10 	tst.w	lr, #16
 8008a90:	bf08      	it	eq
 8008a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9a:	6010      	str	r0, [r2, #0]
 8008a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008aa4:	f380 8811 	msr	BASEPRI, r0
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f7ff fca2 	bl	80083f8 <vTaskSwitchContext>
 8008ab4:	f04f 0000 	mov.w	r0, #0
 8008ab8:	f380 8811 	msr	BASEPRI, r0
 8008abc:	bc09      	pop	{r0, r3}
 8008abe:	6819      	ldr	r1, [r3, #0]
 8008ac0:	6808      	ldr	r0, [r1, #0]
 8008ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac6:	f01e 0f10 	tst.w	lr, #16
 8008aca:	bf08      	it	eq
 8008acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ad0:	f380 8809 	msr	PSP, r0
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w

08008ae0 <pxCurrentTCBConst>:
 8008ae0:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop

08008ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	607b      	str	r3, [r7, #4]
}
 8008b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b02:	f7ff fbc1 	bl	8008288 <xTaskIncrementTick>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b0c:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <xPortSysTickHandler+0x40>)
 8008b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	2300      	movs	r3, #0
 8008b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f383 8811 	msr	BASEPRI, r3
}
 8008b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	e000ed04 	.word	0xe000ed04

08008b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b30:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <vPortSetupTimerInterrupt+0x34>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b36:	4b0b      	ldr	r3, [pc, #44]	; (8008b64 <vPortSetupTimerInterrupt+0x38>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <vPortSetupTimerInterrupt+0x3c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a0a      	ldr	r2, [pc, #40]	; (8008b6c <vPortSetupTimerInterrupt+0x40>)
 8008b42:	fba2 2303 	umull	r2, r3, r2, r3
 8008b46:	099b      	lsrs	r3, r3, #6
 8008b48:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <vPortSetupTimerInterrupt+0x44>)
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b4e:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <vPortSetupTimerInterrupt+0x34>)
 8008b50:	2207      	movs	r2, #7
 8008b52:	601a      	str	r2, [r3, #0]
}
 8008b54:	bf00      	nop
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	e000e010 	.word	0xe000e010
 8008b64:	e000e018 	.word	0xe000e018
 8008b68:	20000030 	.word	0x20000030
 8008b6c:	10624dd3 	.word	0x10624dd3
 8008b70:	e000e014 	.word	0xe000e014

08008b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b84 <vPortEnableVFP+0x10>
 8008b78:	6801      	ldr	r1, [r0, #0]
 8008b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b7e:	6001      	str	r1, [r0, #0]
 8008b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b82:	bf00      	nop
 8008b84:	e000ed88 	.word	0xe000ed88

08008b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08a      	sub	sp, #40	; 0x28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b94:	f7ff face 	bl	8008134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b98:	4b5b      	ldr	r3, [pc, #364]	; (8008d08 <pvPortMalloc+0x180>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ba0:	f000 f920 	bl	8008de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ba4:	4b59      	ldr	r3, [pc, #356]	; (8008d0c <pvPortMalloc+0x184>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4013      	ands	r3, r2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f040 8093 	bne.w	8008cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01d      	beq.n	8008bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008bb8:	2208      	movs	r2, #8
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d014      	beq.n	8008bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f023 0307 	bic.w	r3, r3, #7
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	617b      	str	r3, [r7, #20]
}
 8008bf0:	bf00      	nop
 8008bf2:	e7fe      	b.n	8008bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d06e      	beq.n	8008cd8 <pvPortMalloc+0x150>
 8008bfa:	4b45      	ldr	r3, [pc, #276]	; (8008d10 <pvPortMalloc+0x188>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d869      	bhi.n	8008cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c04:	4b43      	ldr	r3, [pc, #268]	; (8008d14 <pvPortMalloc+0x18c>)
 8008c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c08:	4b42      	ldr	r3, [pc, #264]	; (8008d14 <pvPortMalloc+0x18c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c0e:	e004      	b.n	8008c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d903      	bls.n	8008c2c <pvPortMalloc+0xa4>
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1f1      	bne.n	8008c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c2c:	4b36      	ldr	r3, [pc, #216]	; (8008d08 <pvPortMalloc+0x180>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d050      	beq.n	8008cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2208      	movs	r2, #8
 8008c3c:	4413      	add	r3, r2
 8008c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	1ad2      	subs	r2, r2, r3
 8008c50:	2308      	movs	r3, #8
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d91f      	bls.n	8008c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00a      	beq.n	8008c80 <pvPortMalloc+0xf8>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	613b      	str	r3, [r7, #16]
}
 8008c7c:	bf00      	nop
 8008c7e:	e7fe      	b.n	8008c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	1ad2      	subs	r2, r2, r3
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c92:	69b8      	ldr	r0, [r7, #24]
 8008c94:	f000 f908 	bl	8008ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c98:	4b1d      	ldr	r3, [pc, #116]	; (8008d10 <pvPortMalloc+0x188>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	4a1b      	ldr	r2, [pc, #108]	; (8008d10 <pvPortMalloc+0x188>)
 8008ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ca6:	4b1a      	ldr	r3, [pc, #104]	; (8008d10 <pvPortMalloc+0x188>)
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <pvPortMalloc+0x190>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d203      	bcs.n	8008cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cb2:	4b17      	ldr	r3, [pc, #92]	; (8008d10 <pvPortMalloc+0x188>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a18      	ldr	r2, [pc, #96]	; (8008d18 <pvPortMalloc+0x190>)
 8008cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <pvPortMalloc+0x184>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008cce:	4b13      	ldr	r3, [pc, #76]	; (8008d1c <pvPortMalloc+0x194>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	4a11      	ldr	r2, [pc, #68]	; (8008d1c <pvPortMalloc+0x194>)
 8008cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008cd8:	f7ff fa3a 	bl	8008150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00a      	beq.n	8008cfc <pvPortMalloc+0x174>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	60fb      	str	r3, [r7, #12]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <pvPortMalloc+0x172>
	return pvReturn;
 8008cfc:	69fb      	ldr	r3, [r7, #28]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3728      	adds	r7, #40	; 0x28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	200057d4 	.word	0x200057d4
 8008d0c:	200057e8 	.word	0x200057e8
 8008d10:	200057d8 	.word	0x200057d8
 8008d14:	200057cc 	.word	0x200057cc
 8008d18:	200057dc 	.word	0x200057dc
 8008d1c:	200057e0 	.word	0x200057e0

08008d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d04d      	beq.n	8008dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d32:	2308      	movs	r3, #8
 8008d34:	425b      	negs	r3, r3
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	4413      	add	r3, r2
 8008d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	4b24      	ldr	r3, [pc, #144]	; (8008dd8 <vPortFree+0xb8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4013      	ands	r3, r2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <vPortFree+0x44>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	60fb      	str	r3, [r7, #12]
}
 8008d60:	bf00      	nop
 8008d62:	e7fe      	b.n	8008d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00a      	beq.n	8008d82 <vPortFree+0x62>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	60bb      	str	r3, [r7, #8]
}
 8008d7e:	bf00      	nop
 8008d80:	e7fe      	b.n	8008d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <vPortFree+0xb8>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01e      	beq.n	8008dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d11a      	bne.n	8008dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <vPortFree+0xb8>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	43db      	mvns	r3, r3
 8008da2:	401a      	ands	r2, r3
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008da8:	f7ff f9c4 	bl	8008134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <vPortFree+0xbc>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4413      	add	r3, r2
 8008db6:	4a09      	ldr	r2, [pc, #36]	; (8008ddc <vPortFree+0xbc>)
 8008db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008dba:	6938      	ldr	r0, [r7, #16]
 8008dbc:	f000 f874 	bl	8008ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008dc0:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <vPortFree+0xc0>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	4a06      	ldr	r2, [pc, #24]	; (8008de0 <vPortFree+0xc0>)
 8008dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008dca:	f7ff f9c1 	bl	8008150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008dce:	bf00      	nop
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	200057e8 	.word	0x200057e8
 8008ddc:	200057d8 	.word	0x200057d8
 8008de0:	200057e4 	.word	0x200057e4

08008de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dea:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008df0:	4b27      	ldr	r3, [pc, #156]	; (8008e90 <prvHeapInit+0xac>)
 8008df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00c      	beq.n	8008e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3307      	adds	r3, #7
 8008e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0307 	bic.w	r3, r3, #7
 8008e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	4a1f      	ldr	r2, [pc, #124]	; (8008e90 <prvHeapInit+0xac>)
 8008e14:	4413      	add	r3, r2
 8008e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e1c:	4a1d      	ldr	r2, [pc, #116]	; (8008e94 <prvHeapInit+0xb0>)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e22:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <prvHeapInit+0xb0>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e30:	2208      	movs	r2, #8
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0307 	bic.w	r3, r3, #7
 8008e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4a15      	ldr	r2, [pc, #84]	; (8008e98 <prvHeapInit+0xb4>)
 8008e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e46:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <prvHeapInit+0xb4>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e4e:	4b12      	ldr	r3, [pc, #72]	; (8008e98 <prvHeapInit+0xb4>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e64:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <prvHeapInit+0xb4>)
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <prvHeapInit+0xb8>)
 8008e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	4a09      	ldr	r2, [pc, #36]	; (8008ea0 <prvHeapInit+0xbc>)
 8008e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <prvHeapInit+0xc0>)
 8008e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	200009ac 	.word	0x200009ac
 8008e94:	200057cc 	.word	0x200057cc
 8008e98:	200057d4 	.word	0x200057d4
 8008e9c:	200057dc 	.word	0x200057dc
 8008ea0:	200057d8 	.word	0x200057d8
 8008ea4:	200057e8 	.word	0x200057e8

08008ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008eb0:	4b28      	ldr	r3, [pc, #160]	; (8008f54 <prvInsertBlockIntoFreeList+0xac>)
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	e002      	b.n	8008ebc <prvInsertBlockIntoFreeList+0x14>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d8f7      	bhi.n	8008eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d108      	bne.n	8008eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	441a      	add	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	441a      	add	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d118      	bne.n	8008f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <prvInsertBlockIntoFreeList+0xb0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d00d      	beq.n	8008f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	441a      	add	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	e008      	b.n	8008f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f26:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <prvInsertBlockIntoFreeList+0xb0>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	e003      	b.n	8008f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d002      	beq.n	8008f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f46:	bf00      	nop
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	200057cc 	.word	0x200057cc
 8008f58:	200057d4 	.word	0x200057d4

08008f5c <__cvt>:
 8008f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	ec55 4b10 	vmov	r4, r5, d0
 8008f64:	2d00      	cmp	r5, #0
 8008f66:	460e      	mov	r6, r1
 8008f68:	4619      	mov	r1, r3
 8008f6a:	462b      	mov	r3, r5
 8008f6c:	bfbb      	ittet	lt
 8008f6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f72:	461d      	movlt	r5, r3
 8008f74:	2300      	movge	r3, #0
 8008f76:	232d      	movlt	r3, #45	; 0x2d
 8008f78:	700b      	strb	r3, [r1, #0]
 8008f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f80:	4691      	mov	r9, r2
 8008f82:	f023 0820 	bic.w	r8, r3, #32
 8008f86:	bfbc      	itt	lt
 8008f88:	4622      	movlt	r2, r4
 8008f8a:	4614      	movlt	r4, r2
 8008f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f90:	d005      	beq.n	8008f9e <__cvt+0x42>
 8008f92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f96:	d100      	bne.n	8008f9a <__cvt+0x3e>
 8008f98:	3601      	adds	r6, #1
 8008f9a:	2102      	movs	r1, #2
 8008f9c:	e000      	b.n	8008fa0 <__cvt+0x44>
 8008f9e:	2103      	movs	r1, #3
 8008fa0:	ab03      	add	r3, sp, #12
 8008fa2:	9301      	str	r3, [sp, #4]
 8008fa4:	ab02      	add	r3, sp, #8
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	ec45 4b10 	vmov	d0, r4, r5
 8008fac:	4653      	mov	r3, sl
 8008fae:	4632      	mov	r2, r6
 8008fb0:	f001 f88a 	bl	800a0c8 <_dtoa_r>
 8008fb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fb8:	4607      	mov	r7, r0
 8008fba:	d102      	bne.n	8008fc2 <__cvt+0x66>
 8008fbc:	f019 0f01 	tst.w	r9, #1
 8008fc0:	d022      	beq.n	8009008 <__cvt+0xac>
 8008fc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fc6:	eb07 0906 	add.w	r9, r7, r6
 8008fca:	d110      	bne.n	8008fee <__cvt+0x92>
 8008fcc:	783b      	ldrb	r3, [r7, #0]
 8008fce:	2b30      	cmp	r3, #48	; 0x30
 8008fd0:	d10a      	bne.n	8008fe8 <__cvt+0x8c>
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	f7f7 fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fde:	b918      	cbnz	r0, 8008fe8 <__cvt+0x8c>
 8008fe0:	f1c6 0601 	rsb	r6, r6, #1
 8008fe4:	f8ca 6000 	str.w	r6, [sl]
 8008fe8:	f8da 3000 	ldr.w	r3, [sl]
 8008fec:	4499      	add	r9, r3
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	f7f7 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ffa:	b108      	cbz	r0, 8009000 <__cvt+0xa4>
 8008ffc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009000:	2230      	movs	r2, #48	; 0x30
 8009002:	9b03      	ldr	r3, [sp, #12]
 8009004:	454b      	cmp	r3, r9
 8009006:	d307      	bcc.n	8009018 <__cvt+0xbc>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800900c:	1bdb      	subs	r3, r3, r7
 800900e:	4638      	mov	r0, r7
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	b004      	add	sp, #16
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	1c59      	adds	r1, r3, #1
 800901a:	9103      	str	r1, [sp, #12]
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	e7f0      	b.n	8009002 <__cvt+0xa6>

08009020 <__exponent>:
 8009020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009022:	4603      	mov	r3, r0
 8009024:	2900      	cmp	r1, #0
 8009026:	bfb8      	it	lt
 8009028:	4249      	neglt	r1, r1
 800902a:	f803 2b02 	strb.w	r2, [r3], #2
 800902e:	bfb4      	ite	lt
 8009030:	222d      	movlt	r2, #45	; 0x2d
 8009032:	222b      	movge	r2, #43	; 0x2b
 8009034:	2909      	cmp	r1, #9
 8009036:	7042      	strb	r2, [r0, #1]
 8009038:	dd2a      	ble.n	8009090 <__exponent+0x70>
 800903a:	f10d 0207 	add.w	r2, sp, #7
 800903e:	4617      	mov	r7, r2
 8009040:	260a      	movs	r6, #10
 8009042:	4694      	mov	ip, r2
 8009044:	fb91 f5f6 	sdiv	r5, r1, r6
 8009048:	fb06 1415 	mls	r4, r6, r5, r1
 800904c:	3430      	adds	r4, #48	; 0x30
 800904e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009052:	460c      	mov	r4, r1
 8009054:	2c63      	cmp	r4, #99	; 0x63
 8009056:	f102 32ff 	add.w	r2, r2, #4294967295
 800905a:	4629      	mov	r1, r5
 800905c:	dcf1      	bgt.n	8009042 <__exponent+0x22>
 800905e:	3130      	adds	r1, #48	; 0x30
 8009060:	f1ac 0402 	sub.w	r4, ip, #2
 8009064:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009068:	1c41      	adds	r1, r0, #1
 800906a:	4622      	mov	r2, r4
 800906c:	42ba      	cmp	r2, r7
 800906e:	d30a      	bcc.n	8009086 <__exponent+0x66>
 8009070:	f10d 0209 	add.w	r2, sp, #9
 8009074:	eba2 020c 	sub.w	r2, r2, ip
 8009078:	42bc      	cmp	r4, r7
 800907a:	bf88      	it	hi
 800907c:	2200      	movhi	r2, #0
 800907e:	4413      	add	r3, r2
 8009080:	1a18      	subs	r0, r3, r0
 8009082:	b003      	add	sp, #12
 8009084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009086:	f812 5b01 	ldrb.w	r5, [r2], #1
 800908a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800908e:	e7ed      	b.n	800906c <__exponent+0x4c>
 8009090:	2330      	movs	r3, #48	; 0x30
 8009092:	3130      	adds	r1, #48	; 0x30
 8009094:	7083      	strb	r3, [r0, #2]
 8009096:	70c1      	strb	r1, [r0, #3]
 8009098:	1d03      	adds	r3, r0, #4
 800909a:	e7f1      	b.n	8009080 <__exponent+0x60>

0800909c <_printf_float>:
 800909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a0:	ed2d 8b02 	vpush	{d8}
 80090a4:	b08d      	sub	sp, #52	; 0x34
 80090a6:	460c      	mov	r4, r1
 80090a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090ac:	4616      	mov	r6, r2
 80090ae:	461f      	mov	r7, r3
 80090b0:	4605      	mov	r5, r0
 80090b2:	f000 fef7 	bl	8009ea4 <_localeconv_r>
 80090b6:	f8d0 a000 	ldr.w	sl, [r0]
 80090ba:	4650      	mov	r0, sl
 80090bc:	f7f7 f8d8 	bl	8000270 <strlen>
 80090c0:	2300      	movs	r3, #0
 80090c2:	930a      	str	r3, [sp, #40]	; 0x28
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	9305      	str	r3, [sp, #20]
 80090c8:	f8d8 3000 	ldr.w	r3, [r8]
 80090cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090d0:	3307      	adds	r3, #7
 80090d2:	f023 0307 	bic.w	r3, r3, #7
 80090d6:	f103 0208 	add.w	r2, r3, #8
 80090da:	f8c8 2000 	str.w	r2, [r8]
 80090de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090e6:	9307      	str	r3, [sp, #28]
 80090e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80090ec:	ee08 0a10 	vmov	s16, r0
 80090f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80090f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090f8:	4b9e      	ldr	r3, [pc, #632]	; (8009374 <_printf_float+0x2d8>)
 80090fa:	f04f 32ff 	mov.w	r2, #4294967295
 80090fe:	f7f7 fd15 	bl	8000b2c <__aeabi_dcmpun>
 8009102:	bb88      	cbnz	r0, 8009168 <_printf_float+0xcc>
 8009104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009108:	4b9a      	ldr	r3, [pc, #616]	; (8009374 <_printf_float+0x2d8>)
 800910a:	f04f 32ff 	mov.w	r2, #4294967295
 800910e:	f7f7 fcef 	bl	8000af0 <__aeabi_dcmple>
 8009112:	bb48      	cbnz	r0, 8009168 <_printf_float+0xcc>
 8009114:	2200      	movs	r2, #0
 8009116:	2300      	movs	r3, #0
 8009118:	4640      	mov	r0, r8
 800911a:	4649      	mov	r1, r9
 800911c:	f7f7 fcde 	bl	8000adc <__aeabi_dcmplt>
 8009120:	b110      	cbz	r0, 8009128 <_printf_float+0x8c>
 8009122:	232d      	movs	r3, #45	; 0x2d
 8009124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009128:	4a93      	ldr	r2, [pc, #588]	; (8009378 <_printf_float+0x2dc>)
 800912a:	4b94      	ldr	r3, [pc, #592]	; (800937c <_printf_float+0x2e0>)
 800912c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009130:	bf94      	ite	ls
 8009132:	4690      	movls	r8, r2
 8009134:	4698      	movhi	r8, r3
 8009136:	2303      	movs	r3, #3
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	9b05      	ldr	r3, [sp, #20]
 800913c:	f023 0304 	bic.w	r3, r3, #4
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	f04f 0900 	mov.w	r9, #0
 8009146:	9700      	str	r7, [sp, #0]
 8009148:	4633      	mov	r3, r6
 800914a:	aa0b      	add	r2, sp, #44	; 0x2c
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 f9da 	bl	8009508 <_printf_common>
 8009154:	3001      	adds	r0, #1
 8009156:	f040 8090 	bne.w	800927a <_printf_float+0x1de>
 800915a:	f04f 30ff 	mov.w	r0, #4294967295
 800915e:	b00d      	add	sp, #52	; 0x34
 8009160:	ecbd 8b02 	vpop	{d8}
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	4640      	mov	r0, r8
 800916e:	4649      	mov	r1, r9
 8009170:	f7f7 fcdc 	bl	8000b2c <__aeabi_dcmpun>
 8009174:	b140      	cbz	r0, 8009188 <_printf_float+0xec>
 8009176:	464b      	mov	r3, r9
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfbc      	itt	lt
 800917c:	232d      	movlt	r3, #45	; 0x2d
 800917e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009182:	4a7f      	ldr	r2, [pc, #508]	; (8009380 <_printf_float+0x2e4>)
 8009184:	4b7f      	ldr	r3, [pc, #508]	; (8009384 <_printf_float+0x2e8>)
 8009186:	e7d1      	b.n	800912c <_printf_float+0x90>
 8009188:	6863      	ldr	r3, [r4, #4]
 800918a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800918e:	9206      	str	r2, [sp, #24]
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	d13f      	bne.n	8009214 <_printf_float+0x178>
 8009194:	2306      	movs	r3, #6
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	9b05      	ldr	r3, [sp, #20]
 800919a:	6861      	ldr	r1, [r4, #4]
 800919c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091a0:	2300      	movs	r3, #0
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	ab0a      	add	r3, sp, #40	; 0x28
 80091a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091aa:	ab09      	add	r3, sp, #36	; 0x24
 80091ac:	ec49 8b10 	vmov	d0, r8, r9
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091b8:	4628      	mov	r0, r5
 80091ba:	f7ff fecf 	bl	8008f5c <__cvt>
 80091be:	9b06      	ldr	r3, [sp, #24]
 80091c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c2:	2b47      	cmp	r3, #71	; 0x47
 80091c4:	4680      	mov	r8, r0
 80091c6:	d108      	bne.n	80091da <_printf_float+0x13e>
 80091c8:	1cc8      	adds	r0, r1, #3
 80091ca:	db02      	blt.n	80091d2 <_printf_float+0x136>
 80091cc:	6863      	ldr	r3, [r4, #4]
 80091ce:	4299      	cmp	r1, r3
 80091d0:	dd41      	ble.n	8009256 <_printf_float+0x1ba>
 80091d2:	f1ab 0302 	sub.w	r3, fp, #2
 80091d6:	fa5f fb83 	uxtb.w	fp, r3
 80091da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091de:	d820      	bhi.n	8009222 <_printf_float+0x186>
 80091e0:	3901      	subs	r1, #1
 80091e2:	465a      	mov	r2, fp
 80091e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091e8:	9109      	str	r1, [sp, #36]	; 0x24
 80091ea:	f7ff ff19 	bl	8009020 <__exponent>
 80091ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f0:	1813      	adds	r3, r2, r0
 80091f2:	2a01      	cmp	r2, #1
 80091f4:	4681      	mov	r9, r0
 80091f6:	6123      	str	r3, [r4, #16]
 80091f8:	dc02      	bgt.n	8009200 <_printf_float+0x164>
 80091fa:	6822      	ldr	r2, [r4, #0]
 80091fc:	07d2      	lsls	r2, r2, #31
 80091fe:	d501      	bpl.n	8009204 <_printf_float+0x168>
 8009200:	3301      	adds	r3, #1
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009208:	2b00      	cmp	r3, #0
 800920a:	d09c      	beq.n	8009146 <_printf_float+0xaa>
 800920c:	232d      	movs	r3, #45	; 0x2d
 800920e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009212:	e798      	b.n	8009146 <_printf_float+0xaa>
 8009214:	9a06      	ldr	r2, [sp, #24]
 8009216:	2a47      	cmp	r2, #71	; 0x47
 8009218:	d1be      	bne.n	8009198 <_printf_float+0xfc>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1bc      	bne.n	8009198 <_printf_float+0xfc>
 800921e:	2301      	movs	r3, #1
 8009220:	e7b9      	b.n	8009196 <_printf_float+0xfa>
 8009222:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009226:	d118      	bne.n	800925a <_printf_float+0x1be>
 8009228:	2900      	cmp	r1, #0
 800922a:	6863      	ldr	r3, [r4, #4]
 800922c:	dd0b      	ble.n	8009246 <_printf_float+0x1aa>
 800922e:	6121      	str	r1, [r4, #16]
 8009230:	b913      	cbnz	r3, 8009238 <_printf_float+0x19c>
 8009232:	6822      	ldr	r2, [r4, #0]
 8009234:	07d0      	lsls	r0, r2, #31
 8009236:	d502      	bpl.n	800923e <_printf_float+0x1a2>
 8009238:	3301      	adds	r3, #1
 800923a:	440b      	add	r3, r1
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009240:	f04f 0900 	mov.w	r9, #0
 8009244:	e7de      	b.n	8009204 <_printf_float+0x168>
 8009246:	b913      	cbnz	r3, 800924e <_printf_float+0x1b2>
 8009248:	6822      	ldr	r2, [r4, #0]
 800924a:	07d2      	lsls	r2, r2, #31
 800924c:	d501      	bpl.n	8009252 <_printf_float+0x1b6>
 800924e:	3302      	adds	r3, #2
 8009250:	e7f4      	b.n	800923c <_printf_float+0x1a0>
 8009252:	2301      	movs	r3, #1
 8009254:	e7f2      	b.n	800923c <_printf_float+0x1a0>
 8009256:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800925a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925c:	4299      	cmp	r1, r3
 800925e:	db05      	blt.n	800926c <_printf_float+0x1d0>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	6121      	str	r1, [r4, #16]
 8009264:	07d8      	lsls	r0, r3, #31
 8009266:	d5ea      	bpl.n	800923e <_printf_float+0x1a2>
 8009268:	1c4b      	adds	r3, r1, #1
 800926a:	e7e7      	b.n	800923c <_printf_float+0x1a0>
 800926c:	2900      	cmp	r1, #0
 800926e:	bfd4      	ite	le
 8009270:	f1c1 0202 	rsble	r2, r1, #2
 8009274:	2201      	movgt	r2, #1
 8009276:	4413      	add	r3, r2
 8009278:	e7e0      	b.n	800923c <_printf_float+0x1a0>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	055a      	lsls	r2, r3, #21
 800927e:	d407      	bmi.n	8009290 <_printf_float+0x1f4>
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	4642      	mov	r2, r8
 8009284:	4631      	mov	r1, r6
 8009286:	4628      	mov	r0, r5
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	d12c      	bne.n	80092e8 <_printf_float+0x24c>
 800928e:	e764      	b.n	800915a <_printf_float+0xbe>
 8009290:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009294:	f240 80e0 	bls.w	8009458 <_printf_float+0x3bc>
 8009298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800929c:	2200      	movs	r2, #0
 800929e:	2300      	movs	r3, #0
 80092a0:	f7f7 fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d034      	beq.n	8009312 <_printf_float+0x276>
 80092a8:	4a37      	ldr	r2, [pc, #220]	; (8009388 <_printf_float+0x2ec>)
 80092aa:	2301      	movs	r3, #1
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b8      	blx	r7
 80092b2:	3001      	adds	r0, #1
 80092b4:	f43f af51 	beq.w	800915a <_printf_float+0xbe>
 80092b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092bc:	429a      	cmp	r2, r3
 80092be:	db02      	blt.n	80092c6 <_printf_float+0x22a>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	07d8      	lsls	r0, r3, #31
 80092c4:	d510      	bpl.n	80092e8 <_printf_float+0x24c>
 80092c6:	ee18 3a10 	vmov	r3, s16
 80092ca:	4652      	mov	r2, sl
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f af41 	beq.w	800915a <_printf_float+0xbe>
 80092d8:	f04f 0800 	mov.w	r8, #0
 80092dc:	f104 091a 	add.w	r9, r4, #26
 80092e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e2:	3b01      	subs	r3, #1
 80092e4:	4543      	cmp	r3, r8
 80092e6:	dc09      	bgt.n	80092fc <_printf_float+0x260>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	079b      	lsls	r3, r3, #30
 80092ec:	f100 8107 	bmi.w	80094fe <_printf_float+0x462>
 80092f0:	68e0      	ldr	r0, [r4, #12]
 80092f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f4:	4298      	cmp	r0, r3
 80092f6:	bfb8      	it	lt
 80092f8:	4618      	movlt	r0, r3
 80092fa:	e730      	b.n	800915e <_printf_float+0xc2>
 80092fc:	2301      	movs	r3, #1
 80092fe:	464a      	mov	r2, r9
 8009300:	4631      	mov	r1, r6
 8009302:	4628      	mov	r0, r5
 8009304:	47b8      	blx	r7
 8009306:	3001      	adds	r0, #1
 8009308:	f43f af27 	beq.w	800915a <_printf_float+0xbe>
 800930c:	f108 0801 	add.w	r8, r8, #1
 8009310:	e7e6      	b.n	80092e0 <_printf_float+0x244>
 8009312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	dc39      	bgt.n	800938c <_printf_float+0x2f0>
 8009318:	4a1b      	ldr	r2, [pc, #108]	; (8009388 <_printf_float+0x2ec>)
 800931a:	2301      	movs	r3, #1
 800931c:	4631      	mov	r1, r6
 800931e:	4628      	mov	r0, r5
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f af19 	beq.w	800915a <_printf_float+0xbe>
 8009328:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800932c:	4313      	orrs	r3, r2
 800932e:	d102      	bne.n	8009336 <_printf_float+0x29a>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	07d9      	lsls	r1, r3, #31
 8009334:	d5d8      	bpl.n	80092e8 <_printf_float+0x24c>
 8009336:	ee18 3a10 	vmov	r3, s16
 800933a:	4652      	mov	r2, sl
 800933c:	4631      	mov	r1, r6
 800933e:	4628      	mov	r0, r5
 8009340:	47b8      	blx	r7
 8009342:	3001      	adds	r0, #1
 8009344:	f43f af09 	beq.w	800915a <_printf_float+0xbe>
 8009348:	f04f 0900 	mov.w	r9, #0
 800934c:	f104 0a1a 	add.w	sl, r4, #26
 8009350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009352:	425b      	negs	r3, r3
 8009354:	454b      	cmp	r3, r9
 8009356:	dc01      	bgt.n	800935c <_printf_float+0x2c0>
 8009358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935a:	e792      	b.n	8009282 <_printf_float+0x1e6>
 800935c:	2301      	movs	r3, #1
 800935e:	4652      	mov	r2, sl
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f aef7 	beq.w	800915a <_printf_float+0xbe>
 800936c:	f109 0901 	add.w	r9, r9, #1
 8009370:	e7ee      	b.n	8009350 <_printf_float+0x2b4>
 8009372:	bf00      	nop
 8009374:	7fefffff 	.word	0x7fefffff
 8009378:	0800dbe8 	.word	0x0800dbe8
 800937c:	0800dbec 	.word	0x0800dbec
 8009380:	0800dbf0 	.word	0x0800dbf0
 8009384:	0800dbf4 	.word	0x0800dbf4
 8009388:	0800dbf8 	.word	0x0800dbf8
 800938c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800938e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009390:	429a      	cmp	r2, r3
 8009392:	bfa8      	it	ge
 8009394:	461a      	movge	r2, r3
 8009396:	2a00      	cmp	r2, #0
 8009398:	4691      	mov	r9, r2
 800939a:	dc37      	bgt.n	800940c <_printf_float+0x370>
 800939c:	f04f 0b00 	mov.w	fp, #0
 80093a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a4:	f104 021a 	add.w	r2, r4, #26
 80093a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093aa:	9305      	str	r3, [sp, #20]
 80093ac:	eba3 0309 	sub.w	r3, r3, r9
 80093b0:	455b      	cmp	r3, fp
 80093b2:	dc33      	bgt.n	800941c <_printf_float+0x380>
 80093b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093b8:	429a      	cmp	r2, r3
 80093ba:	db3b      	blt.n	8009434 <_printf_float+0x398>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	07da      	lsls	r2, r3, #31
 80093c0:	d438      	bmi.n	8009434 <_printf_float+0x398>
 80093c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80093c6:	eba2 0903 	sub.w	r9, r2, r3
 80093ca:	9b05      	ldr	r3, [sp, #20]
 80093cc:	1ad2      	subs	r2, r2, r3
 80093ce:	4591      	cmp	r9, r2
 80093d0:	bfa8      	it	ge
 80093d2:	4691      	movge	r9, r2
 80093d4:	f1b9 0f00 	cmp.w	r9, #0
 80093d8:	dc35      	bgt.n	8009446 <_printf_float+0x3aa>
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e2:	f104 0a1a 	add.w	sl, r4, #26
 80093e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093ea:	1a9b      	subs	r3, r3, r2
 80093ec:	eba3 0309 	sub.w	r3, r3, r9
 80093f0:	4543      	cmp	r3, r8
 80093f2:	f77f af79 	ble.w	80092e8 <_printf_float+0x24c>
 80093f6:	2301      	movs	r3, #1
 80093f8:	4652      	mov	r2, sl
 80093fa:	4631      	mov	r1, r6
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b8      	blx	r7
 8009400:	3001      	adds	r0, #1
 8009402:	f43f aeaa 	beq.w	800915a <_printf_float+0xbe>
 8009406:	f108 0801 	add.w	r8, r8, #1
 800940a:	e7ec      	b.n	80093e6 <_printf_float+0x34a>
 800940c:	4613      	mov	r3, r2
 800940e:	4631      	mov	r1, r6
 8009410:	4642      	mov	r2, r8
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	d1c0      	bne.n	800939c <_printf_float+0x300>
 800941a:	e69e      	b.n	800915a <_printf_float+0xbe>
 800941c:	2301      	movs	r3, #1
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	9205      	str	r2, [sp, #20]
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	f43f ae97 	beq.w	800915a <_printf_float+0xbe>
 800942c:	9a05      	ldr	r2, [sp, #20]
 800942e:	f10b 0b01 	add.w	fp, fp, #1
 8009432:	e7b9      	b.n	80093a8 <_printf_float+0x30c>
 8009434:	ee18 3a10 	vmov	r3, s16
 8009438:	4652      	mov	r2, sl
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	d1be      	bne.n	80093c2 <_printf_float+0x326>
 8009444:	e689      	b.n	800915a <_printf_float+0xbe>
 8009446:	9a05      	ldr	r2, [sp, #20]
 8009448:	464b      	mov	r3, r9
 800944a:	4442      	add	r2, r8
 800944c:	4631      	mov	r1, r6
 800944e:	4628      	mov	r0, r5
 8009450:	47b8      	blx	r7
 8009452:	3001      	adds	r0, #1
 8009454:	d1c1      	bne.n	80093da <_printf_float+0x33e>
 8009456:	e680      	b.n	800915a <_printf_float+0xbe>
 8009458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945a:	2a01      	cmp	r2, #1
 800945c:	dc01      	bgt.n	8009462 <_printf_float+0x3c6>
 800945e:	07db      	lsls	r3, r3, #31
 8009460:	d53a      	bpl.n	80094d8 <_printf_float+0x43c>
 8009462:	2301      	movs	r3, #1
 8009464:	4642      	mov	r2, r8
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	f43f ae74 	beq.w	800915a <_printf_float+0xbe>
 8009472:	ee18 3a10 	vmov	r3, s16
 8009476:	4652      	mov	r2, sl
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	f43f ae6b 	beq.w	800915a <_printf_float+0xbe>
 8009484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009488:	2200      	movs	r2, #0
 800948a:	2300      	movs	r3, #0
 800948c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009490:	f7f7 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009494:	b9d8      	cbnz	r0, 80094ce <_printf_float+0x432>
 8009496:	f10a 33ff 	add.w	r3, sl, #4294967295
 800949a:	f108 0201 	add.w	r2, r8, #1
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b8      	blx	r7
 80094a4:	3001      	adds	r0, #1
 80094a6:	d10e      	bne.n	80094c6 <_printf_float+0x42a>
 80094a8:	e657      	b.n	800915a <_printf_float+0xbe>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4652      	mov	r2, sl
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f ae50 	beq.w	800915a <_printf_float+0xbe>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c0:	3b01      	subs	r3, #1
 80094c2:	4543      	cmp	r3, r8
 80094c4:	dcf1      	bgt.n	80094aa <_printf_float+0x40e>
 80094c6:	464b      	mov	r3, r9
 80094c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094cc:	e6da      	b.n	8009284 <_printf_float+0x1e8>
 80094ce:	f04f 0800 	mov.w	r8, #0
 80094d2:	f104 0a1a 	add.w	sl, r4, #26
 80094d6:	e7f2      	b.n	80094be <_printf_float+0x422>
 80094d8:	2301      	movs	r3, #1
 80094da:	4642      	mov	r2, r8
 80094dc:	e7df      	b.n	800949e <_printf_float+0x402>
 80094de:	2301      	movs	r3, #1
 80094e0:	464a      	mov	r2, r9
 80094e2:	4631      	mov	r1, r6
 80094e4:	4628      	mov	r0, r5
 80094e6:	47b8      	blx	r7
 80094e8:	3001      	adds	r0, #1
 80094ea:	f43f ae36 	beq.w	800915a <_printf_float+0xbe>
 80094ee:	f108 0801 	add.w	r8, r8, #1
 80094f2:	68e3      	ldr	r3, [r4, #12]
 80094f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094f6:	1a5b      	subs	r3, r3, r1
 80094f8:	4543      	cmp	r3, r8
 80094fa:	dcf0      	bgt.n	80094de <_printf_float+0x442>
 80094fc:	e6f8      	b.n	80092f0 <_printf_float+0x254>
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	f104 0919 	add.w	r9, r4, #25
 8009506:	e7f4      	b.n	80094f2 <_printf_float+0x456>

08009508 <_printf_common>:
 8009508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800950c:	4616      	mov	r6, r2
 800950e:	4699      	mov	r9, r3
 8009510:	688a      	ldr	r2, [r1, #8]
 8009512:	690b      	ldr	r3, [r1, #16]
 8009514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009518:	4293      	cmp	r3, r2
 800951a:	bfb8      	it	lt
 800951c:	4613      	movlt	r3, r2
 800951e:	6033      	str	r3, [r6, #0]
 8009520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009524:	4607      	mov	r7, r0
 8009526:	460c      	mov	r4, r1
 8009528:	b10a      	cbz	r2, 800952e <_printf_common+0x26>
 800952a:	3301      	adds	r3, #1
 800952c:	6033      	str	r3, [r6, #0]
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	0699      	lsls	r1, r3, #26
 8009532:	bf42      	ittt	mi
 8009534:	6833      	ldrmi	r3, [r6, #0]
 8009536:	3302      	addmi	r3, #2
 8009538:	6033      	strmi	r3, [r6, #0]
 800953a:	6825      	ldr	r5, [r4, #0]
 800953c:	f015 0506 	ands.w	r5, r5, #6
 8009540:	d106      	bne.n	8009550 <_printf_common+0x48>
 8009542:	f104 0a19 	add.w	sl, r4, #25
 8009546:	68e3      	ldr	r3, [r4, #12]
 8009548:	6832      	ldr	r2, [r6, #0]
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	42ab      	cmp	r3, r5
 800954e:	dc26      	bgt.n	800959e <_printf_common+0x96>
 8009550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009554:	1e13      	subs	r3, r2, #0
 8009556:	6822      	ldr	r2, [r4, #0]
 8009558:	bf18      	it	ne
 800955a:	2301      	movne	r3, #1
 800955c:	0692      	lsls	r2, r2, #26
 800955e:	d42b      	bmi.n	80095b8 <_printf_common+0xb0>
 8009560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009564:	4649      	mov	r1, r9
 8009566:	4638      	mov	r0, r7
 8009568:	47c0      	blx	r8
 800956a:	3001      	adds	r0, #1
 800956c:	d01e      	beq.n	80095ac <_printf_common+0xa4>
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	6922      	ldr	r2, [r4, #16]
 8009572:	f003 0306 	and.w	r3, r3, #6
 8009576:	2b04      	cmp	r3, #4
 8009578:	bf02      	ittt	eq
 800957a:	68e5      	ldreq	r5, [r4, #12]
 800957c:	6833      	ldreq	r3, [r6, #0]
 800957e:	1aed      	subeq	r5, r5, r3
 8009580:	68a3      	ldr	r3, [r4, #8]
 8009582:	bf0c      	ite	eq
 8009584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009588:	2500      	movne	r5, #0
 800958a:	4293      	cmp	r3, r2
 800958c:	bfc4      	itt	gt
 800958e:	1a9b      	subgt	r3, r3, r2
 8009590:	18ed      	addgt	r5, r5, r3
 8009592:	2600      	movs	r6, #0
 8009594:	341a      	adds	r4, #26
 8009596:	42b5      	cmp	r5, r6
 8009598:	d11a      	bne.n	80095d0 <_printf_common+0xc8>
 800959a:	2000      	movs	r0, #0
 800959c:	e008      	b.n	80095b0 <_printf_common+0xa8>
 800959e:	2301      	movs	r3, #1
 80095a0:	4652      	mov	r2, sl
 80095a2:	4649      	mov	r1, r9
 80095a4:	4638      	mov	r0, r7
 80095a6:	47c0      	blx	r8
 80095a8:	3001      	adds	r0, #1
 80095aa:	d103      	bne.n	80095b4 <_printf_common+0xac>
 80095ac:	f04f 30ff 	mov.w	r0, #4294967295
 80095b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b4:	3501      	adds	r5, #1
 80095b6:	e7c6      	b.n	8009546 <_printf_common+0x3e>
 80095b8:	18e1      	adds	r1, r4, r3
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	2030      	movs	r0, #48	; 0x30
 80095be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095c2:	4422      	add	r2, r4
 80095c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095cc:	3302      	adds	r3, #2
 80095ce:	e7c7      	b.n	8009560 <_printf_common+0x58>
 80095d0:	2301      	movs	r3, #1
 80095d2:	4622      	mov	r2, r4
 80095d4:	4649      	mov	r1, r9
 80095d6:	4638      	mov	r0, r7
 80095d8:	47c0      	blx	r8
 80095da:	3001      	adds	r0, #1
 80095dc:	d0e6      	beq.n	80095ac <_printf_common+0xa4>
 80095de:	3601      	adds	r6, #1
 80095e0:	e7d9      	b.n	8009596 <_printf_common+0x8e>
	...

080095e4 <_printf_i>:
 80095e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	7e0f      	ldrb	r7, [r1, #24]
 80095ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095ec:	2f78      	cmp	r7, #120	; 0x78
 80095ee:	4691      	mov	r9, r2
 80095f0:	4680      	mov	r8, r0
 80095f2:	460c      	mov	r4, r1
 80095f4:	469a      	mov	sl, r3
 80095f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095fa:	d807      	bhi.n	800960c <_printf_i+0x28>
 80095fc:	2f62      	cmp	r7, #98	; 0x62
 80095fe:	d80a      	bhi.n	8009616 <_printf_i+0x32>
 8009600:	2f00      	cmp	r7, #0
 8009602:	f000 80d4 	beq.w	80097ae <_printf_i+0x1ca>
 8009606:	2f58      	cmp	r7, #88	; 0x58
 8009608:	f000 80c0 	beq.w	800978c <_printf_i+0x1a8>
 800960c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009614:	e03a      	b.n	800968c <_printf_i+0xa8>
 8009616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800961a:	2b15      	cmp	r3, #21
 800961c:	d8f6      	bhi.n	800960c <_printf_i+0x28>
 800961e:	a101      	add	r1, pc, #4	; (adr r1, 8009624 <_printf_i+0x40>)
 8009620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009624:	0800967d 	.word	0x0800967d
 8009628:	08009691 	.word	0x08009691
 800962c:	0800960d 	.word	0x0800960d
 8009630:	0800960d 	.word	0x0800960d
 8009634:	0800960d 	.word	0x0800960d
 8009638:	0800960d 	.word	0x0800960d
 800963c:	08009691 	.word	0x08009691
 8009640:	0800960d 	.word	0x0800960d
 8009644:	0800960d 	.word	0x0800960d
 8009648:	0800960d 	.word	0x0800960d
 800964c:	0800960d 	.word	0x0800960d
 8009650:	08009795 	.word	0x08009795
 8009654:	080096bd 	.word	0x080096bd
 8009658:	0800974f 	.word	0x0800974f
 800965c:	0800960d 	.word	0x0800960d
 8009660:	0800960d 	.word	0x0800960d
 8009664:	080097b7 	.word	0x080097b7
 8009668:	0800960d 	.word	0x0800960d
 800966c:	080096bd 	.word	0x080096bd
 8009670:	0800960d 	.word	0x0800960d
 8009674:	0800960d 	.word	0x0800960d
 8009678:	08009757 	.word	0x08009757
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	1d1a      	adds	r2, r3, #4
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	602a      	str	r2, [r5, #0]
 8009684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800968c:	2301      	movs	r3, #1
 800968e:	e09f      	b.n	80097d0 <_printf_i+0x1ec>
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	682b      	ldr	r3, [r5, #0]
 8009694:	0607      	lsls	r7, r0, #24
 8009696:	f103 0104 	add.w	r1, r3, #4
 800969a:	6029      	str	r1, [r5, #0]
 800969c:	d501      	bpl.n	80096a2 <_printf_i+0xbe>
 800969e:	681e      	ldr	r6, [r3, #0]
 80096a0:	e003      	b.n	80096aa <_printf_i+0xc6>
 80096a2:	0646      	lsls	r6, r0, #25
 80096a4:	d5fb      	bpl.n	800969e <_printf_i+0xba>
 80096a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096aa:	2e00      	cmp	r6, #0
 80096ac:	da03      	bge.n	80096b6 <_printf_i+0xd2>
 80096ae:	232d      	movs	r3, #45	; 0x2d
 80096b0:	4276      	negs	r6, r6
 80096b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096b6:	485a      	ldr	r0, [pc, #360]	; (8009820 <_printf_i+0x23c>)
 80096b8:	230a      	movs	r3, #10
 80096ba:	e012      	b.n	80096e2 <_printf_i+0xfe>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	6820      	ldr	r0, [r4, #0]
 80096c0:	1d19      	adds	r1, r3, #4
 80096c2:	6029      	str	r1, [r5, #0]
 80096c4:	0605      	lsls	r5, r0, #24
 80096c6:	d501      	bpl.n	80096cc <_printf_i+0xe8>
 80096c8:	681e      	ldr	r6, [r3, #0]
 80096ca:	e002      	b.n	80096d2 <_printf_i+0xee>
 80096cc:	0641      	lsls	r1, r0, #25
 80096ce:	d5fb      	bpl.n	80096c8 <_printf_i+0xe4>
 80096d0:	881e      	ldrh	r6, [r3, #0]
 80096d2:	4853      	ldr	r0, [pc, #332]	; (8009820 <_printf_i+0x23c>)
 80096d4:	2f6f      	cmp	r7, #111	; 0x6f
 80096d6:	bf0c      	ite	eq
 80096d8:	2308      	moveq	r3, #8
 80096da:	230a      	movne	r3, #10
 80096dc:	2100      	movs	r1, #0
 80096de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096e2:	6865      	ldr	r5, [r4, #4]
 80096e4:	60a5      	str	r5, [r4, #8]
 80096e6:	2d00      	cmp	r5, #0
 80096e8:	bfa2      	ittt	ge
 80096ea:	6821      	ldrge	r1, [r4, #0]
 80096ec:	f021 0104 	bicge.w	r1, r1, #4
 80096f0:	6021      	strge	r1, [r4, #0]
 80096f2:	b90e      	cbnz	r6, 80096f8 <_printf_i+0x114>
 80096f4:	2d00      	cmp	r5, #0
 80096f6:	d04b      	beq.n	8009790 <_printf_i+0x1ac>
 80096f8:	4615      	mov	r5, r2
 80096fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80096fe:	fb03 6711 	mls	r7, r3, r1, r6
 8009702:	5dc7      	ldrb	r7, [r0, r7]
 8009704:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009708:	4637      	mov	r7, r6
 800970a:	42bb      	cmp	r3, r7
 800970c:	460e      	mov	r6, r1
 800970e:	d9f4      	bls.n	80096fa <_printf_i+0x116>
 8009710:	2b08      	cmp	r3, #8
 8009712:	d10b      	bne.n	800972c <_printf_i+0x148>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	07de      	lsls	r6, r3, #31
 8009718:	d508      	bpl.n	800972c <_printf_i+0x148>
 800971a:	6923      	ldr	r3, [r4, #16]
 800971c:	6861      	ldr	r1, [r4, #4]
 800971e:	4299      	cmp	r1, r3
 8009720:	bfde      	ittt	le
 8009722:	2330      	movle	r3, #48	; 0x30
 8009724:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009728:	f105 35ff 	addle.w	r5, r5, #4294967295
 800972c:	1b52      	subs	r2, r2, r5
 800972e:	6122      	str	r2, [r4, #16]
 8009730:	f8cd a000 	str.w	sl, [sp]
 8009734:	464b      	mov	r3, r9
 8009736:	aa03      	add	r2, sp, #12
 8009738:	4621      	mov	r1, r4
 800973a:	4640      	mov	r0, r8
 800973c:	f7ff fee4 	bl	8009508 <_printf_common>
 8009740:	3001      	adds	r0, #1
 8009742:	d14a      	bne.n	80097da <_printf_i+0x1f6>
 8009744:	f04f 30ff 	mov.w	r0, #4294967295
 8009748:	b004      	add	sp, #16
 800974a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	f043 0320 	orr.w	r3, r3, #32
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	4833      	ldr	r0, [pc, #204]	; (8009824 <_printf_i+0x240>)
 8009758:	2778      	movs	r7, #120	; 0x78
 800975a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	6829      	ldr	r1, [r5, #0]
 8009762:	061f      	lsls	r7, r3, #24
 8009764:	f851 6b04 	ldr.w	r6, [r1], #4
 8009768:	d402      	bmi.n	8009770 <_printf_i+0x18c>
 800976a:	065f      	lsls	r7, r3, #25
 800976c:	bf48      	it	mi
 800976e:	b2b6      	uxthmi	r6, r6
 8009770:	07df      	lsls	r7, r3, #31
 8009772:	bf48      	it	mi
 8009774:	f043 0320 	orrmi.w	r3, r3, #32
 8009778:	6029      	str	r1, [r5, #0]
 800977a:	bf48      	it	mi
 800977c:	6023      	strmi	r3, [r4, #0]
 800977e:	b91e      	cbnz	r6, 8009788 <_printf_i+0x1a4>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	f023 0320 	bic.w	r3, r3, #32
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	2310      	movs	r3, #16
 800978a:	e7a7      	b.n	80096dc <_printf_i+0xf8>
 800978c:	4824      	ldr	r0, [pc, #144]	; (8009820 <_printf_i+0x23c>)
 800978e:	e7e4      	b.n	800975a <_printf_i+0x176>
 8009790:	4615      	mov	r5, r2
 8009792:	e7bd      	b.n	8009710 <_printf_i+0x12c>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	6826      	ldr	r6, [r4, #0]
 8009798:	6961      	ldr	r1, [r4, #20]
 800979a:	1d18      	adds	r0, r3, #4
 800979c:	6028      	str	r0, [r5, #0]
 800979e:	0635      	lsls	r5, r6, #24
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	d501      	bpl.n	80097a8 <_printf_i+0x1c4>
 80097a4:	6019      	str	r1, [r3, #0]
 80097a6:	e002      	b.n	80097ae <_printf_i+0x1ca>
 80097a8:	0670      	lsls	r0, r6, #25
 80097aa:	d5fb      	bpl.n	80097a4 <_printf_i+0x1c0>
 80097ac:	8019      	strh	r1, [r3, #0]
 80097ae:	2300      	movs	r3, #0
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	4615      	mov	r5, r2
 80097b4:	e7bc      	b.n	8009730 <_printf_i+0x14c>
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	1d1a      	adds	r2, r3, #4
 80097ba:	602a      	str	r2, [r5, #0]
 80097bc:	681d      	ldr	r5, [r3, #0]
 80097be:	6862      	ldr	r2, [r4, #4]
 80097c0:	2100      	movs	r1, #0
 80097c2:	4628      	mov	r0, r5
 80097c4:	f7f6 fd04 	bl	80001d0 <memchr>
 80097c8:	b108      	cbz	r0, 80097ce <_printf_i+0x1ea>
 80097ca:	1b40      	subs	r0, r0, r5
 80097cc:	6060      	str	r0, [r4, #4]
 80097ce:	6863      	ldr	r3, [r4, #4]
 80097d0:	6123      	str	r3, [r4, #16]
 80097d2:	2300      	movs	r3, #0
 80097d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d8:	e7aa      	b.n	8009730 <_printf_i+0x14c>
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	462a      	mov	r2, r5
 80097de:	4649      	mov	r1, r9
 80097e0:	4640      	mov	r0, r8
 80097e2:	47d0      	blx	sl
 80097e4:	3001      	adds	r0, #1
 80097e6:	d0ad      	beq.n	8009744 <_printf_i+0x160>
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	079b      	lsls	r3, r3, #30
 80097ec:	d413      	bmi.n	8009816 <_printf_i+0x232>
 80097ee:	68e0      	ldr	r0, [r4, #12]
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	4298      	cmp	r0, r3
 80097f4:	bfb8      	it	lt
 80097f6:	4618      	movlt	r0, r3
 80097f8:	e7a6      	b.n	8009748 <_printf_i+0x164>
 80097fa:	2301      	movs	r3, #1
 80097fc:	4632      	mov	r2, r6
 80097fe:	4649      	mov	r1, r9
 8009800:	4640      	mov	r0, r8
 8009802:	47d0      	blx	sl
 8009804:	3001      	adds	r0, #1
 8009806:	d09d      	beq.n	8009744 <_printf_i+0x160>
 8009808:	3501      	adds	r5, #1
 800980a:	68e3      	ldr	r3, [r4, #12]
 800980c:	9903      	ldr	r1, [sp, #12]
 800980e:	1a5b      	subs	r3, r3, r1
 8009810:	42ab      	cmp	r3, r5
 8009812:	dcf2      	bgt.n	80097fa <_printf_i+0x216>
 8009814:	e7eb      	b.n	80097ee <_printf_i+0x20a>
 8009816:	2500      	movs	r5, #0
 8009818:	f104 0619 	add.w	r6, r4, #25
 800981c:	e7f5      	b.n	800980a <_printf_i+0x226>
 800981e:	bf00      	nop
 8009820:	0800dbfa 	.word	0x0800dbfa
 8009824:	0800dc0b 	.word	0x0800dc0b

08009828 <_scanf_float>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	b087      	sub	sp, #28
 800982e:	4617      	mov	r7, r2
 8009830:	9303      	str	r3, [sp, #12]
 8009832:	688b      	ldr	r3, [r1, #8]
 8009834:	1e5a      	subs	r2, r3, #1
 8009836:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800983a:	bf83      	ittte	hi
 800983c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009840:	195b      	addhi	r3, r3, r5
 8009842:	9302      	strhi	r3, [sp, #8]
 8009844:	2300      	movls	r3, #0
 8009846:	bf86      	itte	hi
 8009848:	f240 135d 	movwhi	r3, #349	; 0x15d
 800984c:	608b      	strhi	r3, [r1, #8]
 800984e:	9302      	strls	r3, [sp, #8]
 8009850:	680b      	ldr	r3, [r1, #0]
 8009852:	468b      	mov	fp, r1
 8009854:	2500      	movs	r5, #0
 8009856:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800985a:	f84b 3b1c 	str.w	r3, [fp], #28
 800985e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009862:	4680      	mov	r8, r0
 8009864:	460c      	mov	r4, r1
 8009866:	465e      	mov	r6, fp
 8009868:	46aa      	mov	sl, r5
 800986a:	46a9      	mov	r9, r5
 800986c:	9501      	str	r5, [sp, #4]
 800986e:	68a2      	ldr	r2, [r4, #8]
 8009870:	b152      	cbz	r2, 8009888 <_scanf_float+0x60>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b4e      	cmp	r3, #78	; 0x4e
 8009878:	d864      	bhi.n	8009944 <_scanf_float+0x11c>
 800987a:	2b40      	cmp	r3, #64	; 0x40
 800987c:	d83c      	bhi.n	80098f8 <_scanf_float+0xd0>
 800987e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009882:	b2c8      	uxtb	r0, r1
 8009884:	280e      	cmp	r0, #14
 8009886:	d93a      	bls.n	80098fe <_scanf_float+0xd6>
 8009888:	f1b9 0f00 	cmp.w	r9, #0
 800988c:	d003      	beq.n	8009896 <_scanf_float+0x6e>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800989a:	f1ba 0f01 	cmp.w	sl, #1
 800989e:	f200 8113 	bhi.w	8009ac8 <_scanf_float+0x2a0>
 80098a2:	455e      	cmp	r6, fp
 80098a4:	f200 8105 	bhi.w	8009ab2 <_scanf_float+0x28a>
 80098a8:	2501      	movs	r5, #1
 80098aa:	4628      	mov	r0, r5
 80098ac:	b007      	add	sp, #28
 80098ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80098b6:	2a0d      	cmp	r2, #13
 80098b8:	d8e6      	bhi.n	8009888 <_scanf_float+0x60>
 80098ba:	a101      	add	r1, pc, #4	; (adr r1, 80098c0 <_scanf_float+0x98>)
 80098bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098c0:	080099ff 	.word	0x080099ff
 80098c4:	08009889 	.word	0x08009889
 80098c8:	08009889 	.word	0x08009889
 80098cc:	08009889 	.word	0x08009889
 80098d0:	08009a5f 	.word	0x08009a5f
 80098d4:	08009a37 	.word	0x08009a37
 80098d8:	08009889 	.word	0x08009889
 80098dc:	08009889 	.word	0x08009889
 80098e0:	08009a0d 	.word	0x08009a0d
 80098e4:	08009889 	.word	0x08009889
 80098e8:	08009889 	.word	0x08009889
 80098ec:	08009889 	.word	0x08009889
 80098f0:	08009889 	.word	0x08009889
 80098f4:	080099c5 	.word	0x080099c5
 80098f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80098fc:	e7db      	b.n	80098b6 <_scanf_float+0x8e>
 80098fe:	290e      	cmp	r1, #14
 8009900:	d8c2      	bhi.n	8009888 <_scanf_float+0x60>
 8009902:	a001      	add	r0, pc, #4	; (adr r0, 8009908 <_scanf_float+0xe0>)
 8009904:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009908:	080099b7 	.word	0x080099b7
 800990c:	08009889 	.word	0x08009889
 8009910:	080099b7 	.word	0x080099b7
 8009914:	08009a4b 	.word	0x08009a4b
 8009918:	08009889 	.word	0x08009889
 800991c:	08009965 	.word	0x08009965
 8009920:	080099a1 	.word	0x080099a1
 8009924:	080099a1 	.word	0x080099a1
 8009928:	080099a1 	.word	0x080099a1
 800992c:	080099a1 	.word	0x080099a1
 8009930:	080099a1 	.word	0x080099a1
 8009934:	080099a1 	.word	0x080099a1
 8009938:	080099a1 	.word	0x080099a1
 800993c:	080099a1 	.word	0x080099a1
 8009940:	080099a1 	.word	0x080099a1
 8009944:	2b6e      	cmp	r3, #110	; 0x6e
 8009946:	d809      	bhi.n	800995c <_scanf_float+0x134>
 8009948:	2b60      	cmp	r3, #96	; 0x60
 800994a:	d8b2      	bhi.n	80098b2 <_scanf_float+0x8a>
 800994c:	2b54      	cmp	r3, #84	; 0x54
 800994e:	d077      	beq.n	8009a40 <_scanf_float+0x218>
 8009950:	2b59      	cmp	r3, #89	; 0x59
 8009952:	d199      	bne.n	8009888 <_scanf_float+0x60>
 8009954:	2d07      	cmp	r5, #7
 8009956:	d197      	bne.n	8009888 <_scanf_float+0x60>
 8009958:	2508      	movs	r5, #8
 800995a:	e029      	b.n	80099b0 <_scanf_float+0x188>
 800995c:	2b74      	cmp	r3, #116	; 0x74
 800995e:	d06f      	beq.n	8009a40 <_scanf_float+0x218>
 8009960:	2b79      	cmp	r3, #121	; 0x79
 8009962:	e7f6      	b.n	8009952 <_scanf_float+0x12a>
 8009964:	6821      	ldr	r1, [r4, #0]
 8009966:	05c8      	lsls	r0, r1, #23
 8009968:	d51a      	bpl.n	80099a0 <_scanf_float+0x178>
 800996a:	9b02      	ldr	r3, [sp, #8]
 800996c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009970:	6021      	str	r1, [r4, #0]
 8009972:	f109 0901 	add.w	r9, r9, #1
 8009976:	b11b      	cbz	r3, 8009980 <_scanf_float+0x158>
 8009978:	3b01      	subs	r3, #1
 800997a:	3201      	adds	r2, #1
 800997c:	9302      	str	r3, [sp, #8]
 800997e:	60a2      	str	r2, [r4, #8]
 8009980:	68a3      	ldr	r3, [r4, #8]
 8009982:	3b01      	subs	r3, #1
 8009984:	60a3      	str	r3, [r4, #8]
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	3301      	adds	r3, #1
 800998a:	6123      	str	r3, [r4, #16]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3b01      	subs	r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	f340 8084 	ble.w	8009aa0 <_scanf_float+0x278>
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	3301      	adds	r3, #1
 800999c:	603b      	str	r3, [r7, #0]
 800999e:	e766      	b.n	800986e <_scanf_float+0x46>
 80099a0:	eb1a 0f05 	cmn.w	sl, r5
 80099a4:	f47f af70 	bne.w	8009888 <_scanf_float+0x60>
 80099a8:	6822      	ldr	r2, [r4, #0]
 80099aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80099ae:	6022      	str	r2, [r4, #0]
 80099b0:	f806 3b01 	strb.w	r3, [r6], #1
 80099b4:	e7e4      	b.n	8009980 <_scanf_float+0x158>
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	0610      	lsls	r0, r2, #24
 80099ba:	f57f af65 	bpl.w	8009888 <_scanf_float+0x60>
 80099be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099c2:	e7f4      	b.n	80099ae <_scanf_float+0x186>
 80099c4:	f1ba 0f00 	cmp.w	sl, #0
 80099c8:	d10e      	bne.n	80099e8 <_scanf_float+0x1c0>
 80099ca:	f1b9 0f00 	cmp.w	r9, #0
 80099ce:	d10e      	bne.n	80099ee <_scanf_float+0x1c6>
 80099d0:	6822      	ldr	r2, [r4, #0]
 80099d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80099d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80099da:	d108      	bne.n	80099ee <_scanf_float+0x1c6>
 80099dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80099e0:	6022      	str	r2, [r4, #0]
 80099e2:	f04f 0a01 	mov.w	sl, #1
 80099e6:	e7e3      	b.n	80099b0 <_scanf_float+0x188>
 80099e8:	f1ba 0f02 	cmp.w	sl, #2
 80099ec:	d055      	beq.n	8009a9a <_scanf_float+0x272>
 80099ee:	2d01      	cmp	r5, #1
 80099f0:	d002      	beq.n	80099f8 <_scanf_float+0x1d0>
 80099f2:	2d04      	cmp	r5, #4
 80099f4:	f47f af48 	bne.w	8009888 <_scanf_float+0x60>
 80099f8:	3501      	adds	r5, #1
 80099fa:	b2ed      	uxtb	r5, r5
 80099fc:	e7d8      	b.n	80099b0 <_scanf_float+0x188>
 80099fe:	f1ba 0f01 	cmp.w	sl, #1
 8009a02:	f47f af41 	bne.w	8009888 <_scanf_float+0x60>
 8009a06:	f04f 0a02 	mov.w	sl, #2
 8009a0a:	e7d1      	b.n	80099b0 <_scanf_float+0x188>
 8009a0c:	b97d      	cbnz	r5, 8009a2e <_scanf_float+0x206>
 8009a0e:	f1b9 0f00 	cmp.w	r9, #0
 8009a12:	f47f af3c 	bne.w	800988e <_scanf_float+0x66>
 8009a16:	6822      	ldr	r2, [r4, #0]
 8009a18:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a1c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a20:	f47f af39 	bne.w	8009896 <_scanf_float+0x6e>
 8009a24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a28:	6022      	str	r2, [r4, #0]
 8009a2a:	2501      	movs	r5, #1
 8009a2c:	e7c0      	b.n	80099b0 <_scanf_float+0x188>
 8009a2e:	2d03      	cmp	r5, #3
 8009a30:	d0e2      	beq.n	80099f8 <_scanf_float+0x1d0>
 8009a32:	2d05      	cmp	r5, #5
 8009a34:	e7de      	b.n	80099f4 <_scanf_float+0x1cc>
 8009a36:	2d02      	cmp	r5, #2
 8009a38:	f47f af26 	bne.w	8009888 <_scanf_float+0x60>
 8009a3c:	2503      	movs	r5, #3
 8009a3e:	e7b7      	b.n	80099b0 <_scanf_float+0x188>
 8009a40:	2d06      	cmp	r5, #6
 8009a42:	f47f af21 	bne.w	8009888 <_scanf_float+0x60>
 8009a46:	2507      	movs	r5, #7
 8009a48:	e7b2      	b.n	80099b0 <_scanf_float+0x188>
 8009a4a:	6822      	ldr	r2, [r4, #0]
 8009a4c:	0591      	lsls	r1, r2, #22
 8009a4e:	f57f af1b 	bpl.w	8009888 <_scanf_float+0x60>
 8009a52:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009a56:	6022      	str	r2, [r4, #0]
 8009a58:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a5c:	e7a8      	b.n	80099b0 <_scanf_float+0x188>
 8009a5e:	6822      	ldr	r2, [r4, #0]
 8009a60:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009a64:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009a68:	d006      	beq.n	8009a78 <_scanf_float+0x250>
 8009a6a:	0550      	lsls	r0, r2, #21
 8009a6c:	f57f af0c 	bpl.w	8009888 <_scanf_float+0x60>
 8009a70:	f1b9 0f00 	cmp.w	r9, #0
 8009a74:	f43f af0f 	beq.w	8009896 <_scanf_float+0x6e>
 8009a78:	0591      	lsls	r1, r2, #22
 8009a7a:	bf58      	it	pl
 8009a7c:	9901      	ldrpl	r1, [sp, #4]
 8009a7e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a82:	bf58      	it	pl
 8009a84:	eba9 0101 	subpl.w	r1, r9, r1
 8009a88:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009a8c:	bf58      	it	pl
 8009a8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009a92:	6022      	str	r2, [r4, #0]
 8009a94:	f04f 0900 	mov.w	r9, #0
 8009a98:	e78a      	b.n	80099b0 <_scanf_float+0x188>
 8009a9a:	f04f 0a03 	mov.w	sl, #3
 8009a9e:	e787      	b.n	80099b0 <_scanf_float+0x188>
 8009aa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	4798      	blx	r3
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	f43f aedf 	beq.w	800986e <_scanf_float+0x46>
 8009ab0:	e6ea      	b.n	8009888 <_scanf_float+0x60>
 8009ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009aba:	463a      	mov	r2, r7
 8009abc:	4640      	mov	r0, r8
 8009abe:	4798      	blx	r3
 8009ac0:	6923      	ldr	r3, [r4, #16]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	e6ec      	b.n	80098a2 <_scanf_float+0x7a>
 8009ac8:	1e6b      	subs	r3, r5, #1
 8009aca:	2b06      	cmp	r3, #6
 8009acc:	d825      	bhi.n	8009b1a <_scanf_float+0x2f2>
 8009ace:	2d02      	cmp	r5, #2
 8009ad0:	d836      	bhi.n	8009b40 <_scanf_float+0x318>
 8009ad2:	455e      	cmp	r6, fp
 8009ad4:	f67f aee8 	bls.w	80098a8 <_scanf_float+0x80>
 8009ad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009adc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ae0:	463a      	mov	r2, r7
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4798      	blx	r3
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	e7f1      	b.n	8009ad2 <_scanf_float+0x2aa>
 8009aee:	9802      	ldr	r0, [sp, #8]
 8009af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009af4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009af8:	9002      	str	r0, [sp, #8]
 8009afa:	463a      	mov	r2, r7
 8009afc:	4640      	mov	r0, r8
 8009afe:	4798      	blx	r3
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	6123      	str	r3, [r4, #16]
 8009b06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b0a:	fa5f fa8a 	uxtb.w	sl, sl
 8009b0e:	f1ba 0f02 	cmp.w	sl, #2
 8009b12:	d1ec      	bne.n	8009aee <_scanf_float+0x2c6>
 8009b14:	3d03      	subs	r5, #3
 8009b16:	b2ed      	uxtb	r5, r5
 8009b18:	1b76      	subs	r6, r6, r5
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	05da      	lsls	r2, r3, #23
 8009b1e:	d52f      	bpl.n	8009b80 <_scanf_float+0x358>
 8009b20:	055b      	lsls	r3, r3, #21
 8009b22:	d510      	bpl.n	8009b46 <_scanf_float+0x31e>
 8009b24:	455e      	cmp	r6, fp
 8009b26:	f67f aebf 	bls.w	80098a8 <_scanf_float+0x80>
 8009b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b32:	463a      	mov	r2, r7
 8009b34:	4640      	mov	r0, r8
 8009b36:	4798      	blx	r3
 8009b38:	6923      	ldr	r3, [r4, #16]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	6123      	str	r3, [r4, #16]
 8009b3e:	e7f1      	b.n	8009b24 <_scanf_float+0x2fc>
 8009b40:	46aa      	mov	sl, r5
 8009b42:	9602      	str	r6, [sp, #8]
 8009b44:	e7df      	b.n	8009b06 <_scanf_float+0x2de>
 8009b46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b4a:	6923      	ldr	r3, [r4, #16]
 8009b4c:	2965      	cmp	r1, #101	; 0x65
 8009b4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b52:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b56:	6123      	str	r3, [r4, #16]
 8009b58:	d00c      	beq.n	8009b74 <_scanf_float+0x34c>
 8009b5a:	2945      	cmp	r1, #69	; 0x45
 8009b5c:	d00a      	beq.n	8009b74 <_scanf_float+0x34c>
 8009b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b62:	463a      	mov	r2, r7
 8009b64:	4640      	mov	r0, r8
 8009b66:	4798      	blx	r3
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	1eb5      	subs	r5, r6, #2
 8009b72:	6123      	str	r3, [r4, #16]
 8009b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b78:	463a      	mov	r2, r7
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	4798      	blx	r3
 8009b7e:	462e      	mov	r6, r5
 8009b80:	6825      	ldr	r5, [r4, #0]
 8009b82:	f015 0510 	ands.w	r5, r5, #16
 8009b86:	d158      	bne.n	8009c3a <_scanf_float+0x412>
 8009b88:	7035      	strb	r5, [r6, #0]
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b94:	d11c      	bne.n	8009bd0 <_scanf_float+0x3a8>
 8009b96:	9b01      	ldr	r3, [sp, #4]
 8009b98:	454b      	cmp	r3, r9
 8009b9a:	eba3 0209 	sub.w	r2, r3, r9
 8009b9e:	d124      	bne.n	8009bea <_scanf_float+0x3c2>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	4659      	mov	r1, fp
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	f002 fc3b 	bl	800c420 <_strtod_r>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	6821      	ldr	r1, [r4, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f011 0f02 	tst.w	r1, #2
 8009bb4:	ec57 6b10 	vmov	r6, r7, d0
 8009bb8:	f103 0204 	add.w	r2, r3, #4
 8009bbc:	d020      	beq.n	8009c00 <_scanf_float+0x3d8>
 8009bbe:	9903      	ldr	r1, [sp, #12]
 8009bc0:	600a      	str	r2, [r1, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	e9c3 6700 	strd	r6, r7, [r3]
 8009bc8:	68e3      	ldr	r3, [r4, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60e3      	str	r3, [r4, #12]
 8009bce:	e66c      	b.n	80098aa <_scanf_float+0x82>
 8009bd0:	9b04      	ldr	r3, [sp, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0e4      	beq.n	8009ba0 <_scanf_float+0x378>
 8009bd6:	9905      	ldr	r1, [sp, #20]
 8009bd8:	230a      	movs	r3, #10
 8009bda:	462a      	mov	r2, r5
 8009bdc:	3101      	adds	r1, #1
 8009bde:	4640      	mov	r0, r8
 8009be0:	f002 fca6 	bl	800c530 <_strtol_r>
 8009be4:	9b04      	ldr	r3, [sp, #16]
 8009be6:	9e05      	ldr	r6, [sp, #20]
 8009be8:	1ac2      	subs	r2, r0, r3
 8009bea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009bee:	429e      	cmp	r6, r3
 8009bf0:	bf28      	it	cs
 8009bf2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009bf6:	4912      	ldr	r1, [pc, #72]	; (8009c40 <_scanf_float+0x418>)
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f000 f8e7 	bl	8009dcc <siprintf>
 8009bfe:	e7cf      	b.n	8009ba0 <_scanf_float+0x378>
 8009c00:	f011 0f04 	tst.w	r1, #4
 8009c04:	9903      	ldr	r1, [sp, #12]
 8009c06:	600a      	str	r2, [r1, #0]
 8009c08:	d1db      	bne.n	8009bc2 <_scanf_float+0x39a>
 8009c0a:	f8d3 8000 	ldr.w	r8, [r3]
 8009c0e:	ee10 2a10 	vmov	r2, s0
 8009c12:	ee10 0a10 	vmov	r0, s0
 8009c16:	463b      	mov	r3, r7
 8009c18:	4639      	mov	r1, r7
 8009c1a:	f7f6 ff87 	bl	8000b2c <__aeabi_dcmpun>
 8009c1e:	b128      	cbz	r0, 8009c2c <_scanf_float+0x404>
 8009c20:	4808      	ldr	r0, [pc, #32]	; (8009c44 <_scanf_float+0x41c>)
 8009c22:	f000 f9c3 	bl	8009fac <nanf>
 8009c26:	ed88 0a00 	vstr	s0, [r8]
 8009c2a:	e7cd      	b.n	8009bc8 <_scanf_float+0x3a0>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	4639      	mov	r1, r7
 8009c30:	f7f6 ffda 	bl	8000be8 <__aeabi_d2f>
 8009c34:	f8c8 0000 	str.w	r0, [r8]
 8009c38:	e7c6      	b.n	8009bc8 <_scanf_float+0x3a0>
 8009c3a:	2500      	movs	r5, #0
 8009c3c:	e635      	b.n	80098aa <_scanf_float+0x82>
 8009c3e:	bf00      	nop
 8009c40:	0800dc1c 	.word	0x0800dc1c
 8009c44:	0800dfad 	.word	0x0800dfad

08009c48 <std>:
 8009c48:	2300      	movs	r3, #0
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c56:	6083      	str	r3, [r0, #8]
 8009c58:	8181      	strh	r1, [r0, #12]
 8009c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c5c:	81c2      	strh	r2, [r0, #14]
 8009c5e:	6183      	str	r3, [r0, #24]
 8009c60:	4619      	mov	r1, r3
 8009c62:	2208      	movs	r2, #8
 8009c64:	305c      	adds	r0, #92	; 0x5c
 8009c66:	f000 f914 	bl	8009e92 <memset>
 8009c6a:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <std+0x38>)
 8009c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c6e:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <std+0x3c>)
 8009c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c72:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <std+0x40>)
 8009c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c76:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <std+0x44>)
 8009c78:	6224      	str	r4, [r4, #32]
 8009c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	bf00      	nop
 8009c80:	08009e0d 	.word	0x08009e0d
 8009c84:	08009e2f 	.word	0x08009e2f
 8009c88:	08009e67 	.word	0x08009e67
 8009c8c:	08009e8b 	.word	0x08009e8b

08009c90 <stdio_exit_handler>:
 8009c90:	4a02      	ldr	r2, [pc, #8]	; (8009c9c <stdio_exit_handler+0xc>)
 8009c92:	4903      	ldr	r1, [pc, #12]	; (8009ca0 <stdio_exit_handler+0x10>)
 8009c94:	4803      	ldr	r0, [pc, #12]	; (8009ca4 <stdio_exit_handler+0x14>)
 8009c96:	f000 b869 	b.w	8009d6c <_fwalk_sglue>
 8009c9a:	bf00      	nop
 8009c9c:	20000040 	.word	0x20000040
 8009ca0:	0800cb79 	.word	0x0800cb79
 8009ca4:	2000004c 	.word	0x2000004c

08009ca8 <cleanup_stdio>:
 8009ca8:	6841      	ldr	r1, [r0, #4]
 8009caa:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <cleanup_stdio+0x34>)
 8009cac:	4299      	cmp	r1, r3
 8009cae:	b510      	push	{r4, lr}
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	d001      	beq.n	8009cb8 <cleanup_stdio+0x10>
 8009cb4:	f002 ff60 	bl	800cb78 <_fflush_r>
 8009cb8:	68a1      	ldr	r1, [r4, #8]
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <cleanup_stdio+0x38>)
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	d002      	beq.n	8009cc6 <cleanup_stdio+0x1e>
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f002 ff59 	bl	800cb78 <_fflush_r>
 8009cc6:	68e1      	ldr	r1, [r4, #12]
 8009cc8:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <cleanup_stdio+0x3c>)
 8009cca:	4299      	cmp	r1, r3
 8009ccc:	d004      	beq.n	8009cd8 <cleanup_stdio+0x30>
 8009cce:	4620      	mov	r0, r4
 8009cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd4:	f002 bf50 	b.w	800cb78 <_fflush_r>
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	bf00      	nop
 8009cdc:	200057ec 	.word	0x200057ec
 8009ce0:	20005854 	.word	0x20005854
 8009ce4:	200058bc 	.word	0x200058bc

08009ce8 <global_stdio_init.part.0>:
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <global_stdio_init.part.0+0x30>)
 8009cec:	4c0b      	ldr	r4, [pc, #44]	; (8009d1c <global_stdio_init.part.0+0x34>)
 8009cee:	4a0c      	ldr	r2, [pc, #48]	; (8009d20 <global_stdio_init.part.0+0x38>)
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2104      	movs	r1, #4
 8009cf8:	f7ff ffa6 	bl	8009c48 <std>
 8009cfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009d00:	2201      	movs	r2, #1
 8009d02:	2109      	movs	r1, #9
 8009d04:	f7ff ffa0 	bl	8009c48 <std>
 8009d08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d12:	2112      	movs	r1, #18
 8009d14:	f7ff bf98 	b.w	8009c48 <std>
 8009d18:	20005924 	.word	0x20005924
 8009d1c:	200057ec 	.word	0x200057ec
 8009d20:	08009c91 	.word	0x08009c91

08009d24 <__sfp_lock_acquire>:
 8009d24:	4801      	ldr	r0, [pc, #4]	; (8009d2c <__sfp_lock_acquire+0x8>)
 8009d26:	f000 b931 	b.w	8009f8c <__retarget_lock_acquire_recursive>
 8009d2a:	bf00      	nop
 8009d2c:	2000592d 	.word	0x2000592d

08009d30 <__sfp_lock_release>:
 8009d30:	4801      	ldr	r0, [pc, #4]	; (8009d38 <__sfp_lock_release+0x8>)
 8009d32:	f000 b92c 	b.w	8009f8e <__retarget_lock_release_recursive>
 8009d36:	bf00      	nop
 8009d38:	2000592d 	.word	0x2000592d

08009d3c <__sinit>:
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	4604      	mov	r4, r0
 8009d40:	f7ff fff0 	bl	8009d24 <__sfp_lock_acquire>
 8009d44:	6a23      	ldr	r3, [r4, #32]
 8009d46:	b11b      	cbz	r3, 8009d50 <__sinit+0x14>
 8009d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d4c:	f7ff bff0 	b.w	8009d30 <__sfp_lock_release>
 8009d50:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <__sinit+0x28>)
 8009d52:	6223      	str	r3, [r4, #32]
 8009d54:	4b04      	ldr	r3, [pc, #16]	; (8009d68 <__sinit+0x2c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f5      	bne.n	8009d48 <__sinit+0xc>
 8009d5c:	f7ff ffc4 	bl	8009ce8 <global_stdio_init.part.0>
 8009d60:	e7f2      	b.n	8009d48 <__sinit+0xc>
 8009d62:	bf00      	nop
 8009d64:	08009ca9 	.word	0x08009ca9
 8009d68:	20005924 	.word	0x20005924

08009d6c <_fwalk_sglue>:
 8009d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d70:	4607      	mov	r7, r0
 8009d72:	4688      	mov	r8, r1
 8009d74:	4614      	mov	r4, r2
 8009d76:	2600      	movs	r6, #0
 8009d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d80:	d505      	bpl.n	8009d8e <_fwalk_sglue+0x22>
 8009d82:	6824      	ldr	r4, [r4, #0]
 8009d84:	2c00      	cmp	r4, #0
 8009d86:	d1f7      	bne.n	8009d78 <_fwalk_sglue+0xc>
 8009d88:	4630      	mov	r0, r6
 8009d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d907      	bls.n	8009da4 <_fwalk_sglue+0x38>
 8009d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	d003      	beq.n	8009da4 <_fwalk_sglue+0x38>
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4638      	mov	r0, r7
 8009da0:	47c0      	blx	r8
 8009da2:	4306      	orrs	r6, r0
 8009da4:	3568      	adds	r5, #104	; 0x68
 8009da6:	e7e9      	b.n	8009d7c <_fwalk_sglue+0x10>

08009da8 <iprintf>:
 8009da8:	b40f      	push	{r0, r1, r2, r3}
 8009daa:	b507      	push	{r0, r1, r2, lr}
 8009dac:	4906      	ldr	r1, [pc, #24]	; (8009dc8 <iprintf+0x20>)
 8009dae:	ab04      	add	r3, sp, #16
 8009db0:	6808      	ldr	r0, [r1, #0]
 8009db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db6:	6881      	ldr	r1, [r0, #8]
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	f002 fd3d 	bl	800c838 <_vfiprintf_r>
 8009dbe:	b003      	add	sp, #12
 8009dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc4:	b004      	add	sp, #16
 8009dc6:	4770      	bx	lr
 8009dc8:	20000098 	.word	0x20000098

08009dcc <siprintf>:
 8009dcc:	b40e      	push	{r1, r2, r3}
 8009dce:	b500      	push	{lr}
 8009dd0:	b09c      	sub	sp, #112	; 0x70
 8009dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8009dd4:	9002      	str	r0, [sp, #8]
 8009dd6:	9006      	str	r0, [sp, #24]
 8009dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ddc:	4809      	ldr	r0, [pc, #36]	; (8009e04 <siprintf+0x38>)
 8009dde:	9107      	str	r1, [sp, #28]
 8009de0:	9104      	str	r1, [sp, #16]
 8009de2:	4909      	ldr	r1, [pc, #36]	; (8009e08 <siprintf+0x3c>)
 8009de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de8:	9105      	str	r1, [sp, #20]
 8009dea:	6800      	ldr	r0, [r0, #0]
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	a902      	add	r1, sp, #8
 8009df0:	f002 fbfa 	bl	800c5e8 <_svfiprintf_r>
 8009df4:	9b02      	ldr	r3, [sp, #8]
 8009df6:	2200      	movs	r2, #0
 8009df8:	701a      	strb	r2, [r3, #0]
 8009dfa:	b01c      	add	sp, #112	; 0x70
 8009dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e00:	b003      	add	sp, #12
 8009e02:	4770      	bx	lr
 8009e04:	20000098 	.word	0x20000098
 8009e08:	ffff0208 	.word	0xffff0208

08009e0c <__sread>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	460c      	mov	r4, r1
 8009e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e14:	f000 f86c 	bl	8009ef0 <_read_r>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	bfab      	itete	ge
 8009e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e20:	181b      	addge	r3, r3, r0
 8009e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e26:	bfac      	ite	ge
 8009e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e2a:	81a3      	strhlt	r3, [r4, #12]
 8009e2c:	bd10      	pop	{r4, pc}

08009e2e <__swrite>:
 8009e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e32:	461f      	mov	r7, r3
 8009e34:	898b      	ldrh	r3, [r1, #12]
 8009e36:	05db      	lsls	r3, r3, #23
 8009e38:	4605      	mov	r5, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	d505      	bpl.n	8009e4c <__swrite+0x1e>
 8009e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e44:	2302      	movs	r3, #2
 8009e46:	2200      	movs	r2, #0
 8009e48:	f000 f840 	bl	8009ecc <_lseek_r>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	4632      	mov	r2, r6
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	f000 b857 	b.w	8009f14 <_write_r>

08009e66 <__sseek>:
 8009e66:	b510      	push	{r4, lr}
 8009e68:	460c      	mov	r4, r1
 8009e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6e:	f000 f82d 	bl	8009ecc <_lseek_r>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	bf15      	itete	ne
 8009e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e82:	81a3      	strheq	r3, [r4, #12]
 8009e84:	bf18      	it	ne
 8009e86:	81a3      	strhne	r3, [r4, #12]
 8009e88:	bd10      	pop	{r4, pc}

08009e8a <__sclose>:
 8009e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8e:	f000 b80d 	b.w	8009eac <_close_r>

08009e92 <memset>:
 8009e92:	4402      	add	r2, r0
 8009e94:	4603      	mov	r3, r0
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d100      	bne.n	8009e9c <memset+0xa>
 8009e9a:	4770      	bx	lr
 8009e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea0:	e7f9      	b.n	8009e96 <memset+0x4>
	...

08009ea4 <_localeconv_r>:
 8009ea4:	4800      	ldr	r0, [pc, #0]	; (8009ea8 <_localeconv_r+0x4>)
 8009ea6:	4770      	bx	lr
 8009ea8:	2000018c 	.word	0x2000018c

08009eac <_close_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d06      	ldr	r5, [pc, #24]	; (8009ec8 <_close_r+0x1c>)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	602b      	str	r3, [r5, #0]
 8009eb8:	f7f8 fef9 	bl	8002cae <_close>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_close_r+0x1a>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_close_r+0x1a>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	20005928 	.word	0x20005928

08009ecc <_lseek_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4d07      	ldr	r5, [pc, #28]	; (8009eec <_lseek_r+0x20>)
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	4608      	mov	r0, r1
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	602a      	str	r2, [r5, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	f7f8 ff0e 	bl	8002cfc <_lseek>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_lseek_r+0x1e>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_lseek_r+0x1e>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	20005928 	.word	0x20005928

08009ef0 <_read_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d07      	ldr	r5, [pc, #28]	; (8009f10 <_read_r+0x20>)
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	4608      	mov	r0, r1
 8009ef8:	4611      	mov	r1, r2
 8009efa:	2200      	movs	r2, #0
 8009efc:	602a      	str	r2, [r5, #0]
 8009efe:	461a      	mov	r2, r3
 8009f00:	f7f8 fe9c 	bl	8002c3c <_read>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_read_r+0x1e>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_read_r+0x1e>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	20005928 	.word	0x20005928

08009f14 <_write_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d07      	ldr	r5, [pc, #28]	; (8009f34 <_write_r+0x20>)
 8009f18:	4604      	mov	r4, r0
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	602a      	str	r2, [r5, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	f7f8 fea7 	bl	8002c76 <_write>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_write_r+0x1e>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_write_r+0x1e>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	20005928 	.word	0x20005928

08009f38 <__errno>:
 8009f38:	4b01      	ldr	r3, [pc, #4]	; (8009f40 <__errno+0x8>)
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	20000098 	.word	0x20000098

08009f44 <__libc_init_array>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	4d0d      	ldr	r5, [pc, #52]	; (8009f7c <__libc_init_array+0x38>)
 8009f48:	4c0d      	ldr	r4, [pc, #52]	; (8009f80 <__libc_init_array+0x3c>)
 8009f4a:	1b64      	subs	r4, r4, r5
 8009f4c:	10a4      	asrs	r4, r4, #2
 8009f4e:	2600      	movs	r6, #0
 8009f50:	42a6      	cmp	r6, r4
 8009f52:	d109      	bne.n	8009f68 <__libc_init_array+0x24>
 8009f54:	4d0b      	ldr	r5, [pc, #44]	; (8009f84 <__libc_init_array+0x40>)
 8009f56:	4c0c      	ldr	r4, [pc, #48]	; (8009f88 <__libc_init_array+0x44>)
 8009f58:	f003 fd80 	bl	800da5c <_init>
 8009f5c:	1b64      	subs	r4, r4, r5
 8009f5e:	10a4      	asrs	r4, r4, #2
 8009f60:	2600      	movs	r6, #0
 8009f62:	42a6      	cmp	r6, r4
 8009f64:	d105      	bne.n	8009f72 <__libc_init_array+0x2e>
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f6c:	4798      	blx	r3
 8009f6e:	3601      	adds	r6, #1
 8009f70:	e7ee      	b.n	8009f50 <__libc_init_array+0xc>
 8009f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f76:	4798      	blx	r3
 8009f78:	3601      	adds	r6, #1
 8009f7a:	e7f2      	b.n	8009f62 <__libc_init_array+0x1e>
 8009f7c:	0800e058 	.word	0x0800e058
 8009f80:	0800e058 	.word	0x0800e058
 8009f84:	0800e058 	.word	0x0800e058
 8009f88:	0800e05c 	.word	0x0800e05c

08009f8c <__retarget_lock_acquire_recursive>:
 8009f8c:	4770      	bx	lr

08009f8e <__retarget_lock_release_recursive>:
 8009f8e:	4770      	bx	lr

08009f90 <memcpy>:
 8009f90:	440a      	add	r2, r1
 8009f92:	4291      	cmp	r1, r2
 8009f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f98:	d100      	bne.n	8009f9c <memcpy+0xc>
 8009f9a:	4770      	bx	lr
 8009f9c:	b510      	push	{r4, lr}
 8009f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fa6:	4291      	cmp	r1, r2
 8009fa8:	d1f9      	bne.n	8009f9e <memcpy+0xe>
 8009faa:	bd10      	pop	{r4, pc}

08009fac <nanf>:
 8009fac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009fb4 <nanf+0x8>
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	7fc00000 	.word	0x7fc00000

08009fb8 <quorem>:
 8009fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	6903      	ldr	r3, [r0, #16]
 8009fbe:	690c      	ldr	r4, [r1, #16]
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	4607      	mov	r7, r0
 8009fc4:	db7e      	blt.n	800a0c4 <quorem+0x10c>
 8009fc6:	3c01      	subs	r4, #1
 8009fc8:	f101 0814 	add.w	r8, r1, #20
 8009fcc:	f100 0514 	add.w	r5, r0, #20
 8009fd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fe6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fea:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fee:	d331      	bcc.n	800a054 <quorem+0x9c>
 8009ff0:	f04f 0e00 	mov.w	lr, #0
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	46ac      	mov	ip, r5
 8009ff8:	46f2      	mov	sl, lr
 8009ffa:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ffe:	b293      	uxth	r3, r2
 800a000:	fb06 e303 	mla	r3, r6, r3, lr
 800a004:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a008:	0c1a      	lsrs	r2, r3, #16
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	ebaa 0303 	sub.w	r3, sl, r3
 800a010:	f8dc a000 	ldr.w	sl, [ip]
 800a014:	fa13 f38a 	uxtah	r3, r3, sl
 800a018:	fb06 220e 	mla	r2, r6, lr, r2
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a024:	b292      	uxth	r2, r2
 800a026:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a02a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a02e:	f8bd 3000 	ldrh.w	r3, [sp]
 800a032:	4581      	cmp	r9, r0
 800a034:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a038:	f84c 3b04 	str.w	r3, [ip], #4
 800a03c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a040:	d2db      	bcs.n	8009ffa <quorem+0x42>
 800a042:	f855 300b 	ldr.w	r3, [r5, fp]
 800a046:	b92b      	cbnz	r3, 800a054 <quorem+0x9c>
 800a048:	9b01      	ldr	r3, [sp, #4]
 800a04a:	3b04      	subs	r3, #4
 800a04c:	429d      	cmp	r5, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	d32c      	bcc.n	800a0ac <quorem+0xf4>
 800a052:	613c      	str	r4, [r7, #16]
 800a054:	4638      	mov	r0, r7
 800a056:	f001 f9ef 	bl	800b438 <__mcmp>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	db22      	blt.n	800a0a4 <quorem+0xec>
 800a05e:	3601      	adds	r6, #1
 800a060:	4629      	mov	r1, r5
 800a062:	2000      	movs	r0, #0
 800a064:	f858 2b04 	ldr.w	r2, [r8], #4
 800a068:	f8d1 c000 	ldr.w	ip, [r1]
 800a06c:	b293      	uxth	r3, r2
 800a06e:	1ac3      	subs	r3, r0, r3
 800a070:	0c12      	lsrs	r2, r2, #16
 800a072:	fa13 f38c 	uxtah	r3, r3, ip
 800a076:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a07a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a07e:	b29b      	uxth	r3, r3
 800a080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a084:	45c1      	cmp	r9, r8
 800a086:	f841 3b04 	str.w	r3, [r1], #4
 800a08a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a08e:	d2e9      	bcs.n	800a064 <quorem+0xac>
 800a090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a098:	b922      	cbnz	r2, 800a0a4 <quorem+0xec>
 800a09a:	3b04      	subs	r3, #4
 800a09c:	429d      	cmp	r5, r3
 800a09e:	461a      	mov	r2, r3
 800a0a0:	d30a      	bcc.n	800a0b8 <quorem+0x100>
 800a0a2:	613c      	str	r4, [r7, #16]
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	b003      	add	sp, #12
 800a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ac:	6812      	ldr	r2, [r2, #0]
 800a0ae:	3b04      	subs	r3, #4
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	d1ce      	bne.n	800a052 <quorem+0x9a>
 800a0b4:	3c01      	subs	r4, #1
 800a0b6:	e7c9      	b.n	800a04c <quorem+0x94>
 800a0b8:	6812      	ldr	r2, [r2, #0]
 800a0ba:	3b04      	subs	r3, #4
 800a0bc:	2a00      	cmp	r2, #0
 800a0be:	d1f0      	bne.n	800a0a2 <quorem+0xea>
 800a0c0:	3c01      	subs	r4, #1
 800a0c2:	e7eb      	b.n	800a09c <quorem+0xe4>
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e7ee      	b.n	800a0a6 <quorem+0xee>

0800a0c8 <_dtoa_r>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	ed2d 8b04 	vpush	{d8-d9}
 800a0d0:	69c5      	ldr	r5, [r0, #28]
 800a0d2:	b093      	sub	sp, #76	; 0x4c
 800a0d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a0d8:	ec57 6b10 	vmov	r6, r7, d0
 800a0dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0e0:	9107      	str	r1, [sp, #28]
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a0e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a0e8:	b975      	cbnz	r5, 800a108 <_dtoa_r+0x40>
 800a0ea:	2010      	movs	r0, #16
 800a0ec:	f000 fe2a 	bl	800ad44 <malloc>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	61e0      	str	r0, [r4, #28]
 800a0f4:	b920      	cbnz	r0, 800a100 <_dtoa_r+0x38>
 800a0f6:	4bae      	ldr	r3, [pc, #696]	; (800a3b0 <_dtoa_r+0x2e8>)
 800a0f8:	21ef      	movs	r1, #239	; 0xef
 800a0fa:	48ae      	ldr	r0, [pc, #696]	; (800a3b4 <_dtoa_r+0x2ec>)
 800a0fc:	f002 fe40 	bl	800cd80 <__assert_func>
 800a100:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a104:	6005      	str	r5, [r0, #0]
 800a106:	60c5      	str	r5, [r0, #12]
 800a108:	69e3      	ldr	r3, [r4, #28]
 800a10a:	6819      	ldr	r1, [r3, #0]
 800a10c:	b151      	cbz	r1, 800a124 <_dtoa_r+0x5c>
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	604a      	str	r2, [r1, #4]
 800a112:	2301      	movs	r3, #1
 800a114:	4093      	lsls	r3, r2
 800a116:	608b      	str	r3, [r1, #8]
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 ff07 	bl	800af2c <_Bfree>
 800a11e:	69e3      	ldr	r3, [r4, #28]
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	1e3b      	subs	r3, r7, #0
 800a126:	bfbb      	ittet	lt
 800a128:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a12c:	9303      	strlt	r3, [sp, #12]
 800a12e:	2300      	movge	r3, #0
 800a130:	2201      	movlt	r2, #1
 800a132:	bfac      	ite	ge
 800a134:	f8c8 3000 	strge.w	r3, [r8]
 800a138:	f8c8 2000 	strlt.w	r2, [r8]
 800a13c:	4b9e      	ldr	r3, [pc, #632]	; (800a3b8 <_dtoa_r+0x2f0>)
 800a13e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a142:	ea33 0308 	bics.w	r3, r3, r8
 800a146:	d11b      	bne.n	800a180 <_dtoa_r+0xb8>
 800a148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a14a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a154:	4333      	orrs	r3, r6
 800a156:	f000 8593 	beq.w	800ac80 <_dtoa_r+0xbb8>
 800a15a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a15c:	b963      	cbnz	r3, 800a178 <_dtoa_r+0xb0>
 800a15e:	4b97      	ldr	r3, [pc, #604]	; (800a3bc <_dtoa_r+0x2f4>)
 800a160:	e027      	b.n	800a1b2 <_dtoa_r+0xea>
 800a162:	4b97      	ldr	r3, [pc, #604]	; (800a3c0 <_dtoa_r+0x2f8>)
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	3308      	adds	r3, #8
 800a168:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	9800      	ldr	r0, [sp, #0]
 800a16e:	b013      	add	sp, #76	; 0x4c
 800a170:	ecbd 8b04 	vpop	{d8-d9}
 800a174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a178:	4b90      	ldr	r3, [pc, #576]	; (800a3bc <_dtoa_r+0x2f4>)
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	3303      	adds	r3, #3
 800a17e:	e7f3      	b.n	800a168 <_dtoa_r+0xa0>
 800a180:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a184:	2200      	movs	r2, #0
 800a186:	ec51 0b17 	vmov	r0, r1, d7
 800a18a:	eeb0 8a47 	vmov.f32	s16, s14
 800a18e:	eef0 8a67 	vmov.f32	s17, s15
 800a192:	2300      	movs	r3, #0
 800a194:	f7f6 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800a198:	4681      	mov	r9, r0
 800a19a:	b160      	cbz	r0, 800a1b6 <_dtoa_r+0xee>
 800a19c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a19e:	2301      	movs	r3, #1
 800a1a0:	6013      	str	r3, [r2, #0]
 800a1a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 8568 	beq.w	800ac7a <_dtoa_r+0xbb2>
 800a1aa:	4b86      	ldr	r3, [pc, #536]	; (800a3c4 <_dtoa_r+0x2fc>)
 800a1ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	e7da      	b.n	800a16c <_dtoa_r+0xa4>
 800a1b6:	aa10      	add	r2, sp, #64	; 0x40
 800a1b8:	a911      	add	r1, sp, #68	; 0x44
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a1c0:	eef0 0a68 	vmov.f32	s1, s17
 800a1c4:	f001 fa4e 	bl	800b664 <__d2b>
 800a1c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a1cc:	4682      	mov	sl, r0
 800a1ce:	2d00      	cmp	r5, #0
 800a1d0:	d07f      	beq.n	800a2d2 <_dtoa_r+0x20a>
 800a1d2:	ee18 3a90 	vmov	r3, s17
 800a1d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a1de:	ec51 0b18 	vmov	r0, r1, d8
 800a1e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a1e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4b75      	ldr	r3, [pc, #468]	; (800a3c8 <_dtoa_r+0x300>)
 800a1f4:	f7f6 f848 	bl	8000288 <__aeabi_dsub>
 800a1f8:	a367      	add	r3, pc, #412	; (adr r3, 800a398 <_dtoa_r+0x2d0>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f6 f9fb 	bl	80005f8 <__aeabi_dmul>
 800a202:	a367      	add	r3, pc, #412	; (adr r3, 800a3a0 <_dtoa_r+0x2d8>)
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7f6 f840 	bl	800028c <__adddf3>
 800a20c:	4606      	mov	r6, r0
 800a20e:	4628      	mov	r0, r5
 800a210:	460f      	mov	r7, r1
 800a212:	f7f6 f987 	bl	8000524 <__aeabi_i2d>
 800a216:	a364      	add	r3, pc, #400	; (adr r3, 800a3a8 <_dtoa_r+0x2e0>)
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	f7f6 f9ec 	bl	80005f8 <__aeabi_dmul>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4630      	mov	r0, r6
 800a226:	4639      	mov	r1, r7
 800a228:	f7f6 f830 	bl	800028c <__adddf3>
 800a22c:	4606      	mov	r6, r0
 800a22e:	460f      	mov	r7, r1
 800a230:	f7f6 fc92 	bl	8000b58 <__aeabi_d2iz>
 800a234:	2200      	movs	r2, #0
 800a236:	4683      	mov	fp, r0
 800a238:	2300      	movs	r3, #0
 800a23a:	4630      	mov	r0, r6
 800a23c:	4639      	mov	r1, r7
 800a23e:	f7f6 fc4d 	bl	8000adc <__aeabi_dcmplt>
 800a242:	b148      	cbz	r0, 800a258 <_dtoa_r+0x190>
 800a244:	4658      	mov	r0, fp
 800a246:	f7f6 f96d 	bl	8000524 <__aeabi_i2d>
 800a24a:	4632      	mov	r2, r6
 800a24c:	463b      	mov	r3, r7
 800a24e:	f7f6 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a252:	b908      	cbnz	r0, 800a258 <_dtoa_r+0x190>
 800a254:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a258:	f1bb 0f16 	cmp.w	fp, #22
 800a25c:	d857      	bhi.n	800a30e <_dtoa_r+0x246>
 800a25e:	4b5b      	ldr	r3, [pc, #364]	; (800a3cc <_dtoa_r+0x304>)
 800a260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	ec51 0b18 	vmov	r0, r1, d8
 800a26c:	f7f6 fc36 	bl	8000adc <__aeabi_dcmplt>
 800a270:	2800      	cmp	r0, #0
 800a272:	d04e      	beq.n	800a312 <_dtoa_r+0x24a>
 800a274:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a278:	2300      	movs	r3, #0
 800a27a:	930c      	str	r3, [sp, #48]	; 0x30
 800a27c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a27e:	1b5b      	subs	r3, r3, r5
 800a280:	1e5a      	subs	r2, r3, #1
 800a282:	bf45      	ittet	mi
 800a284:	f1c3 0301 	rsbmi	r3, r3, #1
 800a288:	9305      	strmi	r3, [sp, #20]
 800a28a:	2300      	movpl	r3, #0
 800a28c:	2300      	movmi	r3, #0
 800a28e:	9206      	str	r2, [sp, #24]
 800a290:	bf54      	ite	pl
 800a292:	9305      	strpl	r3, [sp, #20]
 800a294:	9306      	strmi	r3, [sp, #24]
 800a296:	f1bb 0f00 	cmp.w	fp, #0
 800a29a:	db3c      	blt.n	800a316 <_dtoa_r+0x24e>
 800a29c:	9b06      	ldr	r3, [sp, #24]
 800a29e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a2a2:	445b      	add	r3, fp
 800a2a4:	9306      	str	r3, [sp, #24]
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	9308      	str	r3, [sp, #32]
 800a2aa:	9b07      	ldr	r3, [sp, #28]
 800a2ac:	2b09      	cmp	r3, #9
 800a2ae:	d868      	bhi.n	800a382 <_dtoa_r+0x2ba>
 800a2b0:	2b05      	cmp	r3, #5
 800a2b2:	bfc4      	itt	gt
 800a2b4:	3b04      	subgt	r3, #4
 800a2b6:	9307      	strgt	r3, [sp, #28]
 800a2b8:	9b07      	ldr	r3, [sp, #28]
 800a2ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a2be:	bfcc      	ite	gt
 800a2c0:	2500      	movgt	r5, #0
 800a2c2:	2501      	movle	r5, #1
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	f200 8085 	bhi.w	800a3d4 <_dtoa_r+0x30c>
 800a2ca:	e8df f003 	tbb	[pc, r3]
 800a2ce:	3b2e      	.short	0x3b2e
 800a2d0:	5839      	.short	0x5839
 800a2d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a2d6:	441d      	add	r5, r3
 800a2d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2dc:	2b20      	cmp	r3, #32
 800a2de:	bfc1      	itttt	gt
 800a2e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a2e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a2ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a2f0:	bfd6      	itet	le
 800a2f2:	f1c3 0320 	rsble	r3, r3, #32
 800a2f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a2fa:	fa06 f003 	lslle.w	r0, r6, r3
 800a2fe:	f7f6 f901 	bl	8000504 <__aeabi_ui2d>
 800a302:	2201      	movs	r2, #1
 800a304:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a308:	3d01      	subs	r5, #1
 800a30a:	920e      	str	r2, [sp, #56]	; 0x38
 800a30c:	e76f      	b.n	800a1ee <_dtoa_r+0x126>
 800a30e:	2301      	movs	r3, #1
 800a310:	e7b3      	b.n	800a27a <_dtoa_r+0x1b2>
 800a312:	900c      	str	r0, [sp, #48]	; 0x30
 800a314:	e7b2      	b.n	800a27c <_dtoa_r+0x1b4>
 800a316:	9b05      	ldr	r3, [sp, #20]
 800a318:	eba3 030b 	sub.w	r3, r3, fp
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	f1cb 0300 	rsb	r3, fp, #0
 800a322:	9308      	str	r3, [sp, #32]
 800a324:	2300      	movs	r3, #0
 800a326:	930b      	str	r3, [sp, #44]	; 0x2c
 800a328:	e7bf      	b.n	800a2aa <_dtoa_r+0x1e2>
 800a32a:	2300      	movs	r3, #0
 800a32c:	9309      	str	r3, [sp, #36]	; 0x24
 800a32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a330:	2b00      	cmp	r3, #0
 800a332:	dc52      	bgt.n	800a3da <_dtoa_r+0x312>
 800a334:	2301      	movs	r3, #1
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	9304      	str	r3, [sp, #16]
 800a33a:	461a      	mov	r2, r3
 800a33c:	920a      	str	r2, [sp, #40]	; 0x28
 800a33e:	e00b      	b.n	800a358 <_dtoa_r+0x290>
 800a340:	2301      	movs	r3, #1
 800a342:	e7f3      	b.n	800a32c <_dtoa_r+0x264>
 800a344:	2300      	movs	r3, #0
 800a346:	9309      	str	r3, [sp, #36]	; 0x24
 800a348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34a:	445b      	add	r3, fp
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	3301      	adds	r3, #1
 800a350:	2b01      	cmp	r3, #1
 800a352:	9304      	str	r3, [sp, #16]
 800a354:	bfb8      	it	lt
 800a356:	2301      	movlt	r3, #1
 800a358:	69e0      	ldr	r0, [r4, #28]
 800a35a:	2100      	movs	r1, #0
 800a35c:	2204      	movs	r2, #4
 800a35e:	f102 0614 	add.w	r6, r2, #20
 800a362:	429e      	cmp	r6, r3
 800a364:	d93d      	bls.n	800a3e2 <_dtoa_r+0x31a>
 800a366:	6041      	str	r1, [r0, #4]
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 fd9f 	bl	800aeac <_Balloc>
 800a36e:	9000      	str	r0, [sp, #0]
 800a370:	2800      	cmp	r0, #0
 800a372:	d139      	bne.n	800a3e8 <_dtoa_r+0x320>
 800a374:	4b16      	ldr	r3, [pc, #88]	; (800a3d0 <_dtoa_r+0x308>)
 800a376:	4602      	mov	r2, r0
 800a378:	f240 11af 	movw	r1, #431	; 0x1af
 800a37c:	e6bd      	b.n	800a0fa <_dtoa_r+0x32>
 800a37e:	2301      	movs	r3, #1
 800a380:	e7e1      	b.n	800a346 <_dtoa_r+0x27e>
 800a382:	2501      	movs	r5, #1
 800a384:	2300      	movs	r3, #0
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	9509      	str	r5, [sp, #36]	; 0x24
 800a38a:	f04f 33ff 	mov.w	r3, #4294967295
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	2200      	movs	r2, #0
 800a394:	2312      	movs	r3, #18
 800a396:	e7d1      	b.n	800a33c <_dtoa_r+0x274>
 800a398:	636f4361 	.word	0x636f4361
 800a39c:	3fd287a7 	.word	0x3fd287a7
 800a3a0:	8b60c8b3 	.word	0x8b60c8b3
 800a3a4:	3fc68a28 	.word	0x3fc68a28
 800a3a8:	509f79fb 	.word	0x509f79fb
 800a3ac:	3fd34413 	.word	0x3fd34413
 800a3b0:	0800dc2e 	.word	0x0800dc2e
 800a3b4:	0800dc45 	.word	0x0800dc45
 800a3b8:	7ff00000 	.word	0x7ff00000
 800a3bc:	0800dc2a 	.word	0x0800dc2a
 800a3c0:	0800dc21 	.word	0x0800dc21
 800a3c4:	0800dbf9 	.word	0x0800dbf9
 800a3c8:	3ff80000 	.word	0x3ff80000
 800a3cc:	0800dd30 	.word	0x0800dd30
 800a3d0:	0800dc9d 	.word	0x0800dc9d
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d8:	e7d7      	b.n	800a38a <_dtoa_r+0x2c2>
 800a3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	9304      	str	r3, [sp, #16]
 800a3e0:	e7ba      	b.n	800a358 <_dtoa_r+0x290>
 800a3e2:	3101      	adds	r1, #1
 800a3e4:	0052      	lsls	r2, r2, #1
 800a3e6:	e7ba      	b.n	800a35e <_dtoa_r+0x296>
 800a3e8:	69e3      	ldr	r3, [r4, #28]
 800a3ea:	9a00      	ldr	r2, [sp, #0]
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	9b04      	ldr	r3, [sp, #16]
 800a3f0:	2b0e      	cmp	r3, #14
 800a3f2:	f200 80a8 	bhi.w	800a546 <_dtoa_r+0x47e>
 800a3f6:	2d00      	cmp	r5, #0
 800a3f8:	f000 80a5 	beq.w	800a546 <_dtoa_r+0x47e>
 800a3fc:	f1bb 0f00 	cmp.w	fp, #0
 800a400:	dd38      	ble.n	800a474 <_dtoa_r+0x3ac>
 800a402:	4bc0      	ldr	r3, [pc, #768]	; (800a704 <_dtoa_r+0x63c>)
 800a404:	f00b 020f 	and.w	r2, fp, #15
 800a408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a40c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a410:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a414:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a418:	d019      	beq.n	800a44e <_dtoa_r+0x386>
 800a41a:	4bbb      	ldr	r3, [pc, #748]	; (800a708 <_dtoa_r+0x640>)
 800a41c:	ec51 0b18 	vmov	r0, r1, d8
 800a420:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a424:	f7f6 fa12 	bl	800084c <__aeabi_ddiv>
 800a428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a42c:	f008 080f 	and.w	r8, r8, #15
 800a430:	2503      	movs	r5, #3
 800a432:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a708 <_dtoa_r+0x640>
 800a436:	f1b8 0f00 	cmp.w	r8, #0
 800a43a:	d10a      	bne.n	800a452 <_dtoa_r+0x38a>
 800a43c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a440:	4632      	mov	r2, r6
 800a442:	463b      	mov	r3, r7
 800a444:	f7f6 fa02 	bl	800084c <__aeabi_ddiv>
 800a448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a44c:	e02b      	b.n	800a4a6 <_dtoa_r+0x3de>
 800a44e:	2502      	movs	r5, #2
 800a450:	e7ef      	b.n	800a432 <_dtoa_r+0x36a>
 800a452:	f018 0f01 	tst.w	r8, #1
 800a456:	d008      	beq.n	800a46a <_dtoa_r+0x3a2>
 800a458:	4630      	mov	r0, r6
 800a45a:	4639      	mov	r1, r7
 800a45c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a460:	f7f6 f8ca 	bl	80005f8 <__aeabi_dmul>
 800a464:	3501      	adds	r5, #1
 800a466:	4606      	mov	r6, r0
 800a468:	460f      	mov	r7, r1
 800a46a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a46e:	f109 0908 	add.w	r9, r9, #8
 800a472:	e7e0      	b.n	800a436 <_dtoa_r+0x36e>
 800a474:	f000 809f 	beq.w	800a5b6 <_dtoa_r+0x4ee>
 800a478:	f1cb 0600 	rsb	r6, fp, #0
 800a47c:	4ba1      	ldr	r3, [pc, #644]	; (800a704 <_dtoa_r+0x63c>)
 800a47e:	4fa2      	ldr	r7, [pc, #648]	; (800a708 <_dtoa_r+0x640>)
 800a480:	f006 020f 	and.w	r2, r6, #15
 800a484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	ec51 0b18 	vmov	r0, r1, d8
 800a490:	f7f6 f8b2 	bl	80005f8 <__aeabi_dmul>
 800a494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a498:	1136      	asrs	r6, r6, #4
 800a49a:	2300      	movs	r3, #0
 800a49c:	2502      	movs	r5, #2
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	d17e      	bne.n	800a5a0 <_dtoa_r+0x4d8>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1d0      	bne.n	800a448 <_dtoa_r+0x380>
 800a4a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 8084 	beq.w	800a5ba <_dtoa_r+0x4f2>
 800a4b2:	4b96      	ldr	r3, [pc, #600]	; (800a70c <_dtoa_r+0x644>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	f7f6 fb0f 	bl	8000adc <__aeabi_dcmplt>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d07b      	beq.n	800a5ba <_dtoa_r+0x4f2>
 800a4c2:	9b04      	ldr	r3, [sp, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d078      	beq.n	800a5ba <_dtoa_r+0x4f2>
 800a4c8:	9b01      	ldr	r3, [sp, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	dd39      	ble.n	800a542 <_dtoa_r+0x47a>
 800a4ce:	4b90      	ldr	r3, [pc, #576]	; (800a710 <_dtoa_r+0x648>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4de:	9e01      	ldr	r6, [sp, #4]
 800a4e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a4e4:	3501      	adds	r5, #1
 800a4e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f7f6 f81a 	bl	8000524 <__aeabi_i2d>
 800a4f0:	4642      	mov	r2, r8
 800a4f2:	464b      	mov	r3, r9
 800a4f4:	f7f6 f880 	bl	80005f8 <__aeabi_dmul>
 800a4f8:	4b86      	ldr	r3, [pc, #536]	; (800a714 <_dtoa_r+0x64c>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f7f5 fec6 	bl	800028c <__adddf3>
 800a500:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	d158      	bne.n	800a5c0 <_dtoa_r+0x4f8>
 800a50e:	4b82      	ldr	r3, [pc, #520]	; (800a718 <_dtoa_r+0x650>)
 800a510:	2200      	movs	r2, #0
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	f7f5 feb7 	bl	8000288 <__aeabi_dsub>
 800a51a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a51e:	4680      	mov	r8, r0
 800a520:	4689      	mov	r9, r1
 800a522:	f7f6 faf9 	bl	8000b18 <__aeabi_dcmpgt>
 800a526:	2800      	cmp	r0, #0
 800a528:	f040 8296 	bne.w	800aa58 <_dtoa_r+0x990>
 800a52c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a530:	4640      	mov	r0, r8
 800a532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a536:	4649      	mov	r1, r9
 800a538:	f7f6 fad0 	bl	8000adc <__aeabi_dcmplt>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	f040 8289 	bne.w	800aa54 <_dtoa_r+0x98c>
 800a542:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a546:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f2c0 814e 	blt.w	800a7ea <_dtoa_r+0x722>
 800a54e:	f1bb 0f0e 	cmp.w	fp, #14
 800a552:	f300 814a 	bgt.w	800a7ea <_dtoa_r+0x722>
 800a556:	4b6b      	ldr	r3, [pc, #428]	; (800a704 <_dtoa_r+0x63c>)
 800a558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a55c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a562:	2b00      	cmp	r3, #0
 800a564:	f280 80dc 	bge.w	800a720 <_dtoa_r+0x658>
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f300 80d8 	bgt.w	800a720 <_dtoa_r+0x658>
 800a570:	f040 826f 	bne.w	800aa52 <_dtoa_r+0x98a>
 800a574:	4b68      	ldr	r3, [pc, #416]	; (800a718 <_dtoa_r+0x650>)
 800a576:	2200      	movs	r2, #0
 800a578:	4640      	mov	r0, r8
 800a57a:	4649      	mov	r1, r9
 800a57c:	f7f6 f83c 	bl	80005f8 <__aeabi_dmul>
 800a580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a584:	f7f6 fabe 	bl	8000b04 <__aeabi_dcmpge>
 800a588:	9e04      	ldr	r6, [sp, #16]
 800a58a:	4637      	mov	r7, r6
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f040 8245 	bne.w	800aa1c <_dtoa_r+0x954>
 800a592:	9d00      	ldr	r5, [sp, #0]
 800a594:	2331      	movs	r3, #49	; 0x31
 800a596:	f805 3b01 	strb.w	r3, [r5], #1
 800a59a:	f10b 0b01 	add.w	fp, fp, #1
 800a59e:	e241      	b.n	800aa24 <_dtoa_r+0x95c>
 800a5a0:	07f2      	lsls	r2, r6, #31
 800a5a2:	d505      	bpl.n	800a5b0 <_dtoa_r+0x4e8>
 800a5a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5a8:	f7f6 f826 	bl	80005f8 <__aeabi_dmul>
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	1076      	asrs	r6, r6, #1
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	e773      	b.n	800a49e <_dtoa_r+0x3d6>
 800a5b6:	2502      	movs	r5, #2
 800a5b8:	e775      	b.n	800a4a6 <_dtoa_r+0x3de>
 800a5ba:	9e04      	ldr	r6, [sp, #16]
 800a5bc:	465f      	mov	r7, fp
 800a5be:	e792      	b.n	800a4e6 <_dtoa_r+0x41e>
 800a5c0:	9900      	ldr	r1, [sp, #0]
 800a5c2:	4b50      	ldr	r3, [pc, #320]	; (800a704 <_dtoa_r+0x63c>)
 800a5c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5c8:	4431      	add	r1, r6
 800a5ca:	9102      	str	r1, [sp, #8]
 800a5cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5ce:	eeb0 9a47 	vmov.f32	s18, s14
 800a5d2:	eef0 9a67 	vmov.f32	s19, s15
 800a5d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a5da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5de:	2900      	cmp	r1, #0
 800a5e0:	d044      	beq.n	800a66c <_dtoa_r+0x5a4>
 800a5e2:	494e      	ldr	r1, [pc, #312]	; (800a71c <_dtoa_r+0x654>)
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	f7f6 f931 	bl	800084c <__aeabi_ddiv>
 800a5ea:	ec53 2b19 	vmov	r2, r3, d9
 800a5ee:	f7f5 fe4b 	bl	8000288 <__aeabi_dsub>
 800a5f2:	9d00      	ldr	r5, [sp, #0]
 800a5f4:	ec41 0b19 	vmov	d9, r0, r1
 800a5f8:	4649      	mov	r1, r9
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	f7f6 faac 	bl	8000b58 <__aeabi_d2iz>
 800a600:	4606      	mov	r6, r0
 800a602:	f7f5 ff8f 	bl	8000524 <__aeabi_i2d>
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	4640      	mov	r0, r8
 800a60c:	4649      	mov	r1, r9
 800a60e:	f7f5 fe3b 	bl	8000288 <__aeabi_dsub>
 800a612:	3630      	adds	r6, #48	; 0x30
 800a614:	f805 6b01 	strb.w	r6, [r5], #1
 800a618:	ec53 2b19 	vmov	r2, r3, d9
 800a61c:	4680      	mov	r8, r0
 800a61e:	4689      	mov	r9, r1
 800a620:	f7f6 fa5c 	bl	8000adc <__aeabi_dcmplt>
 800a624:	2800      	cmp	r0, #0
 800a626:	d164      	bne.n	800a6f2 <_dtoa_r+0x62a>
 800a628:	4642      	mov	r2, r8
 800a62a:	464b      	mov	r3, r9
 800a62c:	4937      	ldr	r1, [pc, #220]	; (800a70c <_dtoa_r+0x644>)
 800a62e:	2000      	movs	r0, #0
 800a630:	f7f5 fe2a 	bl	8000288 <__aeabi_dsub>
 800a634:	ec53 2b19 	vmov	r2, r3, d9
 800a638:	f7f6 fa50 	bl	8000adc <__aeabi_dcmplt>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f040 80b6 	bne.w	800a7ae <_dtoa_r+0x6e6>
 800a642:	9b02      	ldr	r3, [sp, #8]
 800a644:	429d      	cmp	r5, r3
 800a646:	f43f af7c 	beq.w	800a542 <_dtoa_r+0x47a>
 800a64a:	4b31      	ldr	r3, [pc, #196]	; (800a710 <_dtoa_r+0x648>)
 800a64c:	ec51 0b19 	vmov	r0, r1, d9
 800a650:	2200      	movs	r2, #0
 800a652:	f7f5 ffd1 	bl	80005f8 <__aeabi_dmul>
 800a656:	4b2e      	ldr	r3, [pc, #184]	; (800a710 <_dtoa_r+0x648>)
 800a658:	ec41 0b19 	vmov	d9, r0, r1
 800a65c:	2200      	movs	r2, #0
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	f7f5 ffc9 	bl	80005f8 <__aeabi_dmul>
 800a666:	4680      	mov	r8, r0
 800a668:	4689      	mov	r9, r1
 800a66a:	e7c5      	b.n	800a5f8 <_dtoa_r+0x530>
 800a66c:	ec51 0b17 	vmov	r0, r1, d7
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	9b02      	ldr	r3, [sp, #8]
 800a676:	9d00      	ldr	r5, [sp, #0]
 800a678:	930f      	str	r3, [sp, #60]	; 0x3c
 800a67a:	ec41 0b19 	vmov	d9, r0, r1
 800a67e:	4649      	mov	r1, r9
 800a680:	4640      	mov	r0, r8
 800a682:	f7f6 fa69 	bl	8000b58 <__aeabi_d2iz>
 800a686:	4606      	mov	r6, r0
 800a688:	f7f5 ff4c 	bl	8000524 <__aeabi_i2d>
 800a68c:	3630      	adds	r6, #48	; 0x30
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4640      	mov	r0, r8
 800a694:	4649      	mov	r1, r9
 800a696:	f7f5 fdf7 	bl	8000288 <__aeabi_dsub>
 800a69a:	f805 6b01 	strb.w	r6, [r5], #1
 800a69e:	9b02      	ldr	r3, [sp, #8]
 800a6a0:	429d      	cmp	r5, r3
 800a6a2:	4680      	mov	r8, r0
 800a6a4:	4689      	mov	r9, r1
 800a6a6:	f04f 0200 	mov.w	r2, #0
 800a6aa:	d124      	bne.n	800a6f6 <_dtoa_r+0x62e>
 800a6ac:	4b1b      	ldr	r3, [pc, #108]	; (800a71c <_dtoa_r+0x654>)
 800a6ae:	ec51 0b19 	vmov	r0, r1, d9
 800a6b2:	f7f5 fdeb 	bl	800028c <__adddf3>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	4649      	mov	r1, r9
 800a6be:	f7f6 fa2b 	bl	8000b18 <__aeabi_dcmpgt>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d173      	bne.n	800a7ae <_dtoa_r+0x6e6>
 800a6c6:	ec53 2b19 	vmov	r2, r3, d9
 800a6ca:	4914      	ldr	r1, [pc, #80]	; (800a71c <_dtoa_r+0x654>)
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	f7f5 fddb 	bl	8000288 <__aeabi_dsub>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	4649      	mov	r1, r9
 800a6da:	f7f6 f9ff 	bl	8000adc <__aeabi_dcmplt>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f43f af2f 	beq.w	800a542 <_dtoa_r+0x47a>
 800a6e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a6e6:	1e6b      	subs	r3, r5, #1
 800a6e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6ee:	2b30      	cmp	r3, #48	; 0x30
 800a6f0:	d0f8      	beq.n	800a6e4 <_dtoa_r+0x61c>
 800a6f2:	46bb      	mov	fp, r7
 800a6f4:	e04a      	b.n	800a78c <_dtoa_r+0x6c4>
 800a6f6:	4b06      	ldr	r3, [pc, #24]	; (800a710 <_dtoa_r+0x648>)
 800a6f8:	f7f5 ff7e 	bl	80005f8 <__aeabi_dmul>
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	4689      	mov	r9, r1
 800a700:	e7bd      	b.n	800a67e <_dtoa_r+0x5b6>
 800a702:	bf00      	nop
 800a704:	0800dd30 	.word	0x0800dd30
 800a708:	0800dd08 	.word	0x0800dd08
 800a70c:	3ff00000 	.word	0x3ff00000
 800a710:	40240000 	.word	0x40240000
 800a714:	401c0000 	.word	0x401c0000
 800a718:	40140000 	.word	0x40140000
 800a71c:	3fe00000 	.word	0x3fe00000
 800a720:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a724:	9d00      	ldr	r5, [sp, #0]
 800a726:	4642      	mov	r2, r8
 800a728:	464b      	mov	r3, r9
 800a72a:	4630      	mov	r0, r6
 800a72c:	4639      	mov	r1, r7
 800a72e:	f7f6 f88d 	bl	800084c <__aeabi_ddiv>
 800a732:	f7f6 fa11 	bl	8000b58 <__aeabi_d2iz>
 800a736:	9001      	str	r0, [sp, #4]
 800a738:	f7f5 fef4 	bl	8000524 <__aeabi_i2d>
 800a73c:	4642      	mov	r2, r8
 800a73e:	464b      	mov	r3, r9
 800a740:	f7f5 ff5a 	bl	80005f8 <__aeabi_dmul>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f5 fd9c 	bl	8000288 <__aeabi_dsub>
 800a750:	9e01      	ldr	r6, [sp, #4]
 800a752:	9f04      	ldr	r7, [sp, #16]
 800a754:	3630      	adds	r6, #48	; 0x30
 800a756:	f805 6b01 	strb.w	r6, [r5], #1
 800a75a:	9e00      	ldr	r6, [sp, #0]
 800a75c:	1bae      	subs	r6, r5, r6
 800a75e:	42b7      	cmp	r7, r6
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	d134      	bne.n	800a7d0 <_dtoa_r+0x708>
 800a766:	f7f5 fd91 	bl	800028c <__adddf3>
 800a76a:	4642      	mov	r2, r8
 800a76c:	464b      	mov	r3, r9
 800a76e:	4606      	mov	r6, r0
 800a770:	460f      	mov	r7, r1
 800a772:	f7f6 f9d1 	bl	8000b18 <__aeabi_dcmpgt>
 800a776:	b9c8      	cbnz	r0, 800a7ac <_dtoa_r+0x6e4>
 800a778:	4642      	mov	r2, r8
 800a77a:	464b      	mov	r3, r9
 800a77c:	4630      	mov	r0, r6
 800a77e:	4639      	mov	r1, r7
 800a780:	f7f6 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a784:	b110      	cbz	r0, 800a78c <_dtoa_r+0x6c4>
 800a786:	9b01      	ldr	r3, [sp, #4]
 800a788:	07db      	lsls	r3, r3, #31
 800a78a:	d40f      	bmi.n	800a7ac <_dtoa_r+0x6e4>
 800a78c:	4651      	mov	r1, sl
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 fbcc 	bl	800af2c <_Bfree>
 800a794:	2300      	movs	r3, #0
 800a796:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a798:	702b      	strb	r3, [r5, #0]
 800a79a:	f10b 0301 	add.w	r3, fp, #1
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f43f ace2 	beq.w	800a16c <_dtoa_r+0xa4>
 800a7a8:	601d      	str	r5, [r3, #0]
 800a7aa:	e4df      	b.n	800a16c <_dtoa_r+0xa4>
 800a7ac:	465f      	mov	r7, fp
 800a7ae:	462b      	mov	r3, r5
 800a7b0:	461d      	mov	r5, r3
 800a7b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7b6:	2a39      	cmp	r2, #57	; 0x39
 800a7b8:	d106      	bne.n	800a7c8 <_dtoa_r+0x700>
 800a7ba:	9a00      	ldr	r2, [sp, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d1f7      	bne.n	800a7b0 <_dtoa_r+0x6e8>
 800a7c0:	9900      	ldr	r1, [sp, #0]
 800a7c2:	2230      	movs	r2, #48	; 0x30
 800a7c4:	3701      	adds	r7, #1
 800a7c6:	700a      	strb	r2, [r1, #0]
 800a7c8:	781a      	ldrb	r2, [r3, #0]
 800a7ca:	3201      	adds	r2, #1
 800a7cc:	701a      	strb	r2, [r3, #0]
 800a7ce:	e790      	b.n	800a6f2 <_dtoa_r+0x62a>
 800a7d0:	4ba3      	ldr	r3, [pc, #652]	; (800aa60 <_dtoa_r+0x998>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f7f5 ff10 	bl	80005f8 <__aeabi_dmul>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4606      	mov	r6, r0
 800a7de:	460f      	mov	r7, r1
 800a7e0:	f7f6 f972 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d09e      	beq.n	800a726 <_dtoa_r+0x65e>
 800a7e8:	e7d0      	b.n	800a78c <_dtoa_r+0x6c4>
 800a7ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ec:	2a00      	cmp	r2, #0
 800a7ee:	f000 80ca 	beq.w	800a986 <_dtoa_r+0x8be>
 800a7f2:	9a07      	ldr	r2, [sp, #28]
 800a7f4:	2a01      	cmp	r2, #1
 800a7f6:	f300 80ad 	bgt.w	800a954 <_dtoa_r+0x88c>
 800a7fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7fc:	2a00      	cmp	r2, #0
 800a7fe:	f000 80a5 	beq.w	800a94c <_dtoa_r+0x884>
 800a802:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a806:	9e08      	ldr	r6, [sp, #32]
 800a808:	9d05      	ldr	r5, [sp, #20]
 800a80a:	9a05      	ldr	r2, [sp, #20]
 800a80c:	441a      	add	r2, r3
 800a80e:	9205      	str	r2, [sp, #20]
 800a810:	9a06      	ldr	r2, [sp, #24]
 800a812:	2101      	movs	r1, #1
 800a814:	441a      	add	r2, r3
 800a816:	4620      	mov	r0, r4
 800a818:	9206      	str	r2, [sp, #24]
 800a81a:	f000 fc87 	bl	800b12c <__i2b>
 800a81e:	4607      	mov	r7, r0
 800a820:	b165      	cbz	r5, 800a83c <_dtoa_r+0x774>
 800a822:	9b06      	ldr	r3, [sp, #24]
 800a824:	2b00      	cmp	r3, #0
 800a826:	dd09      	ble.n	800a83c <_dtoa_r+0x774>
 800a828:	42ab      	cmp	r3, r5
 800a82a:	9a05      	ldr	r2, [sp, #20]
 800a82c:	bfa8      	it	ge
 800a82e:	462b      	movge	r3, r5
 800a830:	1ad2      	subs	r2, r2, r3
 800a832:	9205      	str	r2, [sp, #20]
 800a834:	9a06      	ldr	r2, [sp, #24]
 800a836:	1aed      	subs	r5, r5, r3
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	9306      	str	r3, [sp, #24]
 800a83c:	9b08      	ldr	r3, [sp, #32]
 800a83e:	b1f3      	cbz	r3, 800a87e <_dtoa_r+0x7b6>
 800a840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 80a3 	beq.w	800a98e <_dtoa_r+0x8c6>
 800a848:	2e00      	cmp	r6, #0
 800a84a:	dd10      	ble.n	800a86e <_dtoa_r+0x7a6>
 800a84c:	4639      	mov	r1, r7
 800a84e:	4632      	mov	r2, r6
 800a850:	4620      	mov	r0, r4
 800a852:	f000 fd2b 	bl	800b2ac <__pow5mult>
 800a856:	4652      	mov	r2, sl
 800a858:	4601      	mov	r1, r0
 800a85a:	4607      	mov	r7, r0
 800a85c:	4620      	mov	r0, r4
 800a85e:	f000 fc7b 	bl	800b158 <__multiply>
 800a862:	4651      	mov	r1, sl
 800a864:	4680      	mov	r8, r0
 800a866:	4620      	mov	r0, r4
 800a868:	f000 fb60 	bl	800af2c <_Bfree>
 800a86c:	46c2      	mov	sl, r8
 800a86e:	9b08      	ldr	r3, [sp, #32]
 800a870:	1b9a      	subs	r2, r3, r6
 800a872:	d004      	beq.n	800a87e <_dtoa_r+0x7b6>
 800a874:	4651      	mov	r1, sl
 800a876:	4620      	mov	r0, r4
 800a878:	f000 fd18 	bl	800b2ac <__pow5mult>
 800a87c:	4682      	mov	sl, r0
 800a87e:	2101      	movs	r1, #1
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fc53 	bl	800b12c <__i2b>
 800a886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a888:	2b00      	cmp	r3, #0
 800a88a:	4606      	mov	r6, r0
 800a88c:	f340 8081 	ble.w	800a992 <_dtoa_r+0x8ca>
 800a890:	461a      	mov	r2, r3
 800a892:	4601      	mov	r1, r0
 800a894:	4620      	mov	r0, r4
 800a896:	f000 fd09 	bl	800b2ac <__pow5mult>
 800a89a:	9b07      	ldr	r3, [sp, #28]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	4606      	mov	r6, r0
 800a8a0:	dd7a      	ble.n	800a998 <_dtoa_r+0x8d0>
 800a8a2:	f04f 0800 	mov.w	r8, #0
 800a8a6:	6933      	ldr	r3, [r6, #16]
 800a8a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8ac:	6918      	ldr	r0, [r3, #16]
 800a8ae:	f000 fbef 	bl	800b090 <__hi0bits>
 800a8b2:	f1c0 0020 	rsb	r0, r0, #32
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	4418      	add	r0, r3
 800a8ba:	f010 001f 	ands.w	r0, r0, #31
 800a8be:	f000 8094 	beq.w	800a9ea <_dtoa_r+0x922>
 800a8c2:	f1c0 0320 	rsb	r3, r0, #32
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	f340 8085 	ble.w	800a9d6 <_dtoa_r+0x90e>
 800a8cc:	9b05      	ldr	r3, [sp, #20]
 800a8ce:	f1c0 001c 	rsb	r0, r0, #28
 800a8d2:	4403      	add	r3, r0
 800a8d4:	9305      	str	r3, [sp, #20]
 800a8d6:	9b06      	ldr	r3, [sp, #24]
 800a8d8:	4403      	add	r3, r0
 800a8da:	4405      	add	r5, r0
 800a8dc:	9306      	str	r3, [sp, #24]
 800a8de:	9b05      	ldr	r3, [sp, #20]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dd05      	ble.n	800a8f0 <_dtoa_r+0x828>
 800a8e4:	4651      	mov	r1, sl
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 fd39 	bl	800b360 <__lshift>
 800a8ee:	4682      	mov	sl, r0
 800a8f0:	9b06      	ldr	r3, [sp, #24]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	dd05      	ble.n	800a902 <_dtoa_r+0x83a>
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 fd30 	bl	800b360 <__lshift>
 800a900:	4606      	mov	r6, r0
 800a902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a904:	2b00      	cmp	r3, #0
 800a906:	d072      	beq.n	800a9ee <_dtoa_r+0x926>
 800a908:	4631      	mov	r1, r6
 800a90a:	4650      	mov	r0, sl
 800a90c:	f000 fd94 	bl	800b438 <__mcmp>
 800a910:	2800      	cmp	r0, #0
 800a912:	da6c      	bge.n	800a9ee <_dtoa_r+0x926>
 800a914:	2300      	movs	r3, #0
 800a916:	4651      	mov	r1, sl
 800a918:	220a      	movs	r2, #10
 800a91a:	4620      	mov	r0, r4
 800a91c:	f000 fb28 	bl	800af70 <__multadd>
 800a920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a922:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a926:	4682      	mov	sl, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 81b0 	beq.w	800ac8e <_dtoa_r+0xbc6>
 800a92e:	2300      	movs	r3, #0
 800a930:	4639      	mov	r1, r7
 800a932:	220a      	movs	r2, #10
 800a934:	4620      	mov	r0, r4
 800a936:	f000 fb1b 	bl	800af70 <__multadd>
 800a93a:	9b01      	ldr	r3, [sp, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	4607      	mov	r7, r0
 800a940:	f300 8096 	bgt.w	800aa70 <_dtoa_r+0x9a8>
 800a944:	9b07      	ldr	r3, [sp, #28]
 800a946:	2b02      	cmp	r3, #2
 800a948:	dc59      	bgt.n	800a9fe <_dtoa_r+0x936>
 800a94a:	e091      	b.n	800aa70 <_dtoa_r+0x9a8>
 800a94c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a94e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a952:	e758      	b.n	800a806 <_dtoa_r+0x73e>
 800a954:	9b04      	ldr	r3, [sp, #16]
 800a956:	1e5e      	subs	r6, r3, #1
 800a958:	9b08      	ldr	r3, [sp, #32]
 800a95a:	42b3      	cmp	r3, r6
 800a95c:	bfbf      	itttt	lt
 800a95e:	9b08      	ldrlt	r3, [sp, #32]
 800a960:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a962:	9608      	strlt	r6, [sp, #32]
 800a964:	1af3      	sublt	r3, r6, r3
 800a966:	bfb4      	ite	lt
 800a968:	18d2      	addlt	r2, r2, r3
 800a96a:	1b9e      	subge	r6, r3, r6
 800a96c:	9b04      	ldr	r3, [sp, #16]
 800a96e:	bfbc      	itt	lt
 800a970:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a972:	2600      	movlt	r6, #0
 800a974:	2b00      	cmp	r3, #0
 800a976:	bfb7      	itett	lt
 800a978:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a97c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a980:	1a9d      	sublt	r5, r3, r2
 800a982:	2300      	movlt	r3, #0
 800a984:	e741      	b.n	800a80a <_dtoa_r+0x742>
 800a986:	9e08      	ldr	r6, [sp, #32]
 800a988:	9d05      	ldr	r5, [sp, #20]
 800a98a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a98c:	e748      	b.n	800a820 <_dtoa_r+0x758>
 800a98e:	9a08      	ldr	r2, [sp, #32]
 800a990:	e770      	b.n	800a874 <_dtoa_r+0x7ac>
 800a992:	9b07      	ldr	r3, [sp, #28]
 800a994:	2b01      	cmp	r3, #1
 800a996:	dc19      	bgt.n	800a9cc <_dtoa_r+0x904>
 800a998:	9b02      	ldr	r3, [sp, #8]
 800a99a:	b9bb      	cbnz	r3, 800a9cc <_dtoa_r+0x904>
 800a99c:	9b03      	ldr	r3, [sp, #12]
 800a99e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9a2:	b99b      	cbnz	r3, 800a9cc <_dtoa_r+0x904>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9aa:	0d1b      	lsrs	r3, r3, #20
 800a9ac:	051b      	lsls	r3, r3, #20
 800a9ae:	b183      	cbz	r3, 800a9d2 <_dtoa_r+0x90a>
 800a9b0:	9b05      	ldr	r3, [sp, #20]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	9305      	str	r3, [sp, #20]
 800a9b6:	9b06      	ldr	r3, [sp, #24]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	9306      	str	r3, [sp, #24]
 800a9bc:	f04f 0801 	mov.w	r8, #1
 800a9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f47f af6f 	bne.w	800a8a6 <_dtoa_r+0x7de>
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	e774      	b.n	800a8b6 <_dtoa_r+0x7ee>
 800a9cc:	f04f 0800 	mov.w	r8, #0
 800a9d0:	e7f6      	b.n	800a9c0 <_dtoa_r+0x8f8>
 800a9d2:	4698      	mov	r8, r3
 800a9d4:	e7f4      	b.n	800a9c0 <_dtoa_r+0x8f8>
 800a9d6:	d082      	beq.n	800a8de <_dtoa_r+0x816>
 800a9d8:	9a05      	ldr	r2, [sp, #20]
 800a9da:	331c      	adds	r3, #28
 800a9dc:	441a      	add	r2, r3
 800a9de:	9205      	str	r2, [sp, #20]
 800a9e0:	9a06      	ldr	r2, [sp, #24]
 800a9e2:	441a      	add	r2, r3
 800a9e4:	441d      	add	r5, r3
 800a9e6:	9206      	str	r2, [sp, #24]
 800a9e8:	e779      	b.n	800a8de <_dtoa_r+0x816>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	e7f4      	b.n	800a9d8 <_dtoa_r+0x910>
 800a9ee:	9b04      	ldr	r3, [sp, #16]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dc37      	bgt.n	800aa64 <_dtoa_r+0x99c>
 800a9f4:	9b07      	ldr	r3, [sp, #28]
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	dd34      	ble.n	800aa64 <_dtoa_r+0x99c>
 800a9fa:	9b04      	ldr	r3, [sp, #16]
 800a9fc:	9301      	str	r3, [sp, #4]
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	b963      	cbnz	r3, 800aa1c <_dtoa_r+0x954>
 800aa02:	4631      	mov	r1, r6
 800aa04:	2205      	movs	r2, #5
 800aa06:	4620      	mov	r0, r4
 800aa08:	f000 fab2 	bl	800af70 <__multadd>
 800aa0c:	4601      	mov	r1, r0
 800aa0e:	4606      	mov	r6, r0
 800aa10:	4650      	mov	r0, sl
 800aa12:	f000 fd11 	bl	800b438 <__mcmp>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	f73f adbb 	bgt.w	800a592 <_dtoa_r+0x4ca>
 800aa1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1e:	9d00      	ldr	r5, [sp, #0]
 800aa20:	ea6f 0b03 	mvn.w	fp, r3
 800aa24:	f04f 0800 	mov.w	r8, #0
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 fa7e 	bl	800af2c <_Bfree>
 800aa30:	2f00      	cmp	r7, #0
 800aa32:	f43f aeab 	beq.w	800a78c <_dtoa_r+0x6c4>
 800aa36:	f1b8 0f00 	cmp.w	r8, #0
 800aa3a:	d005      	beq.n	800aa48 <_dtoa_r+0x980>
 800aa3c:	45b8      	cmp	r8, r7
 800aa3e:	d003      	beq.n	800aa48 <_dtoa_r+0x980>
 800aa40:	4641      	mov	r1, r8
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 fa72 	bl	800af2c <_Bfree>
 800aa48:	4639      	mov	r1, r7
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fa6e 	bl	800af2c <_Bfree>
 800aa50:	e69c      	b.n	800a78c <_dtoa_r+0x6c4>
 800aa52:	2600      	movs	r6, #0
 800aa54:	4637      	mov	r7, r6
 800aa56:	e7e1      	b.n	800aa1c <_dtoa_r+0x954>
 800aa58:	46bb      	mov	fp, r7
 800aa5a:	4637      	mov	r7, r6
 800aa5c:	e599      	b.n	800a592 <_dtoa_r+0x4ca>
 800aa5e:	bf00      	nop
 800aa60:	40240000 	.word	0x40240000
 800aa64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f000 80c8 	beq.w	800abfc <_dtoa_r+0xb34>
 800aa6c:	9b04      	ldr	r3, [sp, #16]
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	2d00      	cmp	r5, #0
 800aa72:	dd05      	ble.n	800aa80 <_dtoa_r+0x9b8>
 800aa74:	4639      	mov	r1, r7
 800aa76:	462a      	mov	r2, r5
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 fc71 	bl	800b360 <__lshift>
 800aa7e:	4607      	mov	r7, r0
 800aa80:	f1b8 0f00 	cmp.w	r8, #0
 800aa84:	d05b      	beq.n	800ab3e <_dtoa_r+0xa76>
 800aa86:	6879      	ldr	r1, [r7, #4]
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f000 fa0f 	bl	800aeac <_Balloc>
 800aa8e:	4605      	mov	r5, r0
 800aa90:	b928      	cbnz	r0, 800aa9e <_dtoa_r+0x9d6>
 800aa92:	4b83      	ldr	r3, [pc, #524]	; (800aca0 <_dtoa_r+0xbd8>)
 800aa94:	4602      	mov	r2, r0
 800aa96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aa9a:	f7ff bb2e 	b.w	800a0fa <_dtoa_r+0x32>
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	3202      	adds	r2, #2
 800aaa2:	0092      	lsls	r2, r2, #2
 800aaa4:	f107 010c 	add.w	r1, r7, #12
 800aaa8:	300c      	adds	r0, #12
 800aaaa:	f7ff fa71 	bl	8009f90 <memcpy>
 800aaae:	2201      	movs	r2, #1
 800aab0:	4629      	mov	r1, r5
 800aab2:	4620      	mov	r0, r4
 800aab4:	f000 fc54 	bl	800b360 <__lshift>
 800aab8:	9b00      	ldr	r3, [sp, #0]
 800aaba:	3301      	adds	r3, #1
 800aabc:	9304      	str	r3, [sp, #16]
 800aabe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aac2:	4413      	add	r3, r2
 800aac4:	9308      	str	r3, [sp, #32]
 800aac6:	9b02      	ldr	r3, [sp, #8]
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	46b8      	mov	r8, r7
 800aace:	9306      	str	r3, [sp, #24]
 800aad0:	4607      	mov	r7, r0
 800aad2:	9b04      	ldr	r3, [sp, #16]
 800aad4:	4631      	mov	r1, r6
 800aad6:	3b01      	subs	r3, #1
 800aad8:	4650      	mov	r0, sl
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	f7ff fa6c 	bl	8009fb8 <quorem>
 800aae0:	4641      	mov	r1, r8
 800aae2:	9002      	str	r0, [sp, #8]
 800aae4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aae8:	4650      	mov	r0, sl
 800aaea:	f000 fca5 	bl	800b438 <__mcmp>
 800aaee:	463a      	mov	r2, r7
 800aaf0:	9005      	str	r0, [sp, #20]
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 fcbb 	bl	800b470 <__mdiff>
 800aafa:	68c2      	ldr	r2, [r0, #12]
 800aafc:	4605      	mov	r5, r0
 800aafe:	bb02      	cbnz	r2, 800ab42 <_dtoa_r+0xa7a>
 800ab00:	4601      	mov	r1, r0
 800ab02:	4650      	mov	r0, sl
 800ab04:	f000 fc98 	bl	800b438 <__mcmp>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab10:	f000 fa0c 	bl	800af2c <_Bfree>
 800ab14:	9b07      	ldr	r3, [sp, #28]
 800ab16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab18:	9d04      	ldr	r5, [sp, #16]
 800ab1a:	ea43 0102 	orr.w	r1, r3, r2
 800ab1e:	9b06      	ldr	r3, [sp, #24]
 800ab20:	4319      	orrs	r1, r3
 800ab22:	d110      	bne.n	800ab46 <_dtoa_r+0xa7e>
 800ab24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab28:	d029      	beq.n	800ab7e <_dtoa_r+0xab6>
 800ab2a:	9b05      	ldr	r3, [sp, #20]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	dd02      	ble.n	800ab36 <_dtoa_r+0xa6e>
 800ab30:	9b02      	ldr	r3, [sp, #8]
 800ab32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ab36:	9b01      	ldr	r3, [sp, #4]
 800ab38:	f883 9000 	strb.w	r9, [r3]
 800ab3c:	e774      	b.n	800aa28 <_dtoa_r+0x960>
 800ab3e:	4638      	mov	r0, r7
 800ab40:	e7ba      	b.n	800aab8 <_dtoa_r+0x9f0>
 800ab42:	2201      	movs	r2, #1
 800ab44:	e7e1      	b.n	800ab0a <_dtoa_r+0xa42>
 800ab46:	9b05      	ldr	r3, [sp, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	db04      	blt.n	800ab56 <_dtoa_r+0xa8e>
 800ab4c:	9907      	ldr	r1, [sp, #28]
 800ab4e:	430b      	orrs	r3, r1
 800ab50:	9906      	ldr	r1, [sp, #24]
 800ab52:	430b      	orrs	r3, r1
 800ab54:	d120      	bne.n	800ab98 <_dtoa_r+0xad0>
 800ab56:	2a00      	cmp	r2, #0
 800ab58:	dded      	ble.n	800ab36 <_dtoa_r+0xa6e>
 800ab5a:	4651      	mov	r1, sl
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 fbfe 	bl	800b360 <__lshift>
 800ab64:	4631      	mov	r1, r6
 800ab66:	4682      	mov	sl, r0
 800ab68:	f000 fc66 	bl	800b438 <__mcmp>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	dc03      	bgt.n	800ab78 <_dtoa_r+0xab0>
 800ab70:	d1e1      	bne.n	800ab36 <_dtoa_r+0xa6e>
 800ab72:	f019 0f01 	tst.w	r9, #1
 800ab76:	d0de      	beq.n	800ab36 <_dtoa_r+0xa6e>
 800ab78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab7c:	d1d8      	bne.n	800ab30 <_dtoa_r+0xa68>
 800ab7e:	9a01      	ldr	r2, [sp, #4]
 800ab80:	2339      	movs	r3, #57	; 0x39
 800ab82:	7013      	strb	r3, [r2, #0]
 800ab84:	462b      	mov	r3, r5
 800ab86:	461d      	mov	r5, r3
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab8e:	2a39      	cmp	r2, #57	; 0x39
 800ab90:	d06c      	beq.n	800ac6c <_dtoa_r+0xba4>
 800ab92:	3201      	adds	r2, #1
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	e747      	b.n	800aa28 <_dtoa_r+0x960>
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	dd07      	ble.n	800abac <_dtoa_r+0xae4>
 800ab9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aba0:	d0ed      	beq.n	800ab7e <_dtoa_r+0xab6>
 800aba2:	9a01      	ldr	r2, [sp, #4]
 800aba4:	f109 0301 	add.w	r3, r9, #1
 800aba8:	7013      	strb	r3, [r2, #0]
 800abaa:	e73d      	b.n	800aa28 <_dtoa_r+0x960>
 800abac:	9b04      	ldr	r3, [sp, #16]
 800abae:	9a08      	ldr	r2, [sp, #32]
 800abb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d043      	beq.n	800ac40 <_dtoa_r+0xb78>
 800abb8:	4651      	mov	r1, sl
 800abba:	2300      	movs	r3, #0
 800abbc:	220a      	movs	r2, #10
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 f9d6 	bl	800af70 <__multadd>
 800abc4:	45b8      	cmp	r8, r7
 800abc6:	4682      	mov	sl, r0
 800abc8:	f04f 0300 	mov.w	r3, #0
 800abcc:	f04f 020a 	mov.w	r2, #10
 800abd0:	4641      	mov	r1, r8
 800abd2:	4620      	mov	r0, r4
 800abd4:	d107      	bne.n	800abe6 <_dtoa_r+0xb1e>
 800abd6:	f000 f9cb 	bl	800af70 <__multadd>
 800abda:	4680      	mov	r8, r0
 800abdc:	4607      	mov	r7, r0
 800abde:	9b04      	ldr	r3, [sp, #16]
 800abe0:	3301      	adds	r3, #1
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	e775      	b.n	800aad2 <_dtoa_r+0xa0a>
 800abe6:	f000 f9c3 	bl	800af70 <__multadd>
 800abea:	4639      	mov	r1, r7
 800abec:	4680      	mov	r8, r0
 800abee:	2300      	movs	r3, #0
 800abf0:	220a      	movs	r2, #10
 800abf2:	4620      	mov	r0, r4
 800abf4:	f000 f9bc 	bl	800af70 <__multadd>
 800abf8:	4607      	mov	r7, r0
 800abfa:	e7f0      	b.n	800abde <_dtoa_r+0xb16>
 800abfc:	9b04      	ldr	r3, [sp, #16]
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	9d00      	ldr	r5, [sp, #0]
 800ac02:	4631      	mov	r1, r6
 800ac04:	4650      	mov	r0, sl
 800ac06:	f7ff f9d7 	bl	8009fb8 <quorem>
 800ac0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ac0e:	9b00      	ldr	r3, [sp, #0]
 800ac10:	f805 9b01 	strb.w	r9, [r5], #1
 800ac14:	1aea      	subs	r2, r5, r3
 800ac16:	9b01      	ldr	r3, [sp, #4]
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	dd07      	ble.n	800ac2c <_dtoa_r+0xb64>
 800ac1c:	4651      	mov	r1, sl
 800ac1e:	2300      	movs	r3, #0
 800ac20:	220a      	movs	r2, #10
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 f9a4 	bl	800af70 <__multadd>
 800ac28:	4682      	mov	sl, r0
 800ac2a:	e7ea      	b.n	800ac02 <_dtoa_r+0xb3a>
 800ac2c:	9b01      	ldr	r3, [sp, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	bfc8      	it	gt
 800ac32:	461d      	movgt	r5, r3
 800ac34:	9b00      	ldr	r3, [sp, #0]
 800ac36:	bfd8      	it	le
 800ac38:	2501      	movle	r5, #1
 800ac3a:	441d      	add	r5, r3
 800ac3c:	f04f 0800 	mov.w	r8, #0
 800ac40:	4651      	mov	r1, sl
 800ac42:	2201      	movs	r2, #1
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fb8b 	bl	800b360 <__lshift>
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	f000 fbf3 	bl	800b438 <__mcmp>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	dc96      	bgt.n	800ab84 <_dtoa_r+0xabc>
 800ac56:	d102      	bne.n	800ac5e <_dtoa_r+0xb96>
 800ac58:	f019 0f01 	tst.w	r9, #1
 800ac5c:	d192      	bne.n	800ab84 <_dtoa_r+0xabc>
 800ac5e:	462b      	mov	r3, r5
 800ac60:	461d      	mov	r5, r3
 800ac62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac66:	2a30      	cmp	r2, #48	; 0x30
 800ac68:	d0fa      	beq.n	800ac60 <_dtoa_r+0xb98>
 800ac6a:	e6dd      	b.n	800aa28 <_dtoa_r+0x960>
 800ac6c:	9a00      	ldr	r2, [sp, #0]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d189      	bne.n	800ab86 <_dtoa_r+0xabe>
 800ac72:	f10b 0b01 	add.w	fp, fp, #1
 800ac76:	2331      	movs	r3, #49	; 0x31
 800ac78:	e796      	b.n	800aba8 <_dtoa_r+0xae0>
 800ac7a:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <_dtoa_r+0xbdc>)
 800ac7c:	f7ff ba99 	b.w	800a1b2 <_dtoa_r+0xea>
 800ac80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f47f aa6d 	bne.w	800a162 <_dtoa_r+0x9a>
 800ac88:	4b07      	ldr	r3, [pc, #28]	; (800aca8 <_dtoa_r+0xbe0>)
 800ac8a:	f7ff ba92 	b.w	800a1b2 <_dtoa_r+0xea>
 800ac8e:	9b01      	ldr	r3, [sp, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dcb5      	bgt.n	800ac00 <_dtoa_r+0xb38>
 800ac94:	9b07      	ldr	r3, [sp, #28]
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	f73f aeb1 	bgt.w	800a9fe <_dtoa_r+0x936>
 800ac9c:	e7b0      	b.n	800ac00 <_dtoa_r+0xb38>
 800ac9e:	bf00      	nop
 800aca0:	0800dc9d 	.word	0x0800dc9d
 800aca4:	0800dbf8 	.word	0x0800dbf8
 800aca8:	0800dc21 	.word	0x0800dc21

0800acac <_free_r>:
 800acac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acae:	2900      	cmp	r1, #0
 800acb0:	d044      	beq.n	800ad3c <_free_r+0x90>
 800acb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb6:	9001      	str	r0, [sp, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f1a1 0404 	sub.w	r4, r1, #4
 800acbe:	bfb8      	it	lt
 800acc0:	18e4      	addlt	r4, r4, r3
 800acc2:	f000 f8e7 	bl	800ae94 <__malloc_lock>
 800acc6:	4a1e      	ldr	r2, [pc, #120]	; (800ad40 <_free_r+0x94>)
 800acc8:	9801      	ldr	r0, [sp, #4]
 800acca:	6813      	ldr	r3, [r2, #0]
 800accc:	b933      	cbnz	r3, 800acdc <_free_r+0x30>
 800acce:	6063      	str	r3, [r4, #4]
 800acd0:	6014      	str	r4, [r2, #0]
 800acd2:	b003      	add	sp, #12
 800acd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acd8:	f000 b8e2 	b.w	800aea0 <__malloc_unlock>
 800acdc:	42a3      	cmp	r3, r4
 800acde:	d908      	bls.n	800acf2 <_free_r+0x46>
 800ace0:	6825      	ldr	r5, [r4, #0]
 800ace2:	1961      	adds	r1, r4, r5
 800ace4:	428b      	cmp	r3, r1
 800ace6:	bf01      	itttt	eq
 800ace8:	6819      	ldreq	r1, [r3, #0]
 800acea:	685b      	ldreq	r3, [r3, #4]
 800acec:	1949      	addeq	r1, r1, r5
 800acee:	6021      	streq	r1, [r4, #0]
 800acf0:	e7ed      	b.n	800acce <_free_r+0x22>
 800acf2:	461a      	mov	r2, r3
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	b10b      	cbz	r3, 800acfc <_free_r+0x50>
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	d9fa      	bls.n	800acf2 <_free_r+0x46>
 800acfc:	6811      	ldr	r1, [r2, #0]
 800acfe:	1855      	adds	r5, r2, r1
 800ad00:	42a5      	cmp	r5, r4
 800ad02:	d10b      	bne.n	800ad1c <_free_r+0x70>
 800ad04:	6824      	ldr	r4, [r4, #0]
 800ad06:	4421      	add	r1, r4
 800ad08:	1854      	adds	r4, r2, r1
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	6011      	str	r1, [r2, #0]
 800ad0e:	d1e0      	bne.n	800acd2 <_free_r+0x26>
 800ad10:	681c      	ldr	r4, [r3, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	6053      	str	r3, [r2, #4]
 800ad16:	440c      	add	r4, r1
 800ad18:	6014      	str	r4, [r2, #0]
 800ad1a:	e7da      	b.n	800acd2 <_free_r+0x26>
 800ad1c:	d902      	bls.n	800ad24 <_free_r+0x78>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	6003      	str	r3, [r0, #0]
 800ad22:	e7d6      	b.n	800acd2 <_free_r+0x26>
 800ad24:	6825      	ldr	r5, [r4, #0]
 800ad26:	1961      	adds	r1, r4, r5
 800ad28:	428b      	cmp	r3, r1
 800ad2a:	bf04      	itt	eq
 800ad2c:	6819      	ldreq	r1, [r3, #0]
 800ad2e:	685b      	ldreq	r3, [r3, #4]
 800ad30:	6063      	str	r3, [r4, #4]
 800ad32:	bf04      	itt	eq
 800ad34:	1949      	addeq	r1, r1, r5
 800ad36:	6021      	streq	r1, [r4, #0]
 800ad38:	6054      	str	r4, [r2, #4]
 800ad3a:	e7ca      	b.n	800acd2 <_free_r+0x26>
 800ad3c:	b003      	add	sp, #12
 800ad3e:	bd30      	pop	{r4, r5, pc}
 800ad40:	20005930 	.word	0x20005930

0800ad44 <malloc>:
 800ad44:	4b02      	ldr	r3, [pc, #8]	; (800ad50 <malloc+0xc>)
 800ad46:	4601      	mov	r1, r0
 800ad48:	6818      	ldr	r0, [r3, #0]
 800ad4a:	f000 b823 	b.w	800ad94 <_malloc_r>
 800ad4e:	bf00      	nop
 800ad50:	20000098 	.word	0x20000098

0800ad54 <sbrk_aligned>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	4e0e      	ldr	r6, [pc, #56]	; (800ad90 <sbrk_aligned+0x3c>)
 800ad58:	460c      	mov	r4, r1
 800ad5a:	6831      	ldr	r1, [r6, #0]
 800ad5c:	4605      	mov	r5, r0
 800ad5e:	b911      	cbnz	r1, 800ad66 <sbrk_aligned+0x12>
 800ad60:	f001 fff4 	bl	800cd4c <_sbrk_r>
 800ad64:	6030      	str	r0, [r6, #0]
 800ad66:	4621      	mov	r1, r4
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f001 ffef 	bl	800cd4c <_sbrk_r>
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	d00a      	beq.n	800ad88 <sbrk_aligned+0x34>
 800ad72:	1cc4      	adds	r4, r0, #3
 800ad74:	f024 0403 	bic.w	r4, r4, #3
 800ad78:	42a0      	cmp	r0, r4
 800ad7a:	d007      	beq.n	800ad8c <sbrk_aligned+0x38>
 800ad7c:	1a21      	subs	r1, r4, r0
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f001 ffe4 	bl	800cd4c <_sbrk_r>
 800ad84:	3001      	adds	r0, #1
 800ad86:	d101      	bne.n	800ad8c <sbrk_aligned+0x38>
 800ad88:	f04f 34ff 	mov.w	r4, #4294967295
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	20005934 	.word	0x20005934

0800ad94 <_malloc_r>:
 800ad94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad98:	1ccd      	adds	r5, r1, #3
 800ad9a:	f025 0503 	bic.w	r5, r5, #3
 800ad9e:	3508      	adds	r5, #8
 800ada0:	2d0c      	cmp	r5, #12
 800ada2:	bf38      	it	cc
 800ada4:	250c      	movcc	r5, #12
 800ada6:	2d00      	cmp	r5, #0
 800ada8:	4607      	mov	r7, r0
 800adaa:	db01      	blt.n	800adb0 <_malloc_r+0x1c>
 800adac:	42a9      	cmp	r1, r5
 800adae:	d905      	bls.n	800adbc <_malloc_r+0x28>
 800adb0:	230c      	movs	r3, #12
 800adb2:	603b      	str	r3, [r7, #0]
 800adb4:	2600      	movs	r6, #0
 800adb6:	4630      	mov	r0, r6
 800adb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ae90 <_malloc_r+0xfc>
 800adc0:	f000 f868 	bl	800ae94 <__malloc_lock>
 800adc4:	f8d8 3000 	ldr.w	r3, [r8]
 800adc8:	461c      	mov	r4, r3
 800adca:	bb5c      	cbnz	r4, 800ae24 <_malloc_r+0x90>
 800adcc:	4629      	mov	r1, r5
 800adce:	4638      	mov	r0, r7
 800add0:	f7ff ffc0 	bl	800ad54 <sbrk_aligned>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	4604      	mov	r4, r0
 800add8:	d155      	bne.n	800ae86 <_malloc_r+0xf2>
 800adda:	f8d8 4000 	ldr.w	r4, [r8]
 800adde:	4626      	mov	r6, r4
 800ade0:	2e00      	cmp	r6, #0
 800ade2:	d145      	bne.n	800ae70 <_malloc_r+0xdc>
 800ade4:	2c00      	cmp	r4, #0
 800ade6:	d048      	beq.n	800ae7a <_malloc_r+0xe6>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	4631      	mov	r1, r6
 800adec:	4638      	mov	r0, r7
 800adee:	eb04 0903 	add.w	r9, r4, r3
 800adf2:	f001 ffab 	bl	800cd4c <_sbrk_r>
 800adf6:	4581      	cmp	r9, r0
 800adf8:	d13f      	bne.n	800ae7a <_malloc_r+0xe6>
 800adfa:	6821      	ldr	r1, [r4, #0]
 800adfc:	1a6d      	subs	r5, r5, r1
 800adfe:	4629      	mov	r1, r5
 800ae00:	4638      	mov	r0, r7
 800ae02:	f7ff ffa7 	bl	800ad54 <sbrk_aligned>
 800ae06:	3001      	adds	r0, #1
 800ae08:	d037      	beq.n	800ae7a <_malloc_r+0xe6>
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	442b      	add	r3, r5
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	f8d8 3000 	ldr.w	r3, [r8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d038      	beq.n	800ae8a <_malloc_r+0xf6>
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	42a2      	cmp	r2, r4
 800ae1c:	d12b      	bne.n	800ae76 <_malloc_r+0xe2>
 800ae1e:	2200      	movs	r2, #0
 800ae20:	605a      	str	r2, [r3, #4]
 800ae22:	e00f      	b.n	800ae44 <_malloc_r+0xb0>
 800ae24:	6822      	ldr	r2, [r4, #0]
 800ae26:	1b52      	subs	r2, r2, r5
 800ae28:	d41f      	bmi.n	800ae6a <_malloc_r+0xd6>
 800ae2a:	2a0b      	cmp	r2, #11
 800ae2c:	d917      	bls.n	800ae5e <_malloc_r+0xca>
 800ae2e:	1961      	adds	r1, r4, r5
 800ae30:	42a3      	cmp	r3, r4
 800ae32:	6025      	str	r5, [r4, #0]
 800ae34:	bf18      	it	ne
 800ae36:	6059      	strne	r1, [r3, #4]
 800ae38:	6863      	ldr	r3, [r4, #4]
 800ae3a:	bf08      	it	eq
 800ae3c:	f8c8 1000 	streq.w	r1, [r8]
 800ae40:	5162      	str	r2, [r4, r5]
 800ae42:	604b      	str	r3, [r1, #4]
 800ae44:	4638      	mov	r0, r7
 800ae46:	f104 060b 	add.w	r6, r4, #11
 800ae4a:	f000 f829 	bl	800aea0 <__malloc_unlock>
 800ae4e:	f026 0607 	bic.w	r6, r6, #7
 800ae52:	1d23      	adds	r3, r4, #4
 800ae54:	1af2      	subs	r2, r6, r3
 800ae56:	d0ae      	beq.n	800adb6 <_malloc_r+0x22>
 800ae58:	1b9b      	subs	r3, r3, r6
 800ae5a:	50a3      	str	r3, [r4, r2]
 800ae5c:	e7ab      	b.n	800adb6 <_malloc_r+0x22>
 800ae5e:	42a3      	cmp	r3, r4
 800ae60:	6862      	ldr	r2, [r4, #4]
 800ae62:	d1dd      	bne.n	800ae20 <_malloc_r+0x8c>
 800ae64:	f8c8 2000 	str.w	r2, [r8]
 800ae68:	e7ec      	b.n	800ae44 <_malloc_r+0xb0>
 800ae6a:	4623      	mov	r3, r4
 800ae6c:	6864      	ldr	r4, [r4, #4]
 800ae6e:	e7ac      	b.n	800adca <_malloc_r+0x36>
 800ae70:	4634      	mov	r4, r6
 800ae72:	6876      	ldr	r6, [r6, #4]
 800ae74:	e7b4      	b.n	800ade0 <_malloc_r+0x4c>
 800ae76:	4613      	mov	r3, r2
 800ae78:	e7cc      	b.n	800ae14 <_malloc_r+0x80>
 800ae7a:	230c      	movs	r3, #12
 800ae7c:	603b      	str	r3, [r7, #0]
 800ae7e:	4638      	mov	r0, r7
 800ae80:	f000 f80e 	bl	800aea0 <__malloc_unlock>
 800ae84:	e797      	b.n	800adb6 <_malloc_r+0x22>
 800ae86:	6025      	str	r5, [r4, #0]
 800ae88:	e7dc      	b.n	800ae44 <_malloc_r+0xb0>
 800ae8a:	605b      	str	r3, [r3, #4]
 800ae8c:	deff      	udf	#255	; 0xff
 800ae8e:	bf00      	nop
 800ae90:	20005930 	.word	0x20005930

0800ae94 <__malloc_lock>:
 800ae94:	4801      	ldr	r0, [pc, #4]	; (800ae9c <__malloc_lock+0x8>)
 800ae96:	f7ff b879 	b.w	8009f8c <__retarget_lock_acquire_recursive>
 800ae9a:	bf00      	nop
 800ae9c:	2000592c 	.word	0x2000592c

0800aea0 <__malloc_unlock>:
 800aea0:	4801      	ldr	r0, [pc, #4]	; (800aea8 <__malloc_unlock+0x8>)
 800aea2:	f7ff b874 	b.w	8009f8e <__retarget_lock_release_recursive>
 800aea6:	bf00      	nop
 800aea8:	2000592c 	.word	0x2000592c

0800aeac <_Balloc>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	69c6      	ldr	r6, [r0, #28]
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	460d      	mov	r5, r1
 800aeb4:	b976      	cbnz	r6, 800aed4 <_Balloc+0x28>
 800aeb6:	2010      	movs	r0, #16
 800aeb8:	f7ff ff44 	bl	800ad44 <malloc>
 800aebc:	4602      	mov	r2, r0
 800aebe:	61e0      	str	r0, [r4, #28]
 800aec0:	b920      	cbnz	r0, 800aecc <_Balloc+0x20>
 800aec2:	4b18      	ldr	r3, [pc, #96]	; (800af24 <_Balloc+0x78>)
 800aec4:	4818      	ldr	r0, [pc, #96]	; (800af28 <_Balloc+0x7c>)
 800aec6:	216b      	movs	r1, #107	; 0x6b
 800aec8:	f001 ff5a 	bl	800cd80 <__assert_func>
 800aecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aed0:	6006      	str	r6, [r0, #0]
 800aed2:	60c6      	str	r6, [r0, #12]
 800aed4:	69e6      	ldr	r6, [r4, #28]
 800aed6:	68f3      	ldr	r3, [r6, #12]
 800aed8:	b183      	cbz	r3, 800aefc <_Balloc+0x50>
 800aeda:	69e3      	ldr	r3, [r4, #28]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aee2:	b9b8      	cbnz	r0, 800af14 <_Balloc+0x68>
 800aee4:	2101      	movs	r1, #1
 800aee6:	fa01 f605 	lsl.w	r6, r1, r5
 800aeea:	1d72      	adds	r2, r6, #5
 800aeec:	0092      	lsls	r2, r2, #2
 800aeee:	4620      	mov	r0, r4
 800aef0:	f001 ff64 	bl	800cdbc <_calloc_r>
 800aef4:	b160      	cbz	r0, 800af10 <_Balloc+0x64>
 800aef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aefa:	e00e      	b.n	800af1a <_Balloc+0x6e>
 800aefc:	2221      	movs	r2, #33	; 0x21
 800aefe:	2104      	movs	r1, #4
 800af00:	4620      	mov	r0, r4
 800af02:	f001 ff5b 	bl	800cdbc <_calloc_r>
 800af06:	69e3      	ldr	r3, [r4, #28]
 800af08:	60f0      	str	r0, [r6, #12]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1e4      	bne.n	800aeda <_Balloc+0x2e>
 800af10:	2000      	movs	r0, #0
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	6802      	ldr	r2, [r0, #0]
 800af16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af1a:	2300      	movs	r3, #0
 800af1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af20:	e7f7      	b.n	800af12 <_Balloc+0x66>
 800af22:	bf00      	nop
 800af24:	0800dc2e 	.word	0x0800dc2e
 800af28:	0800dcae 	.word	0x0800dcae

0800af2c <_Bfree>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	69c6      	ldr	r6, [r0, #28]
 800af30:	4605      	mov	r5, r0
 800af32:	460c      	mov	r4, r1
 800af34:	b976      	cbnz	r6, 800af54 <_Bfree+0x28>
 800af36:	2010      	movs	r0, #16
 800af38:	f7ff ff04 	bl	800ad44 <malloc>
 800af3c:	4602      	mov	r2, r0
 800af3e:	61e8      	str	r0, [r5, #28]
 800af40:	b920      	cbnz	r0, 800af4c <_Bfree+0x20>
 800af42:	4b09      	ldr	r3, [pc, #36]	; (800af68 <_Bfree+0x3c>)
 800af44:	4809      	ldr	r0, [pc, #36]	; (800af6c <_Bfree+0x40>)
 800af46:	218f      	movs	r1, #143	; 0x8f
 800af48:	f001 ff1a 	bl	800cd80 <__assert_func>
 800af4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af50:	6006      	str	r6, [r0, #0]
 800af52:	60c6      	str	r6, [r0, #12]
 800af54:	b13c      	cbz	r4, 800af66 <_Bfree+0x3a>
 800af56:	69eb      	ldr	r3, [r5, #28]
 800af58:	6862      	ldr	r2, [r4, #4]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af60:	6021      	str	r1, [r4, #0]
 800af62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	0800dc2e 	.word	0x0800dc2e
 800af6c:	0800dcae 	.word	0x0800dcae

0800af70 <__multadd>:
 800af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af74:	690d      	ldr	r5, [r1, #16]
 800af76:	4607      	mov	r7, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	461e      	mov	r6, r3
 800af7c:	f101 0c14 	add.w	ip, r1, #20
 800af80:	2000      	movs	r0, #0
 800af82:	f8dc 3000 	ldr.w	r3, [ip]
 800af86:	b299      	uxth	r1, r3
 800af88:	fb02 6101 	mla	r1, r2, r1, r6
 800af8c:	0c1e      	lsrs	r6, r3, #16
 800af8e:	0c0b      	lsrs	r3, r1, #16
 800af90:	fb02 3306 	mla	r3, r2, r6, r3
 800af94:	b289      	uxth	r1, r1
 800af96:	3001      	adds	r0, #1
 800af98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af9c:	4285      	cmp	r5, r0
 800af9e:	f84c 1b04 	str.w	r1, [ip], #4
 800afa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afa6:	dcec      	bgt.n	800af82 <__multadd+0x12>
 800afa8:	b30e      	cbz	r6, 800afee <__multadd+0x7e>
 800afaa:	68a3      	ldr	r3, [r4, #8]
 800afac:	42ab      	cmp	r3, r5
 800afae:	dc19      	bgt.n	800afe4 <__multadd+0x74>
 800afb0:	6861      	ldr	r1, [r4, #4]
 800afb2:	4638      	mov	r0, r7
 800afb4:	3101      	adds	r1, #1
 800afb6:	f7ff ff79 	bl	800aeac <_Balloc>
 800afba:	4680      	mov	r8, r0
 800afbc:	b928      	cbnz	r0, 800afca <__multadd+0x5a>
 800afbe:	4602      	mov	r2, r0
 800afc0:	4b0c      	ldr	r3, [pc, #48]	; (800aff4 <__multadd+0x84>)
 800afc2:	480d      	ldr	r0, [pc, #52]	; (800aff8 <__multadd+0x88>)
 800afc4:	21ba      	movs	r1, #186	; 0xba
 800afc6:	f001 fedb 	bl	800cd80 <__assert_func>
 800afca:	6922      	ldr	r2, [r4, #16]
 800afcc:	3202      	adds	r2, #2
 800afce:	f104 010c 	add.w	r1, r4, #12
 800afd2:	0092      	lsls	r2, r2, #2
 800afd4:	300c      	adds	r0, #12
 800afd6:	f7fe ffdb 	bl	8009f90 <memcpy>
 800afda:	4621      	mov	r1, r4
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff ffa5 	bl	800af2c <_Bfree>
 800afe2:	4644      	mov	r4, r8
 800afe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afe8:	3501      	adds	r5, #1
 800afea:	615e      	str	r6, [r3, #20]
 800afec:	6125      	str	r5, [r4, #16]
 800afee:	4620      	mov	r0, r4
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff4:	0800dc9d 	.word	0x0800dc9d
 800aff8:	0800dcae 	.word	0x0800dcae

0800affc <__s2b>:
 800affc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b000:	460c      	mov	r4, r1
 800b002:	4615      	mov	r5, r2
 800b004:	461f      	mov	r7, r3
 800b006:	2209      	movs	r2, #9
 800b008:	3308      	adds	r3, #8
 800b00a:	4606      	mov	r6, r0
 800b00c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b010:	2100      	movs	r1, #0
 800b012:	2201      	movs	r2, #1
 800b014:	429a      	cmp	r2, r3
 800b016:	db09      	blt.n	800b02c <__s2b+0x30>
 800b018:	4630      	mov	r0, r6
 800b01a:	f7ff ff47 	bl	800aeac <_Balloc>
 800b01e:	b940      	cbnz	r0, 800b032 <__s2b+0x36>
 800b020:	4602      	mov	r2, r0
 800b022:	4b19      	ldr	r3, [pc, #100]	; (800b088 <__s2b+0x8c>)
 800b024:	4819      	ldr	r0, [pc, #100]	; (800b08c <__s2b+0x90>)
 800b026:	21d3      	movs	r1, #211	; 0xd3
 800b028:	f001 feaa 	bl	800cd80 <__assert_func>
 800b02c:	0052      	lsls	r2, r2, #1
 800b02e:	3101      	adds	r1, #1
 800b030:	e7f0      	b.n	800b014 <__s2b+0x18>
 800b032:	9b08      	ldr	r3, [sp, #32]
 800b034:	6143      	str	r3, [r0, #20]
 800b036:	2d09      	cmp	r5, #9
 800b038:	f04f 0301 	mov.w	r3, #1
 800b03c:	6103      	str	r3, [r0, #16]
 800b03e:	dd16      	ble.n	800b06e <__s2b+0x72>
 800b040:	f104 0909 	add.w	r9, r4, #9
 800b044:	46c8      	mov	r8, r9
 800b046:	442c      	add	r4, r5
 800b048:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b04c:	4601      	mov	r1, r0
 800b04e:	3b30      	subs	r3, #48	; 0x30
 800b050:	220a      	movs	r2, #10
 800b052:	4630      	mov	r0, r6
 800b054:	f7ff ff8c 	bl	800af70 <__multadd>
 800b058:	45a0      	cmp	r8, r4
 800b05a:	d1f5      	bne.n	800b048 <__s2b+0x4c>
 800b05c:	f1a5 0408 	sub.w	r4, r5, #8
 800b060:	444c      	add	r4, r9
 800b062:	1b2d      	subs	r5, r5, r4
 800b064:	1963      	adds	r3, r4, r5
 800b066:	42bb      	cmp	r3, r7
 800b068:	db04      	blt.n	800b074 <__s2b+0x78>
 800b06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06e:	340a      	adds	r4, #10
 800b070:	2509      	movs	r5, #9
 800b072:	e7f6      	b.n	800b062 <__s2b+0x66>
 800b074:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b078:	4601      	mov	r1, r0
 800b07a:	3b30      	subs	r3, #48	; 0x30
 800b07c:	220a      	movs	r2, #10
 800b07e:	4630      	mov	r0, r6
 800b080:	f7ff ff76 	bl	800af70 <__multadd>
 800b084:	e7ee      	b.n	800b064 <__s2b+0x68>
 800b086:	bf00      	nop
 800b088:	0800dc9d 	.word	0x0800dc9d
 800b08c:	0800dcae 	.word	0x0800dcae

0800b090 <__hi0bits>:
 800b090:	0c03      	lsrs	r3, r0, #16
 800b092:	041b      	lsls	r3, r3, #16
 800b094:	b9d3      	cbnz	r3, 800b0cc <__hi0bits+0x3c>
 800b096:	0400      	lsls	r0, r0, #16
 800b098:	2310      	movs	r3, #16
 800b09a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b09e:	bf04      	itt	eq
 800b0a0:	0200      	lsleq	r0, r0, #8
 800b0a2:	3308      	addeq	r3, #8
 800b0a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0a8:	bf04      	itt	eq
 800b0aa:	0100      	lsleq	r0, r0, #4
 800b0ac:	3304      	addeq	r3, #4
 800b0ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0b2:	bf04      	itt	eq
 800b0b4:	0080      	lsleq	r0, r0, #2
 800b0b6:	3302      	addeq	r3, #2
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	db05      	blt.n	800b0c8 <__hi0bits+0x38>
 800b0bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0c0:	f103 0301 	add.w	r3, r3, #1
 800b0c4:	bf08      	it	eq
 800b0c6:	2320      	moveq	r3, #32
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	4770      	bx	lr
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	e7e4      	b.n	800b09a <__hi0bits+0xa>

0800b0d0 <__lo0bits>:
 800b0d0:	6803      	ldr	r3, [r0, #0]
 800b0d2:	f013 0207 	ands.w	r2, r3, #7
 800b0d6:	d00c      	beq.n	800b0f2 <__lo0bits+0x22>
 800b0d8:	07d9      	lsls	r1, r3, #31
 800b0da:	d422      	bmi.n	800b122 <__lo0bits+0x52>
 800b0dc:	079a      	lsls	r2, r3, #30
 800b0de:	bf49      	itett	mi
 800b0e0:	085b      	lsrmi	r3, r3, #1
 800b0e2:	089b      	lsrpl	r3, r3, #2
 800b0e4:	6003      	strmi	r3, [r0, #0]
 800b0e6:	2201      	movmi	r2, #1
 800b0e8:	bf5c      	itt	pl
 800b0ea:	6003      	strpl	r3, [r0, #0]
 800b0ec:	2202      	movpl	r2, #2
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	4770      	bx	lr
 800b0f2:	b299      	uxth	r1, r3
 800b0f4:	b909      	cbnz	r1, 800b0fa <__lo0bits+0x2a>
 800b0f6:	0c1b      	lsrs	r3, r3, #16
 800b0f8:	2210      	movs	r2, #16
 800b0fa:	b2d9      	uxtb	r1, r3
 800b0fc:	b909      	cbnz	r1, 800b102 <__lo0bits+0x32>
 800b0fe:	3208      	adds	r2, #8
 800b100:	0a1b      	lsrs	r3, r3, #8
 800b102:	0719      	lsls	r1, r3, #28
 800b104:	bf04      	itt	eq
 800b106:	091b      	lsreq	r3, r3, #4
 800b108:	3204      	addeq	r2, #4
 800b10a:	0799      	lsls	r1, r3, #30
 800b10c:	bf04      	itt	eq
 800b10e:	089b      	lsreq	r3, r3, #2
 800b110:	3202      	addeq	r2, #2
 800b112:	07d9      	lsls	r1, r3, #31
 800b114:	d403      	bmi.n	800b11e <__lo0bits+0x4e>
 800b116:	085b      	lsrs	r3, r3, #1
 800b118:	f102 0201 	add.w	r2, r2, #1
 800b11c:	d003      	beq.n	800b126 <__lo0bits+0x56>
 800b11e:	6003      	str	r3, [r0, #0]
 800b120:	e7e5      	b.n	800b0ee <__lo0bits+0x1e>
 800b122:	2200      	movs	r2, #0
 800b124:	e7e3      	b.n	800b0ee <__lo0bits+0x1e>
 800b126:	2220      	movs	r2, #32
 800b128:	e7e1      	b.n	800b0ee <__lo0bits+0x1e>
	...

0800b12c <__i2b>:
 800b12c:	b510      	push	{r4, lr}
 800b12e:	460c      	mov	r4, r1
 800b130:	2101      	movs	r1, #1
 800b132:	f7ff febb 	bl	800aeac <_Balloc>
 800b136:	4602      	mov	r2, r0
 800b138:	b928      	cbnz	r0, 800b146 <__i2b+0x1a>
 800b13a:	4b05      	ldr	r3, [pc, #20]	; (800b150 <__i2b+0x24>)
 800b13c:	4805      	ldr	r0, [pc, #20]	; (800b154 <__i2b+0x28>)
 800b13e:	f240 1145 	movw	r1, #325	; 0x145
 800b142:	f001 fe1d 	bl	800cd80 <__assert_func>
 800b146:	2301      	movs	r3, #1
 800b148:	6144      	str	r4, [r0, #20]
 800b14a:	6103      	str	r3, [r0, #16]
 800b14c:	bd10      	pop	{r4, pc}
 800b14e:	bf00      	nop
 800b150:	0800dc9d 	.word	0x0800dc9d
 800b154:	0800dcae 	.word	0x0800dcae

0800b158 <__multiply>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	4691      	mov	r9, r2
 800b15e:	690a      	ldr	r2, [r1, #16]
 800b160:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b164:	429a      	cmp	r2, r3
 800b166:	bfb8      	it	lt
 800b168:	460b      	movlt	r3, r1
 800b16a:	460c      	mov	r4, r1
 800b16c:	bfbc      	itt	lt
 800b16e:	464c      	movlt	r4, r9
 800b170:	4699      	movlt	r9, r3
 800b172:	6927      	ldr	r7, [r4, #16]
 800b174:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b178:	68a3      	ldr	r3, [r4, #8]
 800b17a:	6861      	ldr	r1, [r4, #4]
 800b17c:	eb07 060a 	add.w	r6, r7, sl
 800b180:	42b3      	cmp	r3, r6
 800b182:	b085      	sub	sp, #20
 800b184:	bfb8      	it	lt
 800b186:	3101      	addlt	r1, #1
 800b188:	f7ff fe90 	bl	800aeac <_Balloc>
 800b18c:	b930      	cbnz	r0, 800b19c <__multiply+0x44>
 800b18e:	4602      	mov	r2, r0
 800b190:	4b44      	ldr	r3, [pc, #272]	; (800b2a4 <__multiply+0x14c>)
 800b192:	4845      	ldr	r0, [pc, #276]	; (800b2a8 <__multiply+0x150>)
 800b194:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b198:	f001 fdf2 	bl	800cd80 <__assert_func>
 800b19c:	f100 0514 	add.w	r5, r0, #20
 800b1a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1a4:	462b      	mov	r3, r5
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	4543      	cmp	r3, r8
 800b1aa:	d321      	bcc.n	800b1f0 <__multiply+0x98>
 800b1ac:	f104 0314 	add.w	r3, r4, #20
 800b1b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1b4:	f109 0314 	add.w	r3, r9, #20
 800b1b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1bc:	9202      	str	r2, [sp, #8]
 800b1be:	1b3a      	subs	r2, r7, r4
 800b1c0:	3a15      	subs	r2, #21
 800b1c2:	f022 0203 	bic.w	r2, r2, #3
 800b1c6:	3204      	adds	r2, #4
 800b1c8:	f104 0115 	add.w	r1, r4, #21
 800b1cc:	428f      	cmp	r7, r1
 800b1ce:	bf38      	it	cc
 800b1d0:	2204      	movcc	r2, #4
 800b1d2:	9201      	str	r2, [sp, #4]
 800b1d4:	9a02      	ldr	r2, [sp, #8]
 800b1d6:	9303      	str	r3, [sp, #12]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d80c      	bhi.n	800b1f6 <__multiply+0x9e>
 800b1dc:	2e00      	cmp	r6, #0
 800b1de:	dd03      	ble.n	800b1e8 <__multiply+0x90>
 800b1e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d05b      	beq.n	800b2a0 <__multiply+0x148>
 800b1e8:	6106      	str	r6, [r0, #16]
 800b1ea:	b005      	add	sp, #20
 800b1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f0:	f843 2b04 	str.w	r2, [r3], #4
 800b1f4:	e7d8      	b.n	800b1a8 <__multiply+0x50>
 800b1f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1fa:	f1ba 0f00 	cmp.w	sl, #0
 800b1fe:	d024      	beq.n	800b24a <__multiply+0xf2>
 800b200:	f104 0e14 	add.w	lr, r4, #20
 800b204:	46a9      	mov	r9, r5
 800b206:	f04f 0c00 	mov.w	ip, #0
 800b20a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b20e:	f8d9 1000 	ldr.w	r1, [r9]
 800b212:	fa1f fb82 	uxth.w	fp, r2
 800b216:	b289      	uxth	r1, r1
 800b218:	fb0a 110b 	mla	r1, sl, fp, r1
 800b21c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b220:	f8d9 2000 	ldr.w	r2, [r9]
 800b224:	4461      	add	r1, ip
 800b226:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b22a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b22e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b232:	b289      	uxth	r1, r1
 800b234:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b238:	4577      	cmp	r7, lr
 800b23a:	f849 1b04 	str.w	r1, [r9], #4
 800b23e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b242:	d8e2      	bhi.n	800b20a <__multiply+0xb2>
 800b244:	9a01      	ldr	r2, [sp, #4]
 800b246:	f845 c002 	str.w	ip, [r5, r2]
 800b24a:	9a03      	ldr	r2, [sp, #12]
 800b24c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b250:	3304      	adds	r3, #4
 800b252:	f1b9 0f00 	cmp.w	r9, #0
 800b256:	d021      	beq.n	800b29c <__multiply+0x144>
 800b258:	6829      	ldr	r1, [r5, #0]
 800b25a:	f104 0c14 	add.w	ip, r4, #20
 800b25e:	46ae      	mov	lr, r5
 800b260:	f04f 0a00 	mov.w	sl, #0
 800b264:	f8bc b000 	ldrh.w	fp, [ip]
 800b268:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b26c:	fb09 220b 	mla	r2, r9, fp, r2
 800b270:	4452      	add	r2, sl
 800b272:	b289      	uxth	r1, r1
 800b274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b278:	f84e 1b04 	str.w	r1, [lr], #4
 800b27c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b280:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b284:	f8be 1000 	ldrh.w	r1, [lr]
 800b288:	fb09 110a 	mla	r1, r9, sl, r1
 800b28c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b290:	4567      	cmp	r7, ip
 800b292:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b296:	d8e5      	bhi.n	800b264 <__multiply+0x10c>
 800b298:	9a01      	ldr	r2, [sp, #4]
 800b29a:	50a9      	str	r1, [r5, r2]
 800b29c:	3504      	adds	r5, #4
 800b29e:	e799      	b.n	800b1d4 <__multiply+0x7c>
 800b2a0:	3e01      	subs	r6, #1
 800b2a2:	e79b      	b.n	800b1dc <__multiply+0x84>
 800b2a4:	0800dc9d 	.word	0x0800dc9d
 800b2a8:	0800dcae 	.word	0x0800dcae

0800b2ac <__pow5mult>:
 800b2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b0:	4615      	mov	r5, r2
 800b2b2:	f012 0203 	ands.w	r2, r2, #3
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	460f      	mov	r7, r1
 800b2ba:	d007      	beq.n	800b2cc <__pow5mult+0x20>
 800b2bc:	4c25      	ldr	r4, [pc, #148]	; (800b354 <__pow5mult+0xa8>)
 800b2be:	3a01      	subs	r2, #1
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2c6:	f7ff fe53 	bl	800af70 <__multadd>
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	10ad      	asrs	r5, r5, #2
 800b2ce:	d03d      	beq.n	800b34c <__pow5mult+0xa0>
 800b2d0:	69f4      	ldr	r4, [r6, #28]
 800b2d2:	b97c      	cbnz	r4, 800b2f4 <__pow5mult+0x48>
 800b2d4:	2010      	movs	r0, #16
 800b2d6:	f7ff fd35 	bl	800ad44 <malloc>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	61f0      	str	r0, [r6, #28]
 800b2de:	b928      	cbnz	r0, 800b2ec <__pow5mult+0x40>
 800b2e0:	4b1d      	ldr	r3, [pc, #116]	; (800b358 <__pow5mult+0xac>)
 800b2e2:	481e      	ldr	r0, [pc, #120]	; (800b35c <__pow5mult+0xb0>)
 800b2e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b2e8:	f001 fd4a 	bl	800cd80 <__assert_func>
 800b2ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2f0:	6004      	str	r4, [r0, #0]
 800b2f2:	60c4      	str	r4, [r0, #12]
 800b2f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b2f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2fc:	b94c      	cbnz	r4, 800b312 <__pow5mult+0x66>
 800b2fe:	f240 2171 	movw	r1, #625	; 0x271
 800b302:	4630      	mov	r0, r6
 800b304:	f7ff ff12 	bl	800b12c <__i2b>
 800b308:	2300      	movs	r3, #0
 800b30a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b30e:	4604      	mov	r4, r0
 800b310:	6003      	str	r3, [r0, #0]
 800b312:	f04f 0900 	mov.w	r9, #0
 800b316:	07eb      	lsls	r3, r5, #31
 800b318:	d50a      	bpl.n	800b330 <__pow5mult+0x84>
 800b31a:	4639      	mov	r1, r7
 800b31c:	4622      	mov	r2, r4
 800b31e:	4630      	mov	r0, r6
 800b320:	f7ff ff1a 	bl	800b158 <__multiply>
 800b324:	4639      	mov	r1, r7
 800b326:	4680      	mov	r8, r0
 800b328:	4630      	mov	r0, r6
 800b32a:	f7ff fdff 	bl	800af2c <_Bfree>
 800b32e:	4647      	mov	r7, r8
 800b330:	106d      	asrs	r5, r5, #1
 800b332:	d00b      	beq.n	800b34c <__pow5mult+0xa0>
 800b334:	6820      	ldr	r0, [r4, #0]
 800b336:	b938      	cbnz	r0, 800b348 <__pow5mult+0x9c>
 800b338:	4622      	mov	r2, r4
 800b33a:	4621      	mov	r1, r4
 800b33c:	4630      	mov	r0, r6
 800b33e:	f7ff ff0b 	bl	800b158 <__multiply>
 800b342:	6020      	str	r0, [r4, #0]
 800b344:	f8c0 9000 	str.w	r9, [r0]
 800b348:	4604      	mov	r4, r0
 800b34a:	e7e4      	b.n	800b316 <__pow5mult+0x6a>
 800b34c:	4638      	mov	r0, r7
 800b34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b352:	bf00      	nop
 800b354:	0800ddf8 	.word	0x0800ddf8
 800b358:	0800dc2e 	.word	0x0800dc2e
 800b35c:	0800dcae 	.word	0x0800dcae

0800b360 <__lshift>:
 800b360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b364:	460c      	mov	r4, r1
 800b366:	6849      	ldr	r1, [r1, #4]
 800b368:	6923      	ldr	r3, [r4, #16]
 800b36a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b36e:	68a3      	ldr	r3, [r4, #8]
 800b370:	4607      	mov	r7, r0
 800b372:	4691      	mov	r9, r2
 800b374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b378:	f108 0601 	add.w	r6, r8, #1
 800b37c:	42b3      	cmp	r3, r6
 800b37e:	db0b      	blt.n	800b398 <__lshift+0x38>
 800b380:	4638      	mov	r0, r7
 800b382:	f7ff fd93 	bl	800aeac <_Balloc>
 800b386:	4605      	mov	r5, r0
 800b388:	b948      	cbnz	r0, 800b39e <__lshift+0x3e>
 800b38a:	4602      	mov	r2, r0
 800b38c:	4b28      	ldr	r3, [pc, #160]	; (800b430 <__lshift+0xd0>)
 800b38e:	4829      	ldr	r0, [pc, #164]	; (800b434 <__lshift+0xd4>)
 800b390:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b394:	f001 fcf4 	bl	800cd80 <__assert_func>
 800b398:	3101      	adds	r1, #1
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	e7ee      	b.n	800b37c <__lshift+0x1c>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f100 0114 	add.w	r1, r0, #20
 800b3a4:	f100 0210 	add.w	r2, r0, #16
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	4553      	cmp	r3, sl
 800b3ac:	db33      	blt.n	800b416 <__lshift+0xb6>
 800b3ae:	6920      	ldr	r0, [r4, #16]
 800b3b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3b4:	f104 0314 	add.w	r3, r4, #20
 800b3b8:	f019 091f 	ands.w	r9, r9, #31
 800b3bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3c4:	d02b      	beq.n	800b41e <__lshift+0xbe>
 800b3c6:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ca:	468a      	mov	sl, r1
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	6818      	ldr	r0, [r3, #0]
 800b3d0:	fa00 f009 	lsl.w	r0, r0, r9
 800b3d4:	4310      	orrs	r0, r2
 800b3d6:	f84a 0b04 	str.w	r0, [sl], #4
 800b3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3de:	459c      	cmp	ip, r3
 800b3e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3e4:	d8f3      	bhi.n	800b3ce <__lshift+0x6e>
 800b3e6:	ebac 0304 	sub.w	r3, ip, r4
 800b3ea:	3b15      	subs	r3, #21
 800b3ec:	f023 0303 	bic.w	r3, r3, #3
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	f104 0015 	add.w	r0, r4, #21
 800b3f6:	4584      	cmp	ip, r0
 800b3f8:	bf38      	it	cc
 800b3fa:	2304      	movcc	r3, #4
 800b3fc:	50ca      	str	r2, [r1, r3]
 800b3fe:	b10a      	cbz	r2, 800b404 <__lshift+0xa4>
 800b400:	f108 0602 	add.w	r6, r8, #2
 800b404:	3e01      	subs	r6, #1
 800b406:	4638      	mov	r0, r7
 800b408:	612e      	str	r6, [r5, #16]
 800b40a:	4621      	mov	r1, r4
 800b40c:	f7ff fd8e 	bl	800af2c <_Bfree>
 800b410:	4628      	mov	r0, r5
 800b412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b416:	f842 0f04 	str.w	r0, [r2, #4]!
 800b41a:	3301      	adds	r3, #1
 800b41c:	e7c5      	b.n	800b3aa <__lshift+0x4a>
 800b41e:	3904      	subs	r1, #4
 800b420:	f853 2b04 	ldr.w	r2, [r3], #4
 800b424:	f841 2f04 	str.w	r2, [r1, #4]!
 800b428:	459c      	cmp	ip, r3
 800b42a:	d8f9      	bhi.n	800b420 <__lshift+0xc0>
 800b42c:	e7ea      	b.n	800b404 <__lshift+0xa4>
 800b42e:	bf00      	nop
 800b430:	0800dc9d 	.word	0x0800dc9d
 800b434:	0800dcae 	.word	0x0800dcae

0800b438 <__mcmp>:
 800b438:	b530      	push	{r4, r5, lr}
 800b43a:	6902      	ldr	r2, [r0, #16]
 800b43c:	690c      	ldr	r4, [r1, #16]
 800b43e:	1b12      	subs	r2, r2, r4
 800b440:	d10e      	bne.n	800b460 <__mcmp+0x28>
 800b442:	f100 0314 	add.w	r3, r0, #20
 800b446:	3114      	adds	r1, #20
 800b448:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b44c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b450:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b454:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b458:	42a5      	cmp	r5, r4
 800b45a:	d003      	beq.n	800b464 <__mcmp+0x2c>
 800b45c:	d305      	bcc.n	800b46a <__mcmp+0x32>
 800b45e:	2201      	movs	r2, #1
 800b460:	4610      	mov	r0, r2
 800b462:	bd30      	pop	{r4, r5, pc}
 800b464:	4283      	cmp	r3, r0
 800b466:	d3f3      	bcc.n	800b450 <__mcmp+0x18>
 800b468:	e7fa      	b.n	800b460 <__mcmp+0x28>
 800b46a:	f04f 32ff 	mov.w	r2, #4294967295
 800b46e:	e7f7      	b.n	800b460 <__mcmp+0x28>

0800b470 <__mdiff>:
 800b470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	460c      	mov	r4, r1
 800b476:	4606      	mov	r6, r0
 800b478:	4611      	mov	r1, r2
 800b47a:	4620      	mov	r0, r4
 800b47c:	4690      	mov	r8, r2
 800b47e:	f7ff ffdb 	bl	800b438 <__mcmp>
 800b482:	1e05      	subs	r5, r0, #0
 800b484:	d110      	bne.n	800b4a8 <__mdiff+0x38>
 800b486:	4629      	mov	r1, r5
 800b488:	4630      	mov	r0, r6
 800b48a:	f7ff fd0f 	bl	800aeac <_Balloc>
 800b48e:	b930      	cbnz	r0, 800b49e <__mdiff+0x2e>
 800b490:	4b3a      	ldr	r3, [pc, #232]	; (800b57c <__mdiff+0x10c>)
 800b492:	4602      	mov	r2, r0
 800b494:	f240 2137 	movw	r1, #567	; 0x237
 800b498:	4839      	ldr	r0, [pc, #228]	; (800b580 <__mdiff+0x110>)
 800b49a:	f001 fc71 	bl	800cd80 <__assert_func>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a8:	bfa4      	itt	ge
 800b4aa:	4643      	movge	r3, r8
 800b4ac:	46a0      	movge	r8, r4
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4b4:	bfa6      	itte	ge
 800b4b6:	461c      	movge	r4, r3
 800b4b8:	2500      	movge	r5, #0
 800b4ba:	2501      	movlt	r5, #1
 800b4bc:	f7ff fcf6 	bl	800aeac <_Balloc>
 800b4c0:	b920      	cbnz	r0, 800b4cc <__mdiff+0x5c>
 800b4c2:	4b2e      	ldr	r3, [pc, #184]	; (800b57c <__mdiff+0x10c>)
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	f240 2145 	movw	r1, #581	; 0x245
 800b4ca:	e7e5      	b.n	800b498 <__mdiff+0x28>
 800b4cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4d0:	6926      	ldr	r6, [r4, #16]
 800b4d2:	60c5      	str	r5, [r0, #12]
 800b4d4:	f104 0914 	add.w	r9, r4, #20
 800b4d8:	f108 0514 	add.w	r5, r8, #20
 800b4dc:	f100 0e14 	add.w	lr, r0, #20
 800b4e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b4e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4e8:	f108 0210 	add.w	r2, r8, #16
 800b4ec:	46f2      	mov	sl, lr
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4f8:	fa11 f88b 	uxtah	r8, r1, fp
 800b4fc:	b299      	uxth	r1, r3
 800b4fe:	0c1b      	lsrs	r3, r3, #16
 800b500:	eba8 0801 	sub.w	r8, r8, r1
 800b504:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b508:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b50c:	fa1f f888 	uxth.w	r8, r8
 800b510:	1419      	asrs	r1, r3, #16
 800b512:	454e      	cmp	r6, r9
 800b514:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b518:	f84a 3b04 	str.w	r3, [sl], #4
 800b51c:	d8e8      	bhi.n	800b4f0 <__mdiff+0x80>
 800b51e:	1b33      	subs	r3, r6, r4
 800b520:	3b15      	subs	r3, #21
 800b522:	f023 0303 	bic.w	r3, r3, #3
 800b526:	3304      	adds	r3, #4
 800b528:	3415      	adds	r4, #21
 800b52a:	42a6      	cmp	r6, r4
 800b52c:	bf38      	it	cc
 800b52e:	2304      	movcc	r3, #4
 800b530:	441d      	add	r5, r3
 800b532:	4473      	add	r3, lr
 800b534:	469e      	mov	lr, r3
 800b536:	462e      	mov	r6, r5
 800b538:	4566      	cmp	r6, ip
 800b53a:	d30e      	bcc.n	800b55a <__mdiff+0xea>
 800b53c:	f10c 0203 	add.w	r2, ip, #3
 800b540:	1b52      	subs	r2, r2, r5
 800b542:	f022 0203 	bic.w	r2, r2, #3
 800b546:	3d03      	subs	r5, #3
 800b548:	45ac      	cmp	ip, r5
 800b54a:	bf38      	it	cc
 800b54c:	2200      	movcc	r2, #0
 800b54e:	4413      	add	r3, r2
 800b550:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b554:	b17a      	cbz	r2, 800b576 <__mdiff+0x106>
 800b556:	6107      	str	r7, [r0, #16]
 800b558:	e7a4      	b.n	800b4a4 <__mdiff+0x34>
 800b55a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b55e:	fa11 f288 	uxtah	r2, r1, r8
 800b562:	1414      	asrs	r4, r2, #16
 800b564:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b568:	b292      	uxth	r2, r2
 800b56a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b56e:	f84e 2b04 	str.w	r2, [lr], #4
 800b572:	1421      	asrs	r1, r4, #16
 800b574:	e7e0      	b.n	800b538 <__mdiff+0xc8>
 800b576:	3f01      	subs	r7, #1
 800b578:	e7ea      	b.n	800b550 <__mdiff+0xe0>
 800b57a:	bf00      	nop
 800b57c:	0800dc9d 	.word	0x0800dc9d
 800b580:	0800dcae 	.word	0x0800dcae

0800b584 <__ulp>:
 800b584:	b082      	sub	sp, #8
 800b586:	ed8d 0b00 	vstr	d0, [sp]
 800b58a:	9a01      	ldr	r2, [sp, #4]
 800b58c:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <__ulp+0x48>)
 800b58e:	4013      	ands	r3, r2
 800b590:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b594:	2b00      	cmp	r3, #0
 800b596:	dc08      	bgt.n	800b5aa <__ulp+0x26>
 800b598:	425b      	negs	r3, r3
 800b59a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b59e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5a2:	da04      	bge.n	800b5ae <__ulp+0x2a>
 800b5a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b5a8:	4113      	asrs	r3, r2
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	e008      	b.n	800b5c0 <__ulp+0x3c>
 800b5ae:	f1a2 0314 	sub.w	r3, r2, #20
 800b5b2:	2b1e      	cmp	r3, #30
 800b5b4:	bfda      	itte	le
 800b5b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b5ba:	40da      	lsrle	r2, r3
 800b5bc:	2201      	movgt	r2, #1
 800b5be:	2300      	movs	r3, #0
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	ec41 0b10 	vmov	d0, r0, r1
 800b5c8:	b002      	add	sp, #8
 800b5ca:	4770      	bx	lr
 800b5cc:	7ff00000 	.word	0x7ff00000

0800b5d0 <__b2d>:
 800b5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d4:	6906      	ldr	r6, [r0, #16]
 800b5d6:	f100 0814 	add.w	r8, r0, #20
 800b5da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b5de:	1f37      	subs	r7, r6, #4
 800b5e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	f7ff fd53 	bl	800b090 <__hi0bits>
 800b5ea:	f1c0 0320 	rsb	r3, r0, #32
 800b5ee:	280a      	cmp	r0, #10
 800b5f0:	600b      	str	r3, [r1, #0]
 800b5f2:	491b      	ldr	r1, [pc, #108]	; (800b660 <__b2d+0x90>)
 800b5f4:	dc15      	bgt.n	800b622 <__b2d+0x52>
 800b5f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b5fa:	fa22 f30c 	lsr.w	r3, r2, ip
 800b5fe:	45b8      	cmp	r8, r7
 800b600:	ea43 0501 	orr.w	r5, r3, r1
 800b604:	bf34      	ite	cc
 800b606:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b60a:	2300      	movcs	r3, #0
 800b60c:	3015      	adds	r0, #21
 800b60e:	fa02 f000 	lsl.w	r0, r2, r0
 800b612:	fa23 f30c 	lsr.w	r3, r3, ip
 800b616:	4303      	orrs	r3, r0
 800b618:	461c      	mov	r4, r3
 800b61a:	ec45 4b10 	vmov	d0, r4, r5
 800b61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b622:	45b8      	cmp	r8, r7
 800b624:	bf3a      	itte	cc
 800b626:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b62a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b62e:	2300      	movcs	r3, #0
 800b630:	380b      	subs	r0, #11
 800b632:	d012      	beq.n	800b65a <__b2d+0x8a>
 800b634:	f1c0 0120 	rsb	r1, r0, #32
 800b638:	fa23 f401 	lsr.w	r4, r3, r1
 800b63c:	4082      	lsls	r2, r0
 800b63e:	4322      	orrs	r2, r4
 800b640:	4547      	cmp	r7, r8
 800b642:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b646:	bf8c      	ite	hi
 800b648:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b64c:	2200      	movls	r2, #0
 800b64e:	4083      	lsls	r3, r0
 800b650:	40ca      	lsrs	r2, r1
 800b652:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b656:	4313      	orrs	r3, r2
 800b658:	e7de      	b.n	800b618 <__b2d+0x48>
 800b65a:	ea42 0501 	orr.w	r5, r2, r1
 800b65e:	e7db      	b.n	800b618 <__b2d+0x48>
 800b660:	3ff00000 	.word	0x3ff00000

0800b664 <__d2b>:
 800b664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b668:	460f      	mov	r7, r1
 800b66a:	2101      	movs	r1, #1
 800b66c:	ec59 8b10 	vmov	r8, r9, d0
 800b670:	4616      	mov	r6, r2
 800b672:	f7ff fc1b 	bl	800aeac <_Balloc>
 800b676:	4604      	mov	r4, r0
 800b678:	b930      	cbnz	r0, 800b688 <__d2b+0x24>
 800b67a:	4602      	mov	r2, r0
 800b67c:	4b24      	ldr	r3, [pc, #144]	; (800b710 <__d2b+0xac>)
 800b67e:	4825      	ldr	r0, [pc, #148]	; (800b714 <__d2b+0xb0>)
 800b680:	f240 310f 	movw	r1, #783	; 0x30f
 800b684:	f001 fb7c 	bl	800cd80 <__assert_func>
 800b688:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b68c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b690:	bb2d      	cbnz	r5, 800b6de <__d2b+0x7a>
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	f1b8 0300 	subs.w	r3, r8, #0
 800b698:	d026      	beq.n	800b6e8 <__d2b+0x84>
 800b69a:	4668      	mov	r0, sp
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	f7ff fd17 	bl	800b0d0 <__lo0bits>
 800b6a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6a6:	b1e8      	cbz	r0, 800b6e4 <__d2b+0x80>
 800b6a8:	f1c0 0320 	rsb	r3, r0, #32
 800b6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	40c2      	lsrs	r2, r0
 800b6b4:	6163      	str	r3, [r4, #20]
 800b6b6:	9201      	str	r2, [sp, #4]
 800b6b8:	9b01      	ldr	r3, [sp, #4]
 800b6ba:	61a3      	str	r3, [r4, #24]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bf14      	ite	ne
 800b6c0:	2202      	movne	r2, #2
 800b6c2:	2201      	moveq	r2, #1
 800b6c4:	6122      	str	r2, [r4, #16]
 800b6c6:	b1bd      	cbz	r5, 800b6f8 <__d2b+0x94>
 800b6c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6cc:	4405      	add	r5, r0
 800b6ce:	603d      	str	r5, [r7, #0]
 800b6d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6d4:	6030      	str	r0, [r6, #0]
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	b003      	add	sp, #12
 800b6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6e2:	e7d6      	b.n	800b692 <__d2b+0x2e>
 800b6e4:	6161      	str	r1, [r4, #20]
 800b6e6:	e7e7      	b.n	800b6b8 <__d2b+0x54>
 800b6e8:	a801      	add	r0, sp, #4
 800b6ea:	f7ff fcf1 	bl	800b0d0 <__lo0bits>
 800b6ee:	9b01      	ldr	r3, [sp, #4]
 800b6f0:	6163      	str	r3, [r4, #20]
 800b6f2:	3020      	adds	r0, #32
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	e7e5      	b.n	800b6c4 <__d2b+0x60>
 800b6f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b700:	6038      	str	r0, [r7, #0]
 800b702:	6918      	ldr	r0, [r3, #16]
 800b704:	f7ff fcc4 	bl	800b090 <__hi0bits>
 800b708:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b70c:	e7e2      	b.n	800b6d4 <__d2b+0x70>
 800b70e:	bf00      	nop
 800b710:	0800dc9d 	.word	0x0800dc9d
 800b714:	0800dcae 	.word	0x0800dcae

0800b718 <__ratio>:
 800b718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	4688      	mov	r8, r1
 800b71e:	4669      	mov	r1, sp
 800b720:	4681      	mov	r9, r0
 800b722:	f7ff ff55 	bl	800b5d0 <__b2d>
 800b726:	a901      	add	r1, sp, #4
 800b728:	4640      	mov	r0, r8
 800b72a:	ec55 4b10 	vmov	r4, r5, d0
 800b72e:	f7ff ff4f 	bl	800b5d0 <__b2d>
 800b732:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b736:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b73a:	eba3 0c02 	sub.w	ip, r3, r2
 800b73e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b742:	1a9b      	subs	r3, r3, r2
 800b744:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b748:	ec51 0b10 	vmov	r0, r1, d0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	bfd6      	itet	le
 800b750:	460a      	movle	r2, r1
 800b752:	462a      	movgt	r2, r5
 800b754:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b758:	468b      	mov	fp, r1
 800b75a:	462f      	mov	r7, r5
 800b75c:	bfd4      	ite	le
 800b75e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b762:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b766:	4620      	mov	r0, r4
 800b768:	ee10 2a10 	vmov	r2, s0
 800b76c:	465b      	mov	r3, fp
 800b76e:	4639      	mov	r1, r7
 800b770:	f7f5 f86c 	bl	800084c <__aeabi_ddiv>
 800b774:	ec41 0b10 	vmov	d0, r0, r1
 800b778:	b003      	add	sp, #12
 800b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b77e <__copybits>:
 800b77e:	3901      	subs	r1, #1
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	1149      	asrs	r1, r1, #5
 800b784:	6914      	ldr	r4, [r2, #16]
 800b786:	3101      	adds	r1, #1
 800b788:	f102 0314 	add.w	r3, r2, #20
 800b78c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b790:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b794:	1f05      	subs	r5, r0, #4
 800b796:	42a3      	cmp	r3, r4
 800b798:	d30c      	bcc.n	800b7b4 <__copybits+0x36>
 800b79a:	1aa3      	subs	r3, r4, r2
 800b79c:	3b11      	subs	r3, #17
 800b79e:	f023 0303 	bic.w	r3, r3, #3
 800b7a2:	3211      	adds	r2, #17
 800b7a4:	42a2      	cmp	r2, r4
 800b7a6:	bf88      	it	hi
 800b7a8:	2300      	movhi	r3, #0
 800b7aa:	4418      	add	r0, r3
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4288      	cmp	r0, r1
 800b7b0:	d305      	bcc.n	800b7be <__copybits+0x40>
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
 800b7b4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7b8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7bc:	e7eb      	b.n	800b796 <__copybits+0x18>
 800b7be:	f840 3b04 	str.w	r3, [r0], #4
 800b7c2:	e7f4      	b.n	800b7ae <__copybits+0x30>

0800b7c4 <__any_on>:
 800b7c4:	f100 0214 	add.w	r2, r0, #20
 800b7c8:	6900      	ldr	r0, [r0, #16]
 800b7ca:	114b      	asrs	r3, r1, #5
 800b7cc:	4298      	cmp	r0, r3
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	db11      	blt.n	800b7f6 <__any_on+0x32>
 800b7d2:	dd0a      	ble.n	800b7ea <__any_on+0x26>
 800b7d4:	f011 011f 	ands.w	r1, r1, #31
 800b7d8:	d007      	beq.n	800b7ea <__any_on+0x26>
 800b7da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7de:	fa24 f001 	lsr.w	r0, r4, r1
 800b7e2:	fa00 f101 	lsl.w	r1, r0, r1
 800b7e6:	428c      	cmp	r4, r1
 800b7e8:	d10b      	bne.n	800b802 <__any_on+0x3e>
 800b7ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d803      	bhi.n	800b7fa <__any_on+0x36>
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	bd10      	pop	{r4, pc}
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	e7f7      	b.n	800b7ea <__any_on+0x26>
 800b7fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7fe:	2900      	cmp	r1, #0
 800b800:	d0f5      	beq.n	800b7ee <__any_on+0x2a>
 800b802:	2001      	movs	r0, #1
 800b804:	e7f6      	b.n	800b7f4 <__any_on+0x30>

0800b806 <sulp>:
 800b806:	b570      	push	{r4, r5, r6, lr}
 800b808:	4604      	mov	r4, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	ec45 4b10 	vmov	d0, r4, r5
 800b810:	4616      	mov	r6, r2
 800b812:	f7ff feb7 	bl	800b584 <__ulp>
 800b816:	ec51 0b10 	vmov	r0, r1, d0
 800b81a:	b17e      	cbz	r6, 800b83c <sulp+0x36>
 800b81c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b820:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b824:	2b00      	cmp	r3, #0
 800b826:	dd09      	ble.n	800b83c <sulp+0x36>
 800b828:	051b      	lsls	r3, r3, #20
 800b82a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b82e:	2400      	movs	r4, #0
 800b830:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b834:	4622      	mov	r2, r4
 800b836:	462b      	mov	r3, r5
 800b838:	f7f4 fede 	bl	80005f8 <__aeabi_dmul>
 800b83c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b840 <_strtod_l>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	ed2d 8b02 	vpush	{d8}
 800b848:	b09b      	sub	sp, #108	; 0x6c
 800b84a:	4604      	mov	r4, r0
 800b84c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b84e:	2200      	movs	r2, #0
 800b850:	9216      	str	r2, [sp, #88]	; 0x58
 800b852:	460d      	mov	r5, r1
 800b854:	f04f 0800 	mov.w	r8, #0
 800b858:	f04f 0900 	mov.w	r9, #0
 800b85c:	460a      	mov	r2, r1
 800b85e:	9215      	str	r2, [sp, #84]	; 0x54
 800b860:	7811      	ldrb	r1, [r2, #0]
 800b862:	292b      	cmp	r1, #43	; 0x2b
 800b864:	d04c      	beq.n	800b900 <_strtod_l+0xc0>
 800b866:	d83a      	bhi.n	800b8de <_strtod_l+0x9e>
 800b868:	290d      	cmp	r1, #13
 800b86a:	d834      	bhi.n	800b8d6 <_strtod_l+0x96>
 800b86c:	2908      	cmp	r1, #8
 800b86e:	d834      	bhi.n	800b8da <_strtod_l+0x9a>
 800b870:	2900      	cmp	r1, #0
 800b872:	d03d      	beq.n	800b8f0 <_strtod_l+0xb0>
 800b874:	2200      	movs	r2, #0
 800b876:	920a      	str	r2, [sp, #40]	; 0x28
 800b878:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b87a:	7832      	ldrb	r2, [r6, #0]
 800b87c:	2a30      	cmp	r2, #48	; 0x30
 800b87e:	f040 80b4 	bne.w	800b9ea <_strtod_l+0x1aa>
 800b882:	7872      	ldrb	r2, [r6, #1]
 800b884:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b888:	2a58      	cmp	r2, #88	; 0x58
 800b88a:	d170      	bne.n	800b96e <_strtod_l+0x12e>
 800b88c:	9302      	str	r3, [sp, #8]
 800b88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b890:	9301      	str	r3, [sp, #4]
 800b892:	ab16      	add	r3, sp, #88	; 0x58
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	4a8e      	ldr	r2, [pc, #568]	; (800bad0 <_strtod_l+0x290>)
 800b898:	ab17      	add	r3, sp, #92	; 0x5c
 800b89a:	a915      	add	r1, sp, #84	; 0x54
 800b89c:	4620      	mov	r0, r4
 800b89e:	f001 fb0b 	bl	800ceb8 <__gethex>
 800b8a2:	f010 070f 	ands.w	r7, r0, #15
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	d005      	beq.n	800b8b6 <_strtod_l+0x76>
 800b8aa:	2f06      	cmp	r7, #6
 800b8ac:	d12a      	bne.n	800b904 <_strtod_l+0xc4>
 800b8ae:	3601      	adds	r6, #1
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9615      	str	r6, [sp, #84]	; 0x54
 800b8b4:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f040 857f 	bne.w	800c3bc <_strtod_l+0xb7c>
 800b8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c0:	b1db      	cbz	r3, 800b8fa <_strtod_l+0xba>
 800b8c2:	4642      	mov	r2, r8
 800b8c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b8c8:	ec43 2b10 	vmov	d0, r2, r3
 800b8cc:	b01b      	add	sp, #108	; 0x6c
 800b8ce:	ecbd 8b02 	vpop	{d8}
 800b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d6:	2920      	cmp	r1, #32
 800b8d8:	d1cc      	bne.n	800b874 <_strtod_l+0x34>
 800b8da:	3201      	adds	r2, #1
 800b8dc:	e7bf      	b.n	800b85e <_strtod_l+0x1e>
 800b8de:	292d      	cmp	r1, #45	; 0x2d
 800b8e0:	d1c8      	bne.n	800b874 <_strtod_l+0x34>
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	910a      	str	r1, [sp, #40]	; 0x28
 800b8e6:	1c51      	adds	r1, r2, #1
 800b8e8:	9115      	str	r1, [sp, #84]	; 0x54
 800b8ea:	7852      	ldrb	r2, [r2, #1]
 800b8ec:	2a00      	cmp	r2, #0
 800b8ee:	d1c3      	bne.n	800b878 <_strtod_l+0x38>
 800b8f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8f2:	9515      	str	r5, [sp, #84]	; 0x54
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f040 855f 	bne.w	800c3b8 <_strtod_l+0xb78>
 800b8fa:	4642      	mov	r2, r8
 800b8fc:	464b      	mov	r3, r9
 800b8fe:	e7e3      	b.n	800b8c8 <_strtod_l+0x88>
 800b900:	2100      	movs	r1, #0
 800b902:	e7ef      	b.n	800b8e4 <_strtod_l+0xa4>
 800b904:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b906:	b13a      	cbz	r2, 800b918 <_strtod_l+0xd8>
 800b908:	2135      	movs	r1, #53	; 0x35
 800b90a:	a818      	add	r0, sp, #96	; 0x60
 800b90c:	f7ff ff37 	bl	800b77e <__copybits>
 800b910:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b912:	4620      	mov	r0, r4
 800b914:	f7ff fb0a 	bl	800af2c <_Bfree>
 800b918:	3f01      	subs	r7, #1
 800b91a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b91c:	2f04      	cmp	r7, #4
 800b91e:	d806      	bhi.n	800b92e <_strtod_l+0xee>
 800b920:	e8df f007 	tbb	[pc, r7]
 800b924:	201d0314 	.word	0x201d0314
 800b928:	14          	.byte	0x14
 800b929:	00          	.byte	0x00
 800b92a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b92e:	05e9      	lsls	r1, r5, #23
 800b930:	bf48      	it	mi
 800b932:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b93a:	0d1b      	lsrs	r3, r3, #20
 800b93c:	051b      	lsls	r3, r3, #20
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1b9      	bne.n	800b8b6 <_strtod_l+0x76>
 800b942:	f7fe faf9 	bl	8009f38 <__errno>
 800b946:	2322      	movs	r3, #34	; 0x22
 800b948:	6003      	str	r3, [r0, #0]
 800b94a:	e7b4      	b.n	800b8b6 <_strtod_l+0x76>
 800b94c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b950:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b954:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b958:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b95c:	e7e7      	b.n	800b92e <_strtod_l+0xee>
 800b95e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bad8 <_strtod_l+0x298>
 800b962:	e7e4      	b.n	800b92e <_strtod_l+0xee>
 800b964:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b968:	f04f 38ff 	mov.w	r8, #4294967295
 800b96c:	e7df      	b.n	800b92e <_strtod_l+0xee>
 800b96e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	9215      	str	r2, [sp, #84]	; 0x54
 800b974:	785b      	ldrb	r3, [r3, #1]
 800b976:	2b30      	cmp	r3, #48	; 0x30
 800b978:	d0f9      	beq.n	800b96e <_strtod_l+0x12e>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d09b      	beq.n	800b8b6 <_strtod_l+0x76>
 800b97e:	2301      	movs	r3, #1
 800b980:	f04f 0a00 	mov.w	sl, #0
 800b984:	9304      	str	r3, [sp, #16]
 800b986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b988:	930b      	str	r3, [sp, #44]	; 0x2c
 800b98a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b98e:	46d3      	mov	fp, sl
 800b990:	220a      	movs	r2, #10
 800b992:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b994:	7806      	ldrb	r6, [r0, #0]
 800b996:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b99a:	b2d9      	uxtb	r1, r3
 800b99c:	2909      	cmp	r1, #9
 800b99e:	d926      	bls.n	800b9ee <_strtod_l+0x1ae>
 800b9a0:	494c      	ldr	r1, [pc, #304]	; (800bad4 <_strtod_l+0x294>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f001 f9c0 	bl	800cd28 <strncmp>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d030      	beq.n	800ba0e <_strtod_l+0x1ce>
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	4632      	mov	r2, r6
 800b9b0:	9005      	str	r0, [sp, #20]
 800b9b2:	465e      	mov	r6, fp
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2a65      	cmp	r2, #101	; 0x65
 800b9b8:	d001      	beq.n	800b9be <_strtod_l+0x17e>
 800b9ba:	2a45      	cmp	r2, #69	; 0x45
 800b9bc:	d113      	bne.n	800b9e6 <_strtod_l+0x1a6>
 800b9be:	b91e      	cbnz	r6, 800b9c8 <_strtod_l+0x188>
 800b9c0:	9a04      	ldr	r2, [sp, #16]
 800b9c2:	4302      	orrs	r2, r0
 800b9c4:	d094      	beq.n	800b8f0 <_strtod_l+0xb0>
 800b9c6:	2600      	movs	r6, #0
 800b9c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b9ca:	1c6a      	adds	r2, r5, #1
 800b9cc:	9215      	str	r2, [sp, #84]	; 0x54
 800b9ce:	786a      	ldrb	r2, [r5, #1]
 800b9d0:	2a2b      	cmp	r2, #43	; 0x2b
 800b9d2:	d074      	beq.n	800babe <_strtod_l+0x27e>
 800b9d4:	2a2d      	cmp	r2, #45	; 0x2d
 800b9d6:	d078      	beq.n	800baca <_strtod_l+0x28a>
 800b9d8:	f04f 0c00 	mov.w	ip, #0
 800b9dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b9e0:	2909      	cmp	r1, #9
 800b9e2:	d97f      	bls.n	800bae4 <_strtod_l+0x2a4>
 800b9e4:	9515      	str	r5, [sp, #84]	; 0x54
 800b9e6:	2700      	movs	r7, #0
 800b9e8:	e09e      	b.n	800bb28 <_strtod_l+0x2e8>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	e7c8      	b.n	800b980 <_strtod_l+0x140>
 800b9ee:	f1bb 0f08 	cmp.w	fp, #8
 800b9f2:	bfd8      	it	le
 800b9f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b9f6:	f100 0001 	add.w	r0, r0, #1
 800b9fa:	bfda      	itte	le
 800b9fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba00:	9309      	strle	r3, [sp, #36]	; 0x24
 800ba02:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ba06:	f10b 0b01 	add.w	fp, fp, #1
 800ba0a:	9015      	str	r0, [sp, #84]	; 0x54
 800ba0c:	e7c1      	b.n	800b992 <_strtod_l+0x152>
 800ba0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	9215      	str	r2, [sp, #84]	; 0x54
 800ba14:	785a      	ldrb	r2, [r3, #1]
 800ba16:	f1bb 0f00 	cmp.w	fp, #0
 800ba1a:	d037      	beq.n	800ba8c <_strtod_l+0x24c>
 800ba1c:	9005      	str	r0, [sp, #20]
 800ba1e:	465e      	mov	r6, fp
 800ba20:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ba24:	2b09      	cmp	r3, #9
 800ba26:	d912      	bls.n	800ba4e <_strtod_l+0x20e>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e7c4      	b.n	800b9b6 <_strtod_l+0x176>
 800ba2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	9215      	str	r2, [sp, #84]	; 0x54
 800ba32:	785a      	ldrb	r2, [r3, #1]
 800ba34:	3001      	adds	r0, #1
 800ba36:	2a30      	cmp	r2, #48	; 0x30
 800ba38:	d0f8      	beq.n	800ba2c <_strtod_l+0x1ec>
 800ba3a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ba3e:	2b08      	cmp	r3, #8
 800ba40:	f200 84c1 	bhi.w	800c3c6 <_strtod_l+0xb86>
 800ba44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba46:	9005      	str	r0, [sp, #20]
 800ba48:	2000      	movs	r0, #0
 800ba4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	3a30      	subs	r2, #48	; 0x30
 800ba50:	f100 0301 	add.w	r3, r0, #1
 800ba54:	d014      	beq.n	800ba80 <_strtod_l+0x240>
 800ba56:	9905      	ldr	r1, [sp, #20]
 800ba58:	4419      	add	r1, r3
 800ba5a:	9105      	str	r1, [sp, #20]
 800ba5c:	4633      	mov	r3, r6
 800ba5e:	eb00 0c06 	add.w	ip, r0, r6
 800ba62:	210a      	movs	r1, #10
 800ba64:	4563      	cmp	r3, ip
 800ba66:	d113      	bne.n	800ba90 <_strtod_l+0x250>
 800ba68:	1833      	adds	r3, r6, r0
 800ba6a:	2b08      	cmp	r3, #8
 800ba6c:	f106 0601 	add.w	r6, r6, #1
 800ba70:	4406      	add	r6, r0
 800ba72:	dc1a      	bgt.n	800baaa <_strtod_l+0x26a>
 800ba74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba76:	230a      	movs	r3, #10
 800ba78:	fb03 2301 	mla	r3, r3, r1, r2
 800ba7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba82:	1c51      	adds	r1, r2, #1
 800ba84:	9115      	str	r1, [sp, #84]	; 0x54
 800ba86:	7852      	ldrb	r2, [r2, #1]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	e7c9      	b.n	800ba20 <_strtod_l+0x1e0>
 800ba8c:	4658      	mov	r0, fp
 800ba8e:	e7d2      	b.n	800ba36 <_strtod_l+0x1f6>
 800ba90:	2b08      	cmp	r3, #8
 800ba92:	f103 0301 	add.w	r3, r3, #1
 800ba96:	dc03      	bgt.n	800baa0 <_strtod_l+0x260>
 800ba98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ba9a:	434f      	muls	r7, r1
 800ba9c:	9709      	str	r7, [sp, #36]	; 0x24
 800ba9e:	e7e1      	b.n	800ba64 <_strtod_l+0x224>
 800baa0:	2b10      	cmp	r3, #16
 800baa2:	bfd8      	it	le
 800baa4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800baa8:	e7dc      	b.n	800ba64 <_strtod_l+0x224>
 800baaa:	2e10      	cmp	r6, #16
 800baac:	bfdc      	itt	le
 800baae:	230a      	movle	r3, #10
 800bab0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bab4:	e7e3      	b.n	800ba7e <_strtod_l+0x23e>
 800bab6:	2300      	movs	r3, #0
 800bab8:	9305      	str	r3, [sp, #20]
 800baba:	2301      	movs	r3, #1
 800babc:	e780      	b.n	800b9c0 <_strtod_l+0x180>
 800babe:	f04f 0c00 	mov.w	ip, #0
 800bac2:	1caa      	adds	r2, r5, #2
 800bac4:	9215      	str	r2, [sp, #84]	; 0x54
 800bac6:	78aa      	ldrb	r2, [r5, #2]
 800bac8:	e788      	b.n	800b9dc <_strtod_l+0x19c>
 800baca:	f04f 0c01 	mov.w	ip, #1
 800bace:	e7f8      	b.n	800bac2 <_strtod_l+0x282>
 800bad0:	0800de08 	.word	0x0800de08
 800bad4:	0800de04 	.word	0x0800de04
 800bad8:	7ff00000 	.word	0x7ff00000
 800badc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bade:	1c51      	adds	r1, r2, #1
 800bae0:	9115      	str	r1, [sp, #84]	; 0x54
 800bae2:	7852      	ldrb	r2, [r2, #1]
 800bae4:	2a30      	cmp	r2, #48	; 0x30
 800bae6:	d0f9      	beq.n	800badc <_strtod_l+0x29c>
 800bae8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800baec:	2908      	cmp	r1, #8
 800baee:	f63f af7a 	bhi.w	800b9e6 <_strtod_l+0x1a6>
 800baf2:	3a30      	subs	r2, #48	; 0x30
 800baf4:	9208      	str	r2, [sp, #32]
 800baf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800baf8:	920c      	str	r2, [sp, #48]	; 0x30
 800bafa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bafc:	1c57      	adds	r7, r2, #1
 800bafe:	9715      	str	r7, [sp, #84]	; 0x54
 800bb00:	7852      	ldrb	r2, [r2, #1]
 800bb02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bb06:	f1be 0f09 	cmp.w	lr, #9
 800bb0a:	d938      	bls.n	800bb7e <_strtod_l+0x33e>
 800bb0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb0e:	1a7f      	subs	r7, r7, r1
 800bb10:	2f08      	cmp	r7, #8
 800bb12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bb16:	dc03      	bgt.n	800bb20 <_strtod_l+0x2e0>
 800bb18:	9908      	ldr	r1, [sp, #32]
 800bb1a:	428f      	cmp	r7, r1
 800bb1c:	bfa8      	it	ge
 800bb1e:	460f      	movge	r7, r1
 800bb20:	f1bc 0f00 	cmp.w	ip, #0
 800bb24:	d000      	beq.n	800bb28 <_strtod_l+0x2e8>
 800bb26:	427f      	negs	r7, r7
 800bb28:	2e00      	cmp	r6, #0
 800bb2a:	d14f      	bne.n	800bbcc <_strtod_l+0x38c>
 800bb2c:	9904      	ldr	r1, [sp, #16]
 800bb2e:	4301      	orrs	r1, r0
 800bb30:	f47f aec1 	bne.w	800b8b6 <_strtod_l+0x76>
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f47f aedb 	bne.w	800b8f0 <_strtod_l+0xb0>
 800bb3a:	2a69      	cmp	r2, #105	; 0x69
 800bb3c:	d029      	beq.n	800bb92 <_strtod_l+0x352>
 800bb3e:	dc26      	bgt.n	800bb8e <_strtod_l+0x34e>
 800bb40:	2a49      	cmp	r2, #73	; 0x49
 800bb42:	d026      	beq.n	800bb92 <_strtod_l+0x352>
 800bb44:	2a4e      	cmp	r2, #78	; 0x4e
 800bb46:	f47f aed3 	bne.w	800b8f0 <_strtod_l+0xb0>
 800bb4a:	499b      	ldr	r1, [pc, #620]	; (800bdb8 <_strtod_l+0x578>)
 800bb4c:	a815      	add	r0, sp, #84	; 0x54
 800bb4e:	f001 fbf3 	bl	800d338 <__match>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	f43f aecc 	beq.w	800b8f0 <_strtod_l+0xb0>
 800bb58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	2b28      	cmp	r3, #40	; 0x28
 800bb5e:	d12f      	bne.n	800bbc0 <_strtod_l+0x380>
 800bb60:	4996      	ldr	r1, [pc, #600]	; (800bdbc <_strtod_l+0x57c>)
 800bb62:	aa18      	add	r2, sp, #96	; 0x60
 800bb64:	a815      	add	r0, sp, #84	; 0x54
 800bb66:	f001 fbfb 	bl	800d360 <__hexnan>
 800bb6a:	2805      	cmp	r0, #5
 800bb6c:	d128      	bne.n	800bbc0 <_strtod_l+0x380>
 800bb6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bb78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bb7c:	e69b      	b.n	800b8b6 <_strtod_l+0x76>
 800bb7e:	9f08      	ldr	r7, [sp, #32]
 800bb80:	210a      	movs	r1, #10
 800bb82:	fb01 2107 	mla	r1, r1, r7, r2
 800bb86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bb8a:	9208      	str	r2, [sp, #32]
 800bb8c:	e7b5      	b.n	800bafa <_strtod_l+0x2ba>
 800bb8e:	2a6e      	cmp	r2, #110	; 0x6e
 800bb90:	e7d9      	b.n	800bb46 <_strtod_l+0x306>
 800bb92:	498b      	ldr	r1, [pc, #556]	; (800bdc0 <_strtod_l+0x580>)
 800bb94:	a815      	add	r0, sp, #84	; 0x54
 800bb96:	f001 fbcf 	bl	800d338 <__match>
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	f43f aea8 	beq.w	800b8f0 <_strtod_l+0xb0>
 800bba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bba2:	4988      	ldr	r1, [pc, #544]	; (800bdc4 <_strtod_l+0x584>)
 800bba4:	3b01      	subs	r3, #1
 800bba6:	a815      	add	r0, sp, #84	; 0x54
 800bba8:	9315      	str	r3, [sp, #84]	; 0x54
 800bbaa:	f001 fbc5 	bl	800d338 <__match>
 800bbae:	b910      	cbnz	r0, 800bbb6 <_strtod_l+0x376>
 800bbb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	9315      	str	r3, [sp, #84]	; 0x54
 800bbb6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bdd4 <_strtod_l+0x594>
 800bbba:	f04f 0800 	mov.w	r8, #0
 800bbbe:	e67a      	b.n	800b8b6 <_strtod_l+0x76>
 800bbc0:	4881      	ldr	r0, [pc, #516]	; (800bdc8 <_strtod_l+0x588>)
 800bbc2:	f001 f8d5 	bl	800cd70 <nan>
 800bbc6:	ec59 8b10 	vmov	r8, r9, d0
 800bbca:	e674      	b.n	800b8b6 <_strtod_l+0x76>
 800bbcc:	9b05      	ldr	r3, [sp, #20]
 800bbce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbd0:	1afb      	subs	r3, r7, r3
 800bbd2:	f1bb 0f00 	cmp.w	fp, #0
 800bbd6:	bf08      	it	eq
 800bbd8:	46b3      	moveq	fp, r6
 800bbda:	2e10      	cmp	r6, #16
 800bbdc:	9308      	str	r3, [sp, #32]
 800bbde:	4635      	mov	r5, r6
 800bbe0:	bfa8      	it	ge
 800bbe2:	2510      	movge	r5, #16
 800bbe4:	f7f4 fc8e 	bl	8000504 <__aeabi_ui2d>
 800bbe8:	2e09      	cmp	r6, #9
 800bbea:	4680      	mov	r8, r0
 800bbec:	4689      	mov	r9, r1
 800bbee:	dd13      	ble.n	800bc18 <_strtod_l+0x3d8>
 800bbf0:	4b76      	ldr	r3, [pc, #472]	; (800bdcc <_strtod_l+0x58c>)
 800bbf2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bbf6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bbfa:	f7f4 fcfd 	bl	80005f8 <__aeabi_dmul>
 800bbfe:	4680      	mov	r8, r0
 800bc00:	4650      	mov	r0, sl
 800bc02:	4689      	mov	r9, r1
 800bc04:	f7f4 fc7e 	bl	8000504 <__aeabi_ui2d>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f7f4 fb3c 	bl	800028c <__adddf3>
 800bc14:	4680      	mov	r8, r0
 800bc16:	4689      	mov	r9, r1
 800bc18:	2e0f      	cmp	r6, #15
 800bc1a:	dc38      	bgt.n	800bc8e <_strtod_l+0x44e>
 800bc1c:	9b08      	ldr	r3, [sp, #32]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f43f ae49 	beq.w	800b8b6 <_strtod_l+0x76>
 800bc24:	dd24      	ble.n	800bc70 <_strtod_l+0x430>
 800bc26:	2b16      	cmp	r3, #22
 800bc28:	dc0b      	bgt.n	800bc42 <_strtod_l+0x402>
 800bc2a:	4968      	ldr	r1, [pc, #416]	; (800bdcc <_strtod_l+0x58c>)
 800bc2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc34:	4642      	mov	r2, r8
 800bc36:	464b      	mov	r3, r9
 800bc38:	f7f4 fcde 	bl	80005f8 <__aeabi_dmul>
 800bc3c:	4680      	mov	r8, r0
 800bc3e:	4689      	mov	r9, r1
 800bc40:	e639      	b.n	800b8b6 <_strtod_l+0x76>
 800bc42:	9a08      	ldr	r2, [sp, #32]
 800bc44:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	db20      	blt.n	800bc8e <_strtod_l+0x44e>
 800bc4c:	4c5f      	ldr	r4, [pc, #380]	; (800bdcc <_strtod_l+0x58c>)
 800bc4e:	f1c6 060f 	rsb	r6, r6, #15
 800bc52:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bc56:	4642      	mov	r2, r8
 800bc58:	464b      	mov	r3, r9
 800bc5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc5e:	f7f4 fccb 	bl	80005f8 <__aeabi_dmul>
 800bc62:	9b08      	ldr	r3, [sp, #32]
 800bc64:	1b9e      	subs	r6, r3, r6
 800bc66:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bc6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc6e:	e7e3      	b.n	800bc38 <_strtod_l+0x3f8>
 800bc70:	9b08      	ldr	r3, [sp, #32]
 800bc72:	3316      	adds	r3, #22
 800bc74:	db0b      	blt.n	800bc8e <_strtod_l+0x44e>
 800bc76:	9b05      	ldr	r3, [sp, #20]
 800bc78:	1bdf      	subs	r7, r3, r7
 800bc7a:	4b54      	ldr	r3, [pc, #336]	; (800bdcc <_strtod_l+0x58c>)
 800bc7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bc80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc84:	4640      	mov	r0, r8
 800bc86:	4649      	mov	r1, r9
 800bc88:	f7f4 fde0 	bl	800084c <__aeabi_ddiv>
 800bc8c:	e7d6      	b.n	800bc3c <_strtod_l+0x3fc>
 800bc8e:	9b08      	ldr	r3, [sp, #32]
 800bc90:	1b75      	subs	r5, r6, r5
 800bc92:	441d      	add	r5, r3
 800bc94:	2d00      	cmp	r5, #0
 800bc96:	dd70      	ble.n	800bd7a <_strtod_l+0x53a>
 800bc98:	f015 030f 	ands.w	r3, r5, #15
 800bc9c:	d00a      	beq.n	800bcb4 <_strtod_l+0x474>
 800bc9e:	494b      	ldr	r1, [pc, #300]	; (800bdcc <_strtod_l+0x58c>)
 800bca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bca4:	4642      	mov	r2, r8
 800bca6:	464b      	mov	r3, r9
 800bca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcac:	f7f4 fca4 	bl	80005f8 <__aeabi_dmul>
 800bcb0:	4680      	mov	r8, r0
 800bcb2:	4689      	mov	r9, r1
 800bcb4:	f035 050f 	bics.w	r5, r5, #15
 800bcb8:	d04d      	beq.n	800bd56 <_strtod_l+0x516>
 800bcba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bcbe:	dd22      	ble.n	800bd06 <_strtod_l+0x4c6>
 800bcc0:	2500      	movs	r5, #0
 800bcc2:	46ab      	mov	fp, r5
 800bcc4:	9509      	str	r5, [sp, #36]	; 0x24
 800bcc6:	9505      	str	r5, [sp, #20]
 800bcc8:	2322      	movs	r3, #34	; 0x22
 800bcca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bdd4 <_strtod_l+0x594>
 800bcce:	6023      	str	r3, [r4, #0]
 800bcd0:	f04f 0800 	mov.w	r8, #0
 800bcd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f43f aded 	beq.w	800b8b6 <_strtod_l+0x76>
 800bcdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bcde:	4620      	mov	r0, r4
 800bce0:	f7ff f924 	bl	800af2c <_Bfree>
 800bce4:	9905      	ldr	r1, [sp, #20]
 800bce6:	4620      	mov	r0, r4
 800bce8:	f7ff f920 	bl	800af2c <_Bfree>
 800bcec:	4659      	mov	r1, fp
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f7ff f91c 	bl	800af2c <_Bfree>
 800bcf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f7ff f918 	bl	800af2c <_Bfree>
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f7ff f914 	bl	800af2c <_Bfree>
 800bd04:	e5d7      	b.n	800b8b6 <_strtod_l+0x76>
 800bd06:	4b32      	ldr	r3, [pc, #200]	; (800bdd0 <_strtod_l+0x590>)
 800bd08:	9304      	str	r3, [sp, #16]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	112d      	asrs	r5, r5, #4
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4649      	mov	r1, r9
 800bd12:	469a      	mov	sl, r3
 800bd14:	2d01      	cmp	r5, #1
 800bd16:	dc21      	bgt.n	800bd5c <_strtod_l+0x51c>
 800bd18:	b10b      	cbz	r3, 800bd1e <_strtod_l+0x4de>
 800bd1a:	4680      	mov	r8, r0
 800bd1c:	4689      	mov	r9, r1
 800bd1e:	492c      	ldr	r1, [pc, #176]	; (800bdd0 <_strtod_l+0x590>)
 800bd20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bd24:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd30:	f7f4 fc62 	bl	80005f8 <__aeabi_dmul>
 800bd34:	4b27      	ldr	r3, [pc, #156]	; (800bdd4 <_strtod_l+0x594>)
 800bd36:	460a      	mov	r2, r1
 800bd38:	400b      	ands	r3, r1
 800bd3a:	4927      	ldr	r1, [pc, #156]	; (800bdd8 <_strtod_l+0x598>)
 800bd3c:	428b      	cmp	r3, r1
 800bd3e:	4680      	mov	r8, r0
 800bd40:	d8be      	bhi.n	800bcc0 <_strtod_l+0x480>
 800bd42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bd46:	428b      	cmp	r3, r1
 800bd48:	bf86      	itte	hi
 800bd4a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bddc <_strtod_l+0x59c>
 800bd4e:	f04f 38ff 	movhi.w	r8, #4294967295
 800bd52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bd56:	2300      	movs	r3, #0
 800bd58:	9304      	str	r3, [sp, #16]
 800bd5a:	e07b      	b.n	800be54 <_strtod_l+0x614>
 800bd5c:	07ea      	lsls	r2, r5, #31
 800bd5e:	d505      	bpl.n	800bd6c <_strtod_l+0x52c>
 800bd60:	9b04      	ldr	r3, [sp, #16]
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fc47 	bl	80005f8 <__aeabi_dmul>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	9a04      	ldr	r2, [sp, #16]
 800bd6e:	3208      	adds	r2, #8
 800bd70:	f10a 0a01 	add.w	sl, sl, #1
 800bd74:	106d      	asrs	r5, r5, #1
 800bd76:	9204      	str	r2, [sp, #16]
 800bd78:	e7cc      	b.n	800bd14 <_strtod_l+0x4d4>
 800bd7a:	d0ec      	beq.n	800bd56 <_strtod_l+0x516>
 800bd7c:	426d      	negs	r5, r5
 800bd7e:	f015 020f 	ands.w	r2, r5, #15
 800bd82:	d00a      	beq.n	800bd9a <_strtod_l+0x55a>
 800bd84:	4b11      	ldr	r3, [pc, #68]	; (800bdcc <_strtod_l+0x58c>)
 800bd86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	4649      	mov	r1, r9
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fd5b 	bl	800084c <__aeabi_ddiv>
 800bd96:	4680      	mov	r8, r0
 800bd98:	4689      	mov	r9, r1
 800bd9a:	112d      	asrs	r5, r5, #4
 800bd9c:	d0db      	beq.n	800bd56 <_strtod_l+0x516>
 800bd9e:	2d1f      	cmp	r5, #31
 800bda0:	dd1e      	ble.n	800bde0 <_strtod_l+0x5a0>
 800bda2:	2500      	movs	r5, #0
 800bda4:	46ab      	mov	fp, r5
 800bda6:	9509      	str	r5, [sp, #36]	; 0x24
 800bda8:	9505      	str	r5, [sp, #20]
 800bdaa:	2322      	movs	r3, #34	; 0x22
 800bdac:	f04f 0800 	mov.w	r8, #0
 800bdb0:	f04f 0900 	mov.w	r9, #0
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	e78d      	b.n	800bcd4 <_strtod_l+0x494>
 800bdb8:	0800dbf5 	.word	0x0800dbf5
 800bdbc:	0800de1c 	.word	0x0800de1c
 800bdc0:	0800dbed 	.word	0x0800dbed
 800bdc4:	0800dc24 	.word	0x0800dc24
 800bdc8:	0800dfad 	.word	0x0800dfad
 800bdcc:	0800dd30 	.word	0x0800dd30
 800bdd0:	0800dd08 	.word	0x0800dd08
 800bdd4:	7ff00000 	.word	0x7ff00000
 800bdd8:	7ca00000 	.word	0x7ca00000
 800bddc:	7fefffff 	.word	0x7fefffff
 800bde0:	f015 0310 	ands.w	r3, r5, #16
 800bde4:	bf18      	it	ne
 800bde6:	236a      	movne	r3, #106	; 0x6a
 800bde8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c18c <_strtod_l+0x94c>
 800bdec:	9304      	str	r3, [sp, #16]
 800bdee:	4640      	mov	r0, r8
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	07ea      	lsls	r2, r5, #31
 800bdf6:	d504      	bpl.n	800be02 <_strtod_l+0x5c2>
 800bdf8:	e9da 2300 	ldrd	r2, r3, [sl]
 800bdfc:	f7f4 fbfc 	bl	80005f8 <__aeabi_dmul>
 800be00:	2301      	movs	r3, #1
 800be02:	106d      	asrs	r5, r5, #1
 800be04:	f10a 0a08 	add.w	sl, sl, #8
 800be08:	d1f4      	bne.n	800bdf4 <_strtod_l+0x5b4>
 800be0a:	b10b      	cbz	r3, 800be10 <_strtod_l+0x5d0>
 800be0c:	4680      	mov	r8, r0
 800be0e:	4689      	mov	r9, r1
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	b1bb      	cbz	r3, 800be44 <_strtod_l+0x604>
 800be14:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800be18:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	4649      	mov	r1, r9
 800be20:	dd10      	ble.n	800be44 <_strtod_l+0x604>
 800be22:	2b1f      	cmp	r3, #31
 800be24:	f340 811e 	ble.w	800c064 <_strtod_l+0x824>
 800be28:	2b34      	cmp	r3, #52	; 0x34
 800be2a:	bfde      	ittt	le
 800be2c:	f04f 33ff 	movle.w	r3, #4294967295
 800be30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800be34:	4093      	lslle	r3, r2
 800be36:	f04f 0800 	mov.w	r8, #0
 800be3a:	bfcc      	ite	gt
 800be3c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800be40:	ea03 0901 	andle.w	r9, r3, r1
 800be44:	2200      	movs	r2, #0
 800be46:	2300      	movs	r3, #0
 800be48:	4640      	mov	r0, r8
 800be4a:	4649      	mov	r1, r9
 800be4c:	f7f4 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800be50:	2800      	cmp	r0, #0
 800be52:	d1a6      	bne.n	800bda2 <_strtod_l+0x562>
 800be54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be5a:	4633      	mov	r3, r6
 800be5c:	465a      	mov	r2, fp
 800be5e:	4620      	mov	r0, r4
 800be60:	f7ff f8cc 	bl	800affc <__s2b>
 800be64:	9009      	str	r0, [sp, #36]	; 0x24
 800be66:	2800      	cmp	r0, #0
 800be68:	f43f af2a 	beq.w	800bcc0 <_strtod_l+0x480>
 800be6c:	9a08      	ldr	r2, [sp, #32]
 800be6e:	9b05      	ldr	r3, [sp, #20]
 800be70:	2a00      	cmp	r2, #0
 800be72:	eba3 0307 	sub.w	r3, r3, r7
 800be76:	bfa8      	it	ge
 800be78:	2300      	movge	r3, #0
 800be7a:	930c      	str	r3, [sp, #48]	; 0x30
 800be7c:	2500      	movs	r5, #0
 800be7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800be82:	9312      	str	r3, [sp, #72]	; 0x48
 800be84:	46ab      	mov	fp, r5
 800be86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be88:	4620      	mov	r0, r4
 800be8a:	6859      	ldr	r1, [r3, #4]
 800be8c:	f7ff f80e 	bl	800aeac <_Balloc>
 800be90:	9005      	str	r0, [sp, #20]
 800be92:	2800      	cmp	r0, #0
 800be94:	f43f af18 	beq.w	800bcc8 <_strtod_l+0x488>
 800be98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be9a:	691a      	ldr	r2, [r3, #16]
 800be9c:	3202      	adds	r2, #2
 800be9e:	f103 010c 	add.w	r1, r3, #12
 800bea2:	0092      	lsls	r2, r2, #2
 800bea4:	300c      	adds	r0, #12
 800bea6:	f7fe f873 	bl	8009f90 <memcpy>
 800beaa:	ec49 8b10 	vmov	d0, r8, r9
 800beae:	aa18      	add	r2, sp, #96	; 0x60
 800beb0:	a917      	add	r1, sp, #92	; 0x5c
 800beb2:	4620      	mov	r0, r4
 800beb4:	f7ff fbd6 	bl	800b664 <__d2b>
 800beb8:	ec49 8b18 	vmov	d8, r8, r9
 800bebc:	9016      	str	r0, [sp, #88]	; 0x58
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f43f af02 	beq.w	800bcc8 <_strtod_l+0x488>
 800bec4:	2101      	movs	r1, #1
 800bec6:	4620      	mov	r0, r4
 800bec8:	f7ff f930 	bl	800b12c <__i2b>
 800becc:	4683      	mov	fp, r0
 800bece:	2800      	cmp	r0, #0
 800bed0:	f43f aefa 	beq.w	800bcc8 <_strtod_l+0x488>
 800bed4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bed6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bed8:	2e00      	cmp	r6, #0
 800beda:	bfab      	itete	ge
 800bedc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bede:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bee0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bee2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bee6:	bfac      	ite	ge
 800bee8:	eb06 0a03 	addge.w	sl, r6, r3
 800beec:	1b9f      	sublt	r7, r3, r6
 800beee:	9b04      	ldr	r3, [sp, #16]
 800bef0:	1af6      	subs	r6, r6, r3
 800bef2:	4416      	add	r6, r2
 800bef4:	4ba0      	ldr	r3, [pc, #640]	; (800c178 <_strtod_l+0x938>)
 800bef6:	3e01      	subs	r6, #1
 800bef8:	429e      	cmp	r6, r3
 800befa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800befe:	f280 80c4 	bge.w	800c08a <_strtod_l+0x84a>
 800bf02:	1b9b      	subs	r3, r3, r6
 800bf04:	2b1f      	cmp	r3, #31
 800bf06:	eba2 0203 	sub.w	r2, r2, r3
 800bf0a:	f04f 0101 	mov.w	r1, #1
 800bf0e:	f300 80b0 	bgt.w	800c072 <_strtod_l+0x832>
 800bf12:	fa01 f303 	lsl.w	r3, r1, r3
 800bf16:	930e      	str	r3, [sp, #56]	; 0x38
 800bf18:	2300      	movs	r3, #0
 800bf1a:	930d      	str	r3, [sp, #52]	; 0x34
 800bf1c:	eb0a 0602 	add.w	r6, sl, r2
 800bf20:	9b04      	ldr	r3, [sp, #16]
 800bf22:	45b2      	cmp	sl, r6
 800bf24:	4417      	add	r7, r2
 800bf26:	441f      	add	r7, r3
 800bf28:	4653      	mov	r3, sl
 800bf2a:	bfa8      	it	ge
 800bf2c:	4633      	movge	r3, r6
 800bf2e:	42bb      	cmp	r3, r7
 800bf30:	bfa8      	it	ge
 800bf32:	463b      	movge	r3, r7
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	bfc2      	ittt	gt
 800bf38:	1af6      	subgt	r6, r6, r3
 800bf3a:	1aff      	subgt	r7, r7, r3
 800bf3c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bf40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dd17      	ble.n	800bf76 <_strtod_l+0x736>
 800bf46:	4659      	mov	r1, fp
 800bf48:	461a      	mov	r2, r3
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f7ff f9ae 	bl	800b2ac <__pow5mult>
 800bf50:	4683      	mov	fp, r0
 800bf52:	2800      	cmp	r0, #0
 800bf54:	f43f aeb8 	beq.w	800bcc8 <_strtod_l+0x488>
 800bf58:	4601      	mov	r1, r0
 800bf5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f7ff f8fb 	bl	800b158 <__multiply>
 800bf62:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf64:	2800      	cmp	r0, #0
 800bf66:	f43f aeaf 	beq.w	800bcc8 <_strtod_l+0x488>
 800bf6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f7fe ffdd 	bl	800af2c <_Bfree>
 800bf72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf74:	9316      	str	r3, [sp, #88]	; 0x58
 800bf76:	2e00      	cmp	r6, #0
 800bf78:	f300 808c 	bgt.w	800c094 <_strtod_l+0x854>
 800bf7c:	9b08      	ldr	r3, [sp, #32]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	dd08      	ble.n	800bf94 <_strtod_l+0x754>
 800bf82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf84:	9905      	ldr	r1, [sp, #20]
 800bf86:	4620      	mov	r0, r4
 800bf88:	f7ff f990 	bl	800b2ac <__pow5mult>
 800bf8c:	9005      	str	r0, [sp, #20]
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	f43f ae9a 	beq.w	800bcc8 <_strtod_l+0x488>
 800bf94:	2f00      	cmp	r7, #0
 800bf96:	dd08      	ble.n	800bfaa <_strtod_l+0x76a>
 800bf98:	9905      	ldr	r1, [sp, #20]
 800bf9a:	463a      	mov	r2, r7
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f7ff f9df 	bl	800b360 <__lshift>
 800bfa2:	9005      	str	r0, [sp, #20]
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	f43f ae8f 	beq.w	800bcc8 <_strtod_l+0x488>
 800bfaa:	f1ba 0f00 	cmp.w	sl, #0
 800bfae:	dd08      	ble.n	800bfc2 <_strtod_l+0x782>
 800bfb0:	4659      	mov	r1, fp
 800bfb2:	4652      	mov	r2, sl
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f7ff f9d3 	bl	800b360 <__lshift>
 800bfba:	4683      	mov	fp, r0
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	f43f ae83 	beq.w	800bcc8 <_strtod_l+0x488>
 800bfc2:	9a05      	ldr	r2, [sp, #20]
 800bfc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f7ff fa52 	bl	800b470 <__mdiff>
 800bfcc:	4605      	mov	r5, r0
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f43f ae7a 	beq.w	800bcc8 <_strtod_l+0x488>
 800bfd4:	68c3      	ldr	r3, [r0, #12]
 800bfd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60c3      	str	r3, [r0, #12]
 800bfdc:	4659      	mov	r1, fp
 800bfde:	f7ff fa2b 	bl	800b438 <__mcmp>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	da60      	bge.n	800c0a8 <_strtod_l+0x868>
 800bfe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe8:	ea53 0308 	orrs.w	r3, r3, r8
 800bfec:	f040 8084 	bne.w	800c0f8 <_strtod_l+0x8b8>
 800bff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d17f      	bne.n	800c0f8 <_strtod_l+0x8b8>
 800bff8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bffc:	0d1b      	lsrs	r3, r3, #20
 800bffe:	051b      	lsls	r3, r3, #20
 800c000:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c004:	d978      	bls.n	800c0f8 <_strtod_l+0x8b8>
 800c006:	696b      	ldr	r3, [r5, #20]
 800c008:	b913      	cbnz	r3, 800c010 <_strtod_l+0x7d0>
 800c00a:	692b      	ldr	r3, [r5, #16]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	dd73      	ble.n	800c0f8 <_strtod_l+0x8b8>
 800c010:	4629      	mov	r1, r5
 800c012:	2201      	movs	r2, #1
 800c014:	4620      	mov	r0, r4
 800c016:	f7ff f9a3 	bl	800b360 <__lshift>
 800c01a:	4659      	mov	r1, fp
 800c01c:	4605      	mov	r5, r0
 800c01e:	f7ff fa0b 	bl	800b438 <__mcmp>
 800c022:	2800      	cmp	r0, #0
 800c024:	dd68      	ble.n	800c0f8 <_strtod_l+0x8b8>
 800c026:	9904      	ldr	r1, [sp, #16]
 800c028:	4a54      	ldr	r2, [pc, #336]	; (800c17c <_strtod_l+0x93c>)
 800c02a:	464b      	mov	r3, r9
 800c02c:	2900      	cmp	r1, #0
 800c02e:	f000 8084 	beq.w	800c13a <_strtod_l+0x8fa>
 800c032:	ea02 0109 	and.w	r1, r2, r9
 800c036:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c03a:	dc7e      	bgt.n	800c13a <_strtod_l+0x8fa>
 800c03c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c040:	f77f aeb3 	ble.w	800bdaa <_strtod_l+0x56a>
 800c044:	4b4e      	ldr	r3, [pc, #312]	; (800c180 <_strtod_l+0x940>)
 800c046:	4640      	mov	r0, r8
 800c048:	4649      	mov	r1, r9
 800c04a:	2200      	movs	r2, #0
 800c04c:	f7f4 fad4 	bl	80005f8 <__aeabi_dmul>
 800c050:	4b4a      	ldr	r3, [pc, #296]	; (800c17c <_strtod_l+0x93c>)
 800c052:	400b      	ands	r3, r1
 800c054:	4680      	mov	r8, r0
 800c056:	4689      	mov	r9, r1
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f47f ae3f 	bne.w	800bcdc <_strtod_l+0x49c>
 800c05e:	2322      	movs	r3, #34	; 0x22
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	e63b      	b.n	800bcdc <_strtod_l+0x49c>
 800c064:	f04f 32ff 	mov.w	r2, #4294967295
 800c068:	fa02 f303 	lsl.w	r3, r2, r3
 800c06c:	ea03 0808 	and.w	r8, r3, r8
 800c070:	e6e8      	b.n	800be44 <_strtod_l+0x604>
 800c072:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c076:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c07a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c07e:	36e2      	adds	r6, #226	; 0xe2
 800c080:	fa01 f306 	lsl.w	r3, r1, r6
 800c084:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c088:	e748      	b.n	800bf1c <_strtod_l+0x6dc>
 800c08a:	2100      	movs	r1, #0
 800c08c:	2301      	movs	r3, #1
 800c08e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c092:	e743      	b.n	800bf1c <_strtod_l+0x6dc>
 800c094:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c096:	4632      	mov	r2, r6
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff f961 	bl	800b360 <__lshift>
 800c09e:	9016      	str	r0, [sp, #88]	; 0x58
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	f47f af6b 	bne.w	800bf7c <_strtod_l+0x73c>
 800c0a6:	e60f      	b.n	800bcc8 <_strtod_l+0x488>
 800c0a8:	46ca      	mov	sl, r9
 800c0aa:	d171      	bne.n	800c190 <_strtod_l+0x950>
 800c0ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0b2:	b352      	cbz	r2, 800c10a <_strtod_l+0x8ca>
 800c0b4:	4a33      	ldr	r2, [pc, #204]	; (800c184 <_strtod_l+0x944>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d12a      	bne.n	800c110 <_strtod_l+0x8d0>
 800c0ba:	9b04      	ldr	r3, [sp, #16]
 800c0bc:	4641      	mov	r1, r8
 800c0be:	b1fb      	cbz	r3, 800c100 <_strtod_l+0x8c0>
 800c0c0:	4b2e      	ldr	r3, [pc, #184]	; (800c17c <_strtod_l+0x93c>)
 800c0c2:	ea09 0303 	and.w	r3, r9, r3
 800c0c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ce:	d81a      	bhi.n	800c106 <_strtod_l+0x8c6>
 800c0d0:	0d1b      	lsrs	r3, r3, #20
 800c0d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0da:	4299      	cmp	r1, r3
 800c0dc:	d118      	bne.n	800c110 <_strtod_l+0x8d0>
 800c0de:	4b2a      	ldr	r3, [pc, #168]	; (800c188 <_strtod_l+0x948>)
 800c0e0:	459a      	cmp	sl, r3
 800c0e2:	d102      	bne.n	800c0ea <_strtod_l+0x8aa>
 800c0e4:	3101      	adds	r1, #1
 800c0e6:	f43f adef 	beq.w	800bcc8 <_strtod_l+0x488>
 800c0ea:	4b24      	ldr	r3, [pc, #144]	; (800c17c <_strtod_l+0x93c>)
 800c0ec:	ea0a 0303 	and.w	r3, sl, r3
 800c0f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c0f4:	f04f 0800 	mov.w	r8, #0
 800c0f8:	9b04      	ldr	r3, [sp, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1a2      	bne.n	800c044 <_strtod_l+0x804>
 800c0fe:	e5ed      	b.n	800bcdc <_strtod_l+0x49c>
 800c100:	f04f 33ff 	mov.w	r3, #4294967295
 800c104:	e7e9      	b.n	800c0da <_strtod_l+0x89a>
 800c106:	4613      	mov	r3, r2
 800c108:	e7e7      	b.n	800c0da <_strtod_l+0x89a>
 800c10a:	ea53 0308 	orrs.w	r3, r3, r8
 800c10e:	d08a      	beq.n	800c026 <_strtod_l+0x7e6>
 800c110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c112:	b1e3      	cbz	r3, 800c14e <_strtod_l+0x90e>
 800c114:	ea13 0f0a 	tst.w	r3, sl
 800c118:	d0ee      	beq.n	800c0f8 <_strtod_l+0x8b8>
 800c11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c11c:	9a04      	ldr	r2, [sp, #16]
 800c11e:	4640      	mov	r0, r8
 800c120:	4649      	mov	r1, r9
 800c122:	b1c3      	cbz	r3, 800c156 <_strtod_l+0x916>
 800c124:	f7ff fb6f 	bl	800b806 <sulp>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	ec51 0b18 	vmov	r0, r1, d8
 800c130:	f7f4 f8ac 	bl	800028c <__adddf3>
 800c134:	4680      	mov	r8, r0
 800c136:	4689      	mov	r9, r1
 800c138:	e7de      	b.n	800c0f8 <_strtod_l+0x8b8>
 800c13a:	4013      	ands	r3, r2
 800c13c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c140:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c144:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c148:	f04f 38ff 	mov.w	r8, #4294967295
 800c14c:	e7d4      	b.n	800c0f8 <_strtod_l+0x8b8>
 800c14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c150:	ea13 0f08 	tst.w	r3, r8
 800c154:	e7e0      	b.n	800c118 <_strtod_l+0x8d8>
 800c156:	f7ff fb56 	bl	800b806 <sulp>
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	ec51 0b18 	vmov	r0, r1, d8
 800c162:	f7f4 f891 	bl	8000288 <__aeabi_dsub>
 800c166:	2200      	movs	r2, #0
 800c168:	2300      	movs	r3, #0
 800c16a:	4680      	mov	r8, r0
 800c16c:	4689      	mov	r9, r1
 800c16e:	f7f4 fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 800c172:	2800      	cmp	r0, #0
 800c174:	d0c0      	beq.n	800c0f8 <_strtod_l+0x8b8>
 800c176:	e618      	b.n	800bdaa <_strtod_l+0x56a>
 800c178:	fffffc02 	.word	0xfffffc02
 800c17c:	7ff00000 	.word	0x7ff00000
 800c180:	39500000 	.word	0x39500000
 800c184:	000fffff 	.word	0x000fffff
 800c188:	7fefffff 	.word	0x7fefffff
 800c18c:	0800de30 	.word	0x0800de30
 800c190:	4659      	mov	r1, fp
 800c192:	4628      	mov	r0, r5
 800c194:	f7ff fac0 	bl	800b718 <__ratio>
 800c198:	ec57 6b10 	vmov	r6, r7, d0
 800c19c:	ee10 0a10 	vmov	r0, s0
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	f7f4 fca2 	bl	8000af0 <__aeabi_dcmple>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d071      	beq.n	800c294 <_strtod_l+0xa54>
 800c1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d17c      	bne.n	800c2b0 <_strtod_l+0xa70>
 800c1b6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ba:	d15a      	bne.n	800c272 <_strtod_l+0xa32>
 800c1bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d15d      	bne.n	800c280 <_strtod_l+0xa40>
 800c1c4:	4b90      	ldr	r3, [pc, #576]	; (800c408 <_strtod_l+0xbc8>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	f7f4 fc86 	bl	8000adc <__aeabi_dcmplt>
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d15c      	bne.n	800c28e <_strtod_l+0xa4e>
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	4639      	mov	r1, r7
 800c1d8:	4b8c      	ldr	r3, [pc, #560]	; (800c40c <_strtod_l+0xbcc>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f7f4 fa0c 	bl	80005f8 <__aeabi_dmul>
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	460f      	mov	r7, r1
 800c1e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c1e8:	9606      	str	r6, [sp, #24]
 800c1ea:	9307      	str	r3, [sp, #28]
 800c1ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c1f4:	4b86      	ldr	r3, [pc, #536]	; (800c410 <_strtod_l+0xbd0>)
 800c1f6:	ea0a 0303 	and.w	r3, sl, r3
 800c1fa:	930d      	str	r3, [sp, #52]	; 0x34
 800c1fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1fe:	4b85      	ldr	r3, [pc, #532]	; (800c414 <_strtod_l+0xbd4>)
 800c200:	429a      	cmp	r2, r3
 800c202:	f040 8090 	bne.w	800c326 <_strtod_l+0xae6>
 800c206:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c20a:	ec49 8b10 	vmov	d0, r8, r9
 800c20e:	f7ff f9b9 	bl	800b584 <__ulp>
 800c212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c216:	ec51 0b10 	vmov	r0, r1, d0
 800c21a:	f7f4 f9ed 	bl	80005f8 <__aeabi_dmul>
 800c21e:	4642      	mov	r2, r8
 800c220:	464b      	mov	r3, r9
 800c222:	f7f4 f833 	bl	800028c <__adddf3>
 800c226:	460b      	mov	r3, r1
 800c228:	4979      	ldr	r1, [pc, #484]	; (800c410 <_strtod_l+0xbd0>)
 800c22a:	4a7b      	ldr	r2, [pc, #492]	; (800c418 <_strtod_l+0xbd8>)
 800c22c:	4019      	ands	r1, r3
 800c22e:	4291      	cmp	r1, r2
 800c230:	4680      	mov	r8, r0
 800c232:	d944      	bls.n	800c2be <_strtod_l+0xa7e>
 800c234:	ee18 2a90 	vmov	r2, s17
 800c238:	4b78      	ldr	r3, [pc, #480]	; (800c41c <_strtod_l+0xbdc>)
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d104      	bne.n	800c248 <_strtod_l+0xa08>
 800c23e:	ee18 3a10 	vmov	r3, s16
 800c242:	3301      	adds	r3, #1
 800c244:	f43f ad40 	beq.w	800bcc8 <_strtod_l+0x488>
 800c248:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c41c <_strtod_l+0xbdc>
 800c24c:	f04f 38ff 	mov.w	r8, #4294967295
 800c250:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c252:	4620      	mov	r0, r4
 800c254:	f7fe fe6a 	bl	800af2c <_Bfree>
 800c258:	9905      	ldr	r1, [sp, #20]
 800c25a:	4620      	mov	r0, r4
 800c25c:	f7fe fe66 	bl	800af2c <_Bfree>
 800c260:	4659      	mov	r1, fp
 800c262:	4620      	mov	r0, r4
 800c264:	f7fe fe62 	bl	800af2c <_Bfree>
 800c268:	4629      	mov	r1, r5
 800c26a:	4620      	mov	r0, r4
 800c26c:	f7fe fe5e 	bl	800af2c <_Bfree>
 800c270:	e609      	b.n	800be86 <_strtod_l+0x646>
 800c272:	f1b8 0f01 	cmp.w	r8, #1
 800c276:	d103      	bne.n	800c280 <_strtod_l+0xa40>
 800c278:	f1b9 0f00 	cmp.w	r9, #0
 800c27c:	f43f ad95 	beq.w	800bdaa <_strtod_l+0x56a>
 800c280:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c3d8 <_strtod_l+0xb98>
 800c284:	4f60      	ldr	r7, [pc, #384]	; (800c408 <_strtod_l+0xbc8>)
 800c286:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c28a:	2600      	movs	r6, #0
 800c28c:	e7ae      	b.n	800c1ec <_strtod_l+0x9ac>
 800c28e:	4f5f      	ldr	r7, [pc, #380]	; (800c40c <_strtod_l+0xbcc>)
 800c290:	2600      	movs	r6, #0
 800c292:	e7a7      	b.n	800c1e4 <_strtod_l+0x9a4>
 800c294:	4b5d      	ldr	r3, [pc, #372]	; (800c40c <_strtod_l+0xbcc>)
 800c296:	4630      	mov	r0, r6
 800c298:	4639      	mov	r1, r7
 800c29a:	2200      	movs	r2, #0
 800c29c:	f7f4 f9ac 	bl	80005f8 <__aeabi_dmul>
 800c2a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	460f      	mov	r7, r1
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d09c      	beq.n	800c1e4 <_strtod_l+0x9a4>
 800c2aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c2ae:	e79d      	b.n	800c1ec <_strtod_l+0x9ac>
 800c2b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c3e0 <_strtod_l+0xba0>
 800c2b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2b8:	ec57 6b17 	vmov	r6, r7, d7
 800c2bc:	e796      	b.n	800c1ec <_strtod_l+0x9ac>
 800c2be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c2c2:	9b04      	ldr	r3, [sp, #16]
 800c2c4:	46ca      	mov	sl, r9
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1c2      	bne.n	800c250 <_strtod_l+0xa10>
 800c2ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c2ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2d0:	0d1b      	lsrs	r3, r3, #20
 800c2d2:	051b      	lsls	r3, r3, #20
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d1bb      	bne.n	800c250 <_strtod_l+0xa10>
 800c2d8:	4630      	mov	r0, r6
 800c2da:	4639      	mov	r1, r7
 800c2dc:	f7f4 fcec 	bl	8000cb8 <__aeabi_d2lz>
 800c2e0:	f7f4 f95c 	bl	800059c <__aeabi_l2d>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	4639      	mov	r1, r7
 800c2ec:	f7f3 ffcc 	bl	8000288 <__aeabi_dsub>
 800c2f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2f6:	ea43 0308 	orr.w	r3, r3, r8
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	460f      	mov	r7, r1
 800c300:	d054      	beq.n	800c3ac <_strtod_l+0xb6c>
 800c302:	a339      	add	r3, pc, #228	; (adr r3, 800c3e8 <_strtod_l+0xba8>)
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	f7f4 fbe8 	bl	8000adc <__aeabi_dcmplt>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	f47f ace5 	bne.w	800bcdc <_strtod_l+0x49c>
 800c312:	a337      	add	r3, pc, #220	; (adr r3, 800c3f0 <_strtod_l+0xbb0>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	4630      	mov	r0, r6
 800c31a:	4639      	mov	r1, r7
 800c31c:	f7f4 fbfc 	bl	8000b18 <__aeabi_dcmpgt>
 800c320:	2800      	cmp	r0, #0
 800c322:	d095      	beq.n	800c250 <_strtod_l+0xa10>
 800c324:	e4da      	b.n	800bcdc <_strtod_l+0x49c>
 800c326:	9b04      	ldr	r3, [sp, #16]
 800c328:	b333      	cbz	r3, 800c378 <_strtod_l+0xb38>
 800c32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c32c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c330:	d822      	bhi.n	800c378 <_strtod_l+0xb38>
 800c332:	a331      	add	r3, pc, #196	; (adr r3, 800c3f8 <_strtod_l+0xbb8>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	4630      	mov	r0, r6
 800c33a:	4639      	mov	r1, r7
 800c33c:	f7f4 fbd8 	bl	8000af0 <__aeabi_dcmple>
 800c340:	b1a0      	cbz	r0, 800c36c <_strtod_l+0xb2c>
 800c342:	4639      	mov	r1, r7
 800c344:	4630      	mov	r0, r6
 800c346:	f7f4 fc2f 	bl	8000ba8 <__aeabi_d2uiz>
 800c34a:	2801      	cmp	r0, #1
 800c34c:	bf38      	it	cc
 800c34e:	2001      	movcc	r0, #1
 800c350:	f7f4 f8d8 	bl	8000504 <__aeabi_ui2d>
 800c354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c356:	4606      	mov	r6, r0
 800c358:	460f      	mov	r7, r1
 800c35a:	bb23      	cbnz	r3, 800c3a6 <_strtod_l+0xb66>
 800c35c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c360:	9010      	str	r0, [sp, #64]	; 0x40
 800c362:	9311      	str	r3, [sp, #68]	; 0x44
 800c364:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c368:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c36c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c36e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c370:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c374:	1a9b      	subs	r3, r3, r2
 800c376:	930f      	str	r3, [sp, #60]	; 0x3c
 800c378:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c37c:	eeb0 0a48 	vmov.f32	s0, s16
 800c380:	eef0 0a68 	vmov.f32	s1, s17
 800c384:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c388:	f7ff f8fc 	bl	800b584 <__ulp>
 800c38c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c390:	ec53 2b10 	vmov	r2, r3, d0
 800c394:	f7f4 f930 	bl	80005f8 <__aeabi_dmul>
 800c398:	ec53 2b18 	vmov	r2, r3, d8
 800c39c:	f7f3 ff76 	bl	800028c <__adddf3>
 800c3a0:	4680      	mov	r8, r0
 800c3a2:	4689      	mov	r9, r1
 800c3a4:	e78d      	b.n	800c2c2 <_strtod_l+0xa82>
 800c3a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c3aa:	e7db      	b.n	800c364 <_strtod_l+0xb24>
 800c3ac:	a314      	add	r3, pc, #80	; (adr r3, 800c400 <_strtod_l+0xbc0>)
 800c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b2:	f7f4 fb93 	bl	8000adc <__aeabi_dcmplt>
 800c3b6:	e7b3      	b.n	800c320 <_strtod_l+0xae0>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	930a      	str	r3, [sp, #40]	; 0x28
 800c3bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3c0:	6013      	str	r3, [r2, #0]
 800c3c2:	f7ff ba7c 	b.w	800b8be <_strtod_l+0x7e>
 800c3c6:	2a65      	cmp	r2, #101	; 0x65
 800c3c8:	f43f ab75 	beq.w	800bab6 <_strtod_l+0x276>
 800c3cc:	2a45      	cmp	r2, #69	; 0x45
 800c3ce:	f43f ab72 	beq.w	800bab6 <_strtod_l+0x276>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	f7ff bbaa 	b.w	800bb2c <_strtod_l+0x2ec>
 800c3d8:	00000000 	.word	0x00000000
 800c3dc:	bff00000 	.word	0xbff00000
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	3ff00000 	.word	0x3ff00000
 800c3e8:	94a03595 	.word	0x94a03595
 800c3ec:	3fdfffff 	.word	0x3fdfffff
 800c3f0:	35afe535 	.word	0x35afe535
 800c3f4:	3fe00000 	.word	0x3fe00000
 800c3f8:	ffc00000 	.word	0xffc00000
 800c3fc:	41dfffff 	.word	0x41dfffff
 800c400:	94a03595 	.word	0x94a03595
 800c404:	3fcfffff 	.word	0x3fcfffff
 800c408:	3ff00000 	.word	0x3ff00000
 800c40c:	3fe00000 	.word	0x3fe00000
 800c410:	7ff00000 	.word	0x7ff00000
 800c414:	7fe00000 	.word	0x7fe00000
 800c418:	7c9fffff 	.word	0x7c9fffff
 800c41c:	7fefffff 	.word	0x7fefffff

0800c420 <_strtod_r>:
 800c420:	4b01      	ldr	r3, [pc, #4]	; (800c428 <_strtod_r+0x8>)
 800c422:	f7ff ba0d 	b.w	800b840 <_strtod_l>
 800c426:	bf00      	nop
 800c428:	2000009c 	.word	0x2000009c

0800c42c <_strtol_l.constprop.0>:
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c432:	d001      	beq.n	800c438 <_strtol_l.constprop.0+0xc>
 800c434:	2b24      	cmp	r3, #36	; 0x24
 800c436:	d906      	bls.n	800c446 <_strtol_l.constprop.0+0x1a>
 800c438:	f7fd fd7e 	bl	8009f38 <__errno>
 800c43c:	2316      	movs	r3, #22
 800c43e:	6003      	str	r3, [r0, #0]
 800c440:	2000      	movs	r0, #0
 800c442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c446:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c52c <_strtol_l.constprop.0+0x100>
 800c44a:	460d      	mov	r5, r1
 800c44c:	462e      	mov	r6, r5
 800c44e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c452:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c456:	f017 0708 	ands.w	r7, r7, #8
 800c45a:	d1f7      	bne.n	800c44c <_strtol_l.constprop.0+0x20>
 800c45c:	2c2d      	cmp	r4, #45	; 0x2d
 800c45e:	d132      	bne.n	800c4c6 <_strtol_l.constprop.0+0x9a>
 800c460:	782c      	ldrb	r4, [r5, #0]
 800c462:	2701      	movs	r7, #1
 800c464:	1cb5      	adds	r5, r6, #2
 800c466:	2b00      	cmp	r3, #0
 800c468:	d05b      	beq.n	800c522 <_strtol_l.constprop.0+0xf6>
 800c46a:	2b10      	cmp	r3, #16
 800c46c:	d109      	bne.n	800c482 <_strtol_l.constprop.0+0x56>
 800c46e:	2c30      	cmp	r4, #48	; 0x30
 800c470:	d107      	bne.n	800c482 <_strtol_l.constprop.0+0x56>
 800c472:	782c      	ldrb	r4, [r5, #0]
 800c474:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c478:	2c58      	cmp	r4, #88	; 0x58
 800c47a:	d14d      	bne.n	800c518 <_strtol_l.constprop.0+0xec>
 800c47c:	786c      	ldrb	r4, [r5, #1]
 800c47e:	2310      	movs	r3, #16
 800c480:	3502      	adds	r5, #2
 800c482:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c486:	f108 38ff 	add.w	r8, r8, #4294967295
 800c48a:	f04f 0e00 	mov.w	lr, #0
 800c48e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c492:	4676      	mov	r6, lr
 800c494:	fb03 8a19 	mls	sl, r3, r9, r8
 800c498:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c49c:	f1bc 0f09 	cmp.w	ip, #9
 800c4a0:	d816      	bhi.n	800c4d0 <_strtol_l.constprop.0+0xa4>
 800c4a2:	4664      	mov	r4, ip
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	dd24      	ble.n	800c4f2 <_strtol_l.constprop.0+0xc6>
 800c4a8:	f1be 3fff 	cmp.w	lr, #4294967295
 800c4ac:	d008      	beq.n	800c4c0 <_strtol_l.constprop.0+0x94>
 800c4ae:	45b1      	cmp	r9, r6
 800c4b0:	d31c      	bcc.n	800c4ec <_strtol_l.constprop.0+0xc0>
 800c4b2:	d101      	bne.n	800c4b8 <_strtol_l.constprop.0+0x8c>
 800c4b4:	45a2      	cmp	sl, r4
 800c4b6:	db19      	blt.n	800c4ec <_strtol_l.constprop.0+0xc0>
 800c4b8:	fb06 4603 	mla	r6, r6, r3, r4
 800c4bc:	f04f 0e01 	mov.w	lr, #1
 800c4c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4c4:	e7e8      	b.n	800c498 <_strtol_l.constprop.0+0x6c>
 800c4c6:	2c2b      	cmp	r4, #43	; 0x2b
 800c4c8:	bf04      	itt	eq
 800c4ca:	782c      	ldrbeq	r4, [r5, #0]
 800c4cc:	1cb5      	addeq	r5, r6, #2
 800c4ce:	e7ca      	b.n	800c466 <_strtol_l.constprop.0+0x3a>
 800c4d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c4d4:	f1bc 0f19 	cmp.w	ip, #25
 800c4d8:	d801      	bhi.n	800c4de <_strtol_l.constprop.0+0xb2>
 800c4da:	3c37      	subs	r4, #55	; 0x37
 800c4dc:	e7e2      	b.n	800c4a4 <_strtol_l.constprop.0+0x78>
 800c4de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c4e2:	f1bc 0f19 	cmp.w	ip, #25
 800c4e6:	d804      	bhi.n	800c4f2 <_strtol_l.constprop.0+0xc6>
 800c4e8:	3c57      	subs	r4, #87	; 0x57
 800c4ea:	e7db      	b.n	800c4a4 <_strtol_l.constprop.0+0x78>
 800c4ec:	f04f 3eff 	mov.w	lr, #4294967295
 800c4f0:	e7e6      	b.n	800c4c0 <_strtol_l.constprop.0+0x94>
 800c4f2:	f1be 3fff 	cmp.w	lr, #4294967295
 800c4f6:	d105      	bne.n	800c504 <_strtol_l.constprop.0+0xd8>
 800c4f8:	2322      	movs	r3, #34	; 0x22
 800c4fa:	6003      	str	r3, [r0, #0]
 800c4fc:	4646      	mov	r6, r8
 800c4fe:	b942      	cbnz	r2, 800c512 <_strtol_l.constprop.0+0xe6>
 800c500:	4630      	mov	r0, r6
 800c502:	e79e      	b.n	800c442 <_strtol_l.constprop.0+0x16>
 800c504:	b107      	cbz	r7, 800c508 <_strtol_l.constprop.0+0xdc>
 800c506:	4276      	negs	r6, r6
 800c508:	2a00      	cmp	r2, #0
 800c50a:	d0f9      	beq.n	800c500 <_strtol_l.constprop.0+0xd4>
 800c50c:	f1be 0f00 	cmp.w	lr, #0
 800c510:	d000      	beq.n	800c514 <_strtol_l.constprop.0+0xe8>
 800c512:	1e69      	subs	r1, r5, #1
 800c514:	6011      	str	r1, [r2, #0]
 800c516:	e7f3      	b.n	800c500 <_strtol_l.constprop.0+0xd4>
 800c518:	2430      	movs	r4, #48	; 0x30
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1b1      	bne.n	800c482 <_strtol_l.constprop.0+0x56>
 800c51e:	2308      	movs	r3, #8
 800c520:	e7af      	b.n	800c482 <_strtol_l.constprop.0+0x56>
 800c522:	2c30      	cmp	r4, #48	; 0x30
 800c524:	d0a5      	beq.n	800c472 <_strtol_l.constprop.0+0x46>
 800c526:	230a      	movs	r3, #10
 800c528:	e7ab      	b.n	800c482 <_strtol_l.constprop.0+0x56>
 800c52a:	bf00      	nop
 800c52c:	0800de59 	.word	0x0800de59

0800c530 <_strtol_r>:
 800c530:	f7ff bf7c 	b.w	800c42c <_strtol_l.constprop.0>

0800c534 <__ssputs_r>:
 800c534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c538:	688e      	ldr	r6, [r1, #8]
 800c53a:	461f      	mov	r7, r3
 800c53c:	42be      	cmp	r6, r7
 800c53e:	680b      	ldr	r3, [r1, #0]
 800c540:	4682      	mov	sl, r0
 800c542:	460c      	mov	r4, r1
 800c544:	4690      	mov	r8, r2
 800c546:	d82c      	bhi.n	800c5a2 <__ssputs_r+0x6e>
 800c548:	898a      	ldrh	r2, [r1, #12]
 800c54a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c54e:	d026      	beq.n	800c59e <__ssputs_r+0x6a>
 800c550:	6965      	ldr	r5, [r4, #20]
 800c552:	6909      	ldr	r1, [r1, #16]
 800c554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c558:	eba3 0901 	sub.w	r9, r3, r1
 800c55c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c560:	1c7b      	adds	r3, r7, #1
 800c562:	444b      	add	r3, r9
 800c564:	106d      	asrs	r5, r5, #1
 800c566:	429d      	cmp	r5, r3
 800c568:	bf38      	it	cc
 800c56a:	461d      	movcc	r5, r3
 800c56c:	0553      	lsls	r3, r2, #21
 800c56e:	d527      	bpl.n	800c5c0 <__ssputs_r+0x8c>
 800c570:	4629      	mov	r1, r5
 800c572:	f7fe fc0f 	bl	800ad94 <_malloc_r>
 800c576:	4606      	mov	r6, r0
 800c578:	b360      	cbz	r0, 800c5d4 <__ssputs_r+0xa0>
 800c57a:	6921      	ldr	r1, [r4, #16]
 800c57c:	464a      	mov	r2, r9
 800c57e:	f7fd fd07 	bl	8009f90 <memcpy>
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c58c:	81a3      	strh	r3, [r4, #12]
 800c58e:	6126      	str	r6, [r4, #16]
 800c590:	6165      	str	r5, [r4, #20]
 800c592:	444e      	add	r6, r9
 800c594:	eba5 0509 	sub.w	r5, r5, r9
 800c598:	6026      	str	r6, [r4, #0]
 800c59a:	60a5      	str	r5, [r4, #8]
 800c59c:	463e      	mov	r6, r7
 800c59e:	42be      	cmp	r6, r7
 800c5a0:	d900      	bls.n	800c5a4 <__ssputs_r+0x70>
 800c5a2:	463e      	mov	r6, r7
 800c5a4:	6820      	ldr	r0, [r4, #0]
 800c5a6:	4632      	mov	r2, r6
 800c5a8:	4641      	mov	r1, r8
 800c5aa:	f000 fba3 	bl	800ccf4 <memmove>
 800c5ae:	68a3      	ldr	r3, [r4, #8]
 800c5b0:	1b9b      	subs	r3, r3, r6
 800c5b2:	60a3      	str	r3, [r4, #8]
 800c5b4:	6823      	ldr	r3, [r4, #0]
 800c5b6:	4433      	add	r3, r6
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c0:	462a      	mov	r2, r5
 800c5c2:	f000 ff7a 	bl	800d4ba <_realloc_r>
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d1e0      	bne.n	800c58e <__ssputs_r+0x5a>
 800c5cc:	6921      	ldr	r1, [r4, #16]
 800c5ce:	4650      	mov	r0, sl
 800c5d0:	f7fe fb6c 	bl	800acac <_free_r>
 800c5d4:	230c      	movs	r3, #12
 800c5d6:	f8ca 3000 	str.w	r3, [sl]
 800c5da:	89a3      	ldrh	r3, [r4, #12]
 800c5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5e0:	81a3      	strh	r3, [r4, #12]
 800c5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e6:	e7e9      	b.n	800c5bc <__ssputs_r+0x88>

0800c5e8 <_svfiprintf_r>:
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	4698      	mov	r8, r3
 800c5ee:	898b      	ldrh	r3, [r1, #12]
 800c5f0:	061b      	lsls	r3, r3, #24
 800c5f2:	b09d      	sub	sp, #116	; 0x74
 800c5f4:	4607      	mov	r7, r0
 800c5f6:	460d      	mov	r5, r1
 800c5f8:	4614      	mov	r4, r2
 800c5fa:	d50e      	bpl.n	800c61a <_svfiprintf_r+0x32>
 800c5fc:	690b      	ldr	r3, [r1, #16]
 800c5fe:	b963      	cbnz	r3, 800c61a <_svfiprintf_r+0x32>
 800c600:	2140      	movs	r1, #64	; 0x40
 800c602:	f7fe fbc7 	bl	800ad94 <_malloc_r>
 800c606:	6028      	str	r0, [r5, #0]
 800c608:	6128      	str	r0, [r5, #16]
 800c60a:	b920      	cbnz	r0, 800c616 <_svfiprintf_r+0x2e>
 800c60c:	230c      	movs	r3, #12
 800c60e:	603b      	str	r3, [r7, #0]
 800c610:	f04f 30ff 	mov.w	r0, #4294967295
 800c614:	e0d0      	b.n	800c7b8 <_svfiprintf_r+0x1d0>
 800c616:	2340      	movs	r3, #64	; 0x40
 800c618:	616b      	str	r3, [r5, #20]
 800c61a:	2300      	movs	r3, #0
 800c61c:	9309      	str	r3, [sp, #36]	; 0x24
 800c61e:	2320      	movs	r3, #32
 800c620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c624:	f8cd 800c 	str.w	r8, [sp, #12]
 800c628:	2330      	movs	r3, #48	; 0x30
 800c62a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c7d0 <_svfiprintf_r+0x1e8>
 800c62e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c632:	f04f 0901 	mov.w	r9, #1
 800c636:	4623      	mov	r3, r4
 800c638:	469a      	mov	sl, r3
 800c63a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c63e:	b10a      	cbz	r2, 800c644 <_svfiprintf_r+0x5c>
 800c640:	2a25      	cmp	r2, #37	; 0x25
 800c642:	d1f9      	bne.n	800c638 <_svfiprintf_r+0x50>
 800c644:	ebba 0b04 	subs.w	fp, sl, r4
 800c648:	d00b      	beq.n	800c662 <_svfiprintf_r+0x7a>
 800c64a:	465b      	mov	r3, fp
 800c64c:	4622      	mov	r2, r4
 800c64e:	4629      	mov	r1, r5
 800c650:	4638      	mov	r0, r7
 800c652:	f7ff ff6f 	bl	800c534 <__ssputs_r>
 800c656:	3001      	adds	r0, #1
 800c658:	f000 80a9 	beq.w	800c7ae <_svfiprintf_r+0x1c6>
 800c65c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c65e:	445a      	add	r2, fp
 800c660:	9209      	str	r2, [sp, #36]	; 0x24
 800c662:	f89a 3000 	ldrb.w	r3, [sl]
 800c666:	2b00      	cmp	r3, #0
 800c668:	f000 80a1 	beq.w	800c7ae <_svfiprintf_r+0x1c6>
 800c66c:	2300      	movs	r3, #0
 800c66e:	f04f 32ff 	mov.w	r2, #4294967295
 800c672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c676:	f10a 0a01 	add.w	sl, sl, #1
 800c67a:	9304      	str	r3, [sp, #16]
 800c67c:	9307      	str	r3, [sp, #28]
 800c67e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c682:	931a      	str	r3, [sp, #104]	; 0x68
 800c684:	4654      	mov	r4, sl
 800c686:	2205      	movs	r2, #5
 800c688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c68c:	4850      	ldr	r0, [pc, #320]	; (800c7d0 <_svfiprintf_r+0x1e8>)
 800c68e:	f7f3 fd9f 	bl	80001d0 <memchr>
 800c692:	9a04      	ldr	r2, [sp, #16]
 800c694:	b9d8      	cbnz	r0, 800c6ce <_svfiprintf_r+0xe6>
 800c696:	06d0      	lsls	r0, r2, #27
 800c698:	bf44      	itt	mi
 800c69a:	2320      	movmi	r3, #32
 800c69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6a0:	0711      	lsls	r1, r2, #28
 800c6a2:	bf44      	itt	mi
 800c6a4:	232b      	movmi	r3, #43	; 0x2b
 800c6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c6b0:	d015      	beq.n	800c6de <_svfiprintf_r+0xf6>
 800c6b2:	9a07      	ldr	r2, [sp, #28]
 800c6b4:	4654      	mov	r4, sl
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	f04f 0c0a 	mov.w	ip, #10
 800c6bc:	4621      	mov	r1, r4
 800c6be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6c2:	3b30      	subs	r3, #48	; 0x30
 800c6c4:	2b09      	cmp	r3, #9
 800c6c6:	d94d      	bls.n	800c764 <_svfiprintf_r+0x17c>
 800c6c8:	b1b0      	cbz	r0, 800c6f8 <_svfiprintf_r+0x110>
 800c6ca:	9207      	str	r2, [sp, #28]
 800c6cc:	e014      	b.n	800c6f8 <_svfiprintf_r+0x110>
 800c6ce:	eba0 0308 	sub.w	r3, r0, r8
 800c6d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	9304      	str	r3, [sp, #16]
 800c6da:	46a2      	mov	sl, r4
 800c6dc:	e7d2      	b.n	800c684 <_svfiprintf_r+0x9c>
 800c6de:	9b03      	ldr	r3, [sp, #12]
 800c6e0:	1d19      	adds	r1, r3, #4
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	9103      	str	r1, [sp, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	bfbb      	ittet	lt
 800c6ea:	425b      	neglt	r3, r3
 800c6ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c6f0:	9307      	strge	r3, [sp, #28]
 800c6f2:	9307      	strlt	r3, [sp, #28]
 800c6f4:	bfb8      	it	lt
 800c6f6:	9204      	strlt	r2, [sp, #16]
 800c6f8:	7823      	ldrb	r3, [r4, #0]
 800c6fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c6fc:	d10c      	bne.n	800c718 <_svfiprintf_r+0x130>
 800c6fe:	7863      	ldrb	r3, [r4, #1]
 800c700:	2b2a      	cmp	r3, #42	; 0x2a
 800c702:	d134      	bne.n	800c76e <_svfiprintf_r+0x186>
 800c704:	9b03      	ldr	r3, [sp, #12]
 800c706:	1d1a      	adds	r2, r3, #4
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	9203      	str	r2, [sp, #12]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	bfb8      	it	lt
 800c710:	f04f 33ff 	movlt.w	r3, #4294967295
 800c714:	3402      	adds	r4, #2
 800c716:	9305      	str	r3, [sp, #20]
 800c718:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c7e0 <_svfiprintf_r+0x1f8>
 800c71c:	7821      	ldrb	r1, [r4, #0]
 800c71e:	2203      	movs	r2, #3
 800c720:	4650      	mov	r0, sl
 800c722:	f7f3 fd55 	bl	80001d0 <memchr>
 800c726:	b138      	cbz	r0, 800c738 <_svfiprintf_r+0x150>
 800c728:	9b04      	ldr	r3, [sp, #16]
 800c72a:	eba0 000a 	sub.w	r0, r0, sl
 800c72e:	2240      	movs	r2, #64	; 0x40
 800c730:	4082      	lsls	r2, r0
 800c732:	4313      	orrs	r3, r2
 800c734:	3401      	adds	r4, #1
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c73c:	4825      	ldr	r0, [pc, #148]	; (800c7d4 <_svfiprintf_r+0x1ec>)
 800c73e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c742:	2206      	movs	r2, #6
 800c744:	f7f3 fd44 	bl	80001d0 <memchr>
 800c748:	2800      	cmp	r0, #0
 800c74a:	d038      	beq.n	800c7be <_svfiprintf_r+0x1d6>
 800c74c:	4b22      	ldr	r3, [pc, #136]	; (800c7d8 <_svfiprintf_r+0x1f0>)
 800c74e:	bb1b      	cbnz	r3, 800c798 <_svfiprintf_r+0x1b0>
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	3307      	adds	r3, #7
 800c754:	f023 0307 	bic.w	r3, r3, #7
 800c758:	3308      	adds	r3, #8
 800c75a:	9303      	str	r3, [sp, #12]
 800c75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c75e:	4433      	add	r3, r6
 800c760:	9309      	str	r3, [sp, #36]	; 0x24
 800c762:	e768      	b.n	800c636 <_svfiprintf_r+0x4e>
 800c764:	fb0c 3202 	mla	r2, ip, r2, r3
 800c768:	460c      	mov	r4, r1
 800c76a:	2001      	movs	r0, #1
 800c76c:	e7a6      	b.n	800c6bc <_svfiprintf_r+0xd4>
 800c76e:	2300      	movs	r3, #0
 800c770:	3401      	adds	r4, #1
 800c772:	9305      	str	r3, [sp, #20]
 800c774:	4619      	mov	r1, r3
 800c776:	f04f 0c0a 	mov.w	ip, #10
 800c77a:	4620      	mov	r0, r4
 800c77c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c780:	3a30      	subs	r2, #48	; 0x30
 800c782:	2a09      	cmp	r2, #9
 800c784:	d903      	bls.n	800c78e <_svfiprintf_r+0x1a6>
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0c6      	beq.n	800c718 <_svfiprintf_r+0x130>
 800c78a:	9105      	str	r1, [sp, #20]
 800c78c:	e7c4      	b.n	800c718 <_svfiprintf_r+0x130>
 800c78e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c792:	4604      	mov	r4, r0
 800c794:	2301      	movs	r3, #1
 800c796:	e7f0      	b.n	800c77a <_svfiprintf_r+0x192>
 800c798:	ab03      	add	r3, sp, #12
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	462a      	mov	r2, r5
 800c79e:	4b0f      	ldr	r3, [pc, #60]	; (800c7dc <_svfiprintf_r+0x1f4>)
 800c7a0:	a904      	add	r1, sp, #16
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	f7fc fc7a 	bl	800909c <_printf_float>
 800c7a8:	1c42      	adds	r2, r0, #1
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	d1d6      	bne.n	800c75c <_svfiprintf_r+0x174>
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	065b      	lsls	r3, r3, #25
 800c7b2:	f53f af2d 	bmi.w	800c610 <_svfiprintf_r+0x28>
 800c7b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7b8:	b01d      	add	sp, #116	; 0x74
 800c7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7be:	ab03      	add	r3, sp, #12
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <_svfiprintf_r+0x1f4>)
 800c7c6:	a904      	add	r1, sp, #16
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f7fc ff0b 	bl	80095e4 <_printf_i>
 800c7ce:	e7eb      	b.n	800c7a8 <_svfiprintf_r+0x1c0>
 800c7d0:	0800df59 	.word	0x0800df59
 800c7d4:	0800df63 	.word	0x0800df63
 800c7d8:	0800909d 	.word	0x0800909d
 800c7dc:	0800c535 	.word	0x0800c535
 800c7e0:	0800df5f 	.word	0x0800df5f

0800c7e4 <__sfputc_r>:
 800c7e4:	6893      	ldr	r3, [r2, #8]
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	b410      	push	{r4}
 800c7ec:	6093      	str	r3, [r2, #8]
 800c7ee:	da08      	bge.n	800c802 <__sfputc_r+0x1e>
 800c7f0:	6994      	ldr	r4, [r2, #24]
 800c7f2:	42a3      	cmp	r3, r4
 800c7f4:	db01      	blt.n	800c7fa <__sfputc_r+0x16>
 800c7f6:	290a      	cmp	r1, #10
 800c7f8:	d103      	bne.n	800c802 <__sfputc_r+0x1e>
 800c7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7fe:	f000 b9e3 	b.w	800cbc8 <__swbuf_r>
 800c802:	6813      	ldr	r3, [r2, #0]
 800c804:	1c58      	adds	r0, r3, #1
 800c806:	6010      	str	r0, [r2, #0]
 800c808:	7019      	strb	r1, [r3, #0]
 800c80a:	4608      	mov	r0, r1
 800c80c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <__sfputs_r>:
 800c812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c814:	4606      	mov	r6, r0
 800c816:	460f      	mov	r7, r1
 800c818:	4614      	mov	r4, r2
 800c81a:	18d5      	adds	r5, r2, r3
 800c81c:	42ac      	cmp	r4, r5
 800c81e:	d101      	bne.n	800c824 <__sfputs_r+0x12>
 800c820:	2000      	movs	r0, #0
 800c822:	e007      	b.n	800c834 <__sfputs_r+0x22>
 800c824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c828:	463a      	mov	r2, r7
 800c82a:	4630      	mov	r0, r6
 800c82c:	f7ff ffda 	bl	800c7e4 <__sfputc_r>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d1f3      	bne.n	800c81c <__sfputs_r+0xa>
 800c834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c838 <_vfiprintf_r>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	460d      	mov	r5, r1
 800c83e:	b09d      	sub	sp, #116	; 0x74
 800c840:	4614      	mov	r4, r2
 800c842:	4698      	mov	r8, r3
 800c844:	4606      	mov	r6, r0
 800c846:	b118      	cbz	r0, 800c850 <_vfiprintf_r+0x18>
 800c848:	6a03      	ldr	r3, [r0, #32]
 800c84a:	b90b      	cbnz	r3, 800c850 <_vfiprintf_r+0x18>
 800c84c:	f7fd fa76 	bl	8009d3c <__sinit>
 800c850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c852:	07d9      	lsls	r1, r3, #31
 800c854:	d405      	bmi.n	800c862 <_vfiprintf_r+0x2a>
 800c856:	89ab      	ldrh	r3, [r5, #12]
 800c858:	059a      	lsls	r2, r3, #22
 800c85a:	d402      	bmi.n	800c862 <_vfiprintf_r+0x2a>
 800c85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c85e:	f7fd fb95 	bl	8009f8c <__retarget_lock_acquire_recursive>
 800c862:	89ab      	ldrh	r3, [r5, #12]
 800c864:	071b      	lsls	r3, r3, #28
 800c866:	d501      	bpl.n	800c86c <_vfiprintf_r+0x34>
 800c868:	692b      	ldr	r3, [r5, #16]
 800c86a:	b99b      	cbnz	r3, 800c894 <_vfiprintf_r+0x5c>
 800c86c:	4629      	mov	r1, r5
 800c86e:	4630      	mov	r0, r6
 800c870:	f000 f9e8 	bl	800cc44 <__swsetup_r>
 800c874:	b170      	cbz	r0, 800c894 <_vfiprintf_r+0x5c>
 800c876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c878:	07dc      	lsls	r4, r3, #31
 800c87a:	d504      	bpl.n	800c886 <_vfiprintf_r+0x4e>
 800c87c:	f04f 30ff 	mov.w	r0, #4294967295
 800c880:	b01d      	add	sp, #116	; 0x74
 800c882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c886:	89ab      	ldrh	r3, [r5, #12]
 800c888:	0598      	lsls	r0, r3, #22
 800c88a:	d4f7      	bmi.n	800c87c <_vfiprintf_r+0x44>
 800c88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c88e:	f7fd fb7e 	bl	8009f8e <__retarget_lock_release_recursive>
 800c892:	e7f3      	b.n	800c87c <_vfiprintf_r+0x44>
 800c894:	2300      	movs	r3, #0
 800c896:	9309      	str	r3, [sp, #36]	; 0x24
 800c898:	2320      	movs	r3, #32
 800c89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c89e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8a2:	2330      	movs	r3, #48	; 0x30
 800c8a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ca58 <_vfiprintf_r+0x220>
 800c8a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8ac:	f04f 0901 	mov.w	r9, #1
 800c8b0:	4623      	mov	r3, r4
 800c8b2:	469a      	mov	sl, r3
 800c8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8b8:	b10a      	cbz	r2, 800c8be <_vfiprintf_r+0x86>
 800c8ba:	2a25      	cmp	r2, #37	; 0x25
 800c8bc:	d1f9      	bne.n	800c8b2 <_vfiprintf_r+0x7a>
 800c8be:	ebba 0b04 	subs.w	fp, sl, r4
 800c8c2:	d00b      	beq.n	800c8dc <_vfiprintf_r+0xa4>
 800c8c4:	465b      	mov	r3, fp
 800c8c6:	4622      	mov	r2, r4
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f7ff ffa1 	bl	800c812 <__sfputs_r>
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	f000 80a9 	beq.w	800ca28 <_vfiprintf_r+0x1f0>
 800c8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d8:	445a      	add	r2, fp
 800c8da:	9209      	str	r2, [sp, #36]	; 0x24
 800c8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f000 80a1 	beq.w	800ca28 <_vfiprintf_r+0x1f0>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8f0:	f10a 0a01 	add.w	sl, sl, #1
 800c8f4:	9304      	str	r3, [sp, #16]
 800c8f6:	9307      	str	r3, [sp, #28]
 800c8f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c8fe:	4654      	mov	r4, sl
 800c900:	2205      	movs	r2, #5
 800c902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c906:	4854      	ldr	r0, [pc, #336]	; (800ca58 <_vfiprintf_r+0x220>)
 800c908:	f7f3 fc62 	bl	80001d0 <memchr>
 800c90c:	9a04      	ldr	r2, [sp, #16]
 800c90e:	b9d8      	cbnz	r0, 800c948 <_vfiprintf_r+0x110>
 800c910:	06d1      	lsls	r1, r2, #27
 800c912:	bf44      	itt	mi
 800c914:	2320      	movmi	r3, #32
 800c916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c91a:	0713      	lsls	r3, r2, #28
 800c91c:	bf44      	itt	mi
 800c91e:	232b      	movmi	r3, #43	; 0x2b
 800c920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c924:	f89a 3000 	ldrb.w	r3, [sl]
 800c928:	2b2a      	cmp	r3, #42	; 0x2a
 800c92a:	d015      	beq.n	800c958 <_vfiprintf_r+0x120>
 800c92c:	9a07      	ldr	r2, [sp, #28]
 800c92e:	4654      	mov	r4, sl
 800c930:	2000      	movs	r0, #0
 800c932:	f04f 0c0a 	mov.w	ip, #10
 800c936:	4621      	mov	r1, r4
 800c938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c93c:	3b30      	subs	r3, #48	; 0x30
 800c93e:	2b09      	cmp	r3, #9
 800c940:	d94d      	bls.n	800c9de <_vfiprintf_r+0x1a6>
 800c942:	b1b0      	cbz	r0, 800c972 <_vfiprintf_r+0x13a>
 800c944:	9207      	str	r2, [sp, #28]
 800c946:	e014      	b.n	800c972 <_vfiprintf_r+0x13a>
 800c948:	eba0 0308 	sub.w	r3, r0, r8
 800c94c:	fa09 f303 	lsl.w	r3, r9, r3
 800c950:	4313      	orrs	r3, r2
 800c952:	9304      	str	r3, [sp, #16]
 800c954:	46a2      	mov	sl, r4
 800c956:	e7d2      	b.n	800c8fe <_vfiprintf_r+0xc6>
 800c958:	9b03      	ldr	r3, [sp, #12]
 800c95a:	1d19      	adds	r1, r3, #4
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	9103      	str	r1, [sp, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	bfbb      	ittet	lt
 800c964:	425b      	neglt	r3, r3
 800c966:	f042 0202 	orrlt.w	r2, r2, #2
 800c96a:	9307      	strge	r3, [sp, #28]
 800c96c:	9307      	strlt	r3, [sp, #28]
 800c96e:	bfb8      	it	lt
 800c970:	9204      	strlt	r2, [sp, #16]
 800c972:	7823      	ldrb	r3, [r4, #0]
 800c974:	2b2e      	cmp	r3, #46	; 0x2e
 800c976:	d10c      	bne.n	800c992 <_vfiprintf_r+0x15a>
 800c978:	7863      	ldrb	r3, [r4, #1]
 800c97a:	2b2a      	cmp	r3, #42	; 0x2a
 800c97c:	d134      	bne.n	800c9e8 <_vfiprintf_r+0x1b0>
 800c97e:	9b03      	ldr	r3, [sp, #12]
 800c980:	1d1a      	adds	r2, r3, #4
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	9203      	str	r2, [sp, #12]
 800c986:	2b00      	cmp	r3, #0
 800c988:	bfb8      	it	lt
 800c98a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c98e:	3402      	adds	r4, #2
 800c990:	9305      	str	r3, [sp, #20]
 800c992:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ca68 <_vfiprintf_r+0x230>
 800c996:	7821      	ldrb	r1, [r4, #0]
 800c998:	2203      	movs	r2, #3
 800c99a:	4650      	mov	r0, sl
 800c99c:	f7f3 fc18 	bl	80001d0 <memchr>
 800c9a0:	b138      	cbz	r0, 800c9b2 <_vfiprintf_r+0x17a>
 800c9a2:	9b04      	ldr	r3, [sp, #16]
 800c9a4:	eba0 000a 	sub.w	r0, r0, sl
 800c9a8:	2240      	movs	r2, #64	; 0x40
 800c9aa:	4082      	lsls	r2, r0
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	3401      	adds	r4, #1
 800c9b0:	9304      	str	r3, [sp, #16]
 800c9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b6:	4829      	ldr	r0, [pc, #164]	; (800ca5c <_vfiprintf_r+0x224>)
 800c9b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9bc:	2206      	movs	r2, #6
 800c9be:	f7f3 fc07 	bl	80001d0 <memchr>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d03f      	beq.n	800ca46 <_vfiprintf_r+0x20e>
 800c9c6:	4b26      	ldr	r3, [pc, #152]	; (800ca60 <_vfiprintf_r+0x228>)
 800c9c8:	bb1b      	cbnz	r3, 800ca12 <_vfiprintf_r+0x1da>
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	3307      	adds	r3, #7
 800c9ce:	f023 0307 	bic.w	r3, r3, #7
 800c9d2:	3308      	adds	r3, #8
 800c9d4:	9303      	str	r3, [sp, #12]
 800c9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d8:	443b      	add	r3, r7
 800c9da:	9309      	str	r3, [sp, #36]	; 0x24
 800c9dc:	e768      	b.n	800c8b0 <_vfiprintf_r+0x78>
 800c9de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	2001      	movs	r0, #1
 800c9e6:	e7a6      	b.n	800c936 <_vfiprintf_r+0xfe>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	9305      	str	r3, [sp, #20]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	f04f 0c0a 	mov.w	ip, #10
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9fa:	3a30      	subs	r2, #48	; 0x30
 800c9fc:	2a09      	cmp	r2, #9
 800c9fe:	d903      	bls.n	800ca08 <_vfiprintf_r+0x1d0>
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d0c6      	beq.n	800c992 <_vfiprintf_r+0x15a>
 800ca04:	9105      	str	r1, [sp, #20]
 800ca06:	e7c4      	b.n	800c992 <_vfiprintf_r+0x15a>
 800ca08:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e7f0      	b.n	800c9f4 <_vfiprintf_r+0x1bc>
 800ca12:	ab03      	add	r3, sp, #12
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	462a      	mov	r2, r5
 800ca18:	4b12      	ldr	r3, [pc, #72]	; (800ca64 <_vfiprintf_r+0x22c>)
 800ca1a:	a904      	add	r1, sp, #16
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	f7fc fb3d 	bl	800909c <_printf_float>
 800ca22:	4607      	mov	r7, r0
 800ca24:	1c78      	adds	r0, r7, #1
 800ca26:	d1d6      	bne.n	800c9d6 <_vfiprintf_r+0x19e>
 800ca28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca2a:	07d9      	lsls	r1, r3, #31
 800ca2c:	d405      	bmi.n	800ca3a <_vfiprintf_r+0x202>
 800ca2e:	89ab      	ldrh	r3, [r5, #12]
 800ca30:	059a      	lsls	r2, r3, #22
 800ca32:	d402      	bmi.n	800ca3a <_vfiprintf_r+0x202>
 800ca34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca36:	f7fd faaa 	bl	8009f8e <__retarget_lock_release_recursive>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	065b      	lsls	r3, r3, #25
 800ca3e:	f53f af1d 	bmi.w	800c87c <_vfiprintf_r+0x44>
 800ca42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca44:	e71c      	b.n	800c880 <_vfiprintf_r+0x48>
 800ca46:	ab03      	add	r3, sp, #12
 800ca48:	9300      	str	r3, [sp, #0]
 800ca4a:	462a      	mov	r2, r5
 800ca4c:	4b05      	ldr	r3, [pc, #20]	; (800ca64 <_vfiprintf_r+0x22c>)
 800ca4e:	a904      	add	r1, sp, #16
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7fc fdc7 	bl	80095e4 <_printf_i>
 800ca56:	e7e4      	b.n	800ca22 <_vfiprintf_r+0x1ea>
 800ca58:	0800df59 	.word	0x0800df59
 800ca5c:	0800df63 	.word	0x0800df63
 800ca60:	0800909d 	.word	0x0800909d
 800ca64:	0800c813 	.word	0x0800c813
 800ca68:	0800df5f 	.word	0x0800df5f

0800ca6c <__sflush_r>:
 800ca6c:	898a      	ldrh	r2, [r1, #12]
 800ca6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca72:	4605      	mov	r5, r0
 800ca74:	0710      	lsls	r0, r2, #28
 800ca76:	460c      	mov	r4, r1
 800ca78:	d458      	bmi.n	800cb2c <__sflush_r+0xc0>
 800ca7a:	684b      	ldr	r3, [r1, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	dc05      	bgt.n	800ca8c <__sflush_r+0x20>
 800ca80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	dc02      	bgt.n	800ca8c <__sflush_r+0x20>
 800ca86:	2000      	movs	r0, #0
 800ca88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca8e:	2e00      	cmp	r6, #0
 800ca90:	d0f9      	beq.n	800ca86 <__sflush_r+0x1a>
 800ca92:	2300      	movs	r3, #0
 800ca94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca98:	682f      	ldr	r7, [r5, #0]
 800ca9a:	6a21      	ldr	r1, [r4, #32]
 800ca9c:	602b      	str	r3, [r5, #0]
 800ca9e:	d032      	beq.n	800cb06 <__sflush_r+0x9a>
 800caa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	075a      	lsls	r2, r3, #29
 800caa6:	d505      	bpl.n	800cab4 <__sflush_r+0x48>
 800caa8:	6863      	ldr	r3, [r4, #4]
 800caaa:	1ac0      	subs	r0, r0, r3
 800caac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caae:	b10b      	cbz	r3, 800cab4 <__sflush_r+0x48>
 800cab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cab2:	1ac0      	subs	r0, r0, r3
 800cab4:	2300      	movs	r3, #0
 800cab6:	4602      	mov	r2, r0
 800cab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caba:	6a21      	ldr	r1, [r4, #32]
 800cabc:	4628      	mov	r0, r5
 800cabe:	47b0      	blx	r6
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	89a3      	ldrh	r3, [r4, #12]
 800cac4:	d106      	bne.n	800cad4 <__sflush_r+0x68>
 800cac6:	6829      	ldr	r1, [r5, #0]
 800cac8:	291d      	cmp	r1, #29
 800caca:	d82b      	bhi.n	800cb24 <__sflush_r+0xb8>
 800cacc:	4a29      	ldr	r2, [pc, #164]	; (800cb74 <__sflush_r+0x108>)
 800cace:	410a      	asrs	r2, r1
 800cad0:	07d6      	lsls	r6, r2, #31
 800cad2:	d427      	bmi.n	800cb24 <__sflush_r+0xb8>
 800cad4:	2200      	movs	r2, #0
 800cad6:	6062      	str	r2, [r4, #4]
 800cad8:	04d9      	lsls	r1, r3, #19
 800cada:	6922      	ldr	r2, [r4, #16]
 800cadc:	6022      	str	r2, [r4, #0]
 800cade:	d504      	bpl.n	800caea <__sflush_r+0x7e>
 800cae0:	1c42      	adds	r2, r0, #1
 800cae2:	d101      	bne.n	800cae8 <__sflush_r+0x7c>
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	b903      	cbnz	r3, 800caea <__sflush_r+0x7e>
 800cae8:	6560      	str	r0, [r4, #84]	; 0x54
 800caea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caec:	602f      	str	r7, [r5, #0]
 800caee:	2900      	cmp	r1, #0
 800caf0:	d0c9      	beq.n	800ca86 <__sflush_r+0x1a>
 800caf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800caf6:	4299      	cmp	r1, r3
 800caf8:	d002      	beq.n	800cb00 <__sflush_r+0x94>
 800cafa:	4628      	mov	r0, r5
 800cafc:	f7fe f8d6 	bl	800acac <_free_r>
 800cb00:	2000      	movs	r0, #0
 800cb02:	6360      	str	r0, [r4, #52]	; 0x34
 800cb04:	e7c0      	b.n	800ca88 <__sflush_r+0x1c>
 800cb06:	2301      	movs	r3, #1
 800cb08:	4628      	mov	r0, r5
 800cb0a:	47b0      	blx	r6
 800cb0c:	1c41      	adds	r1, r0, #1
 800cb0e:	d1c8      	bne.n	800caa2 <__sflush_r+0x36>
 800cb10:	682b      	ldr	r3, [r5, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d0c5      	beq.n	800caa2 <__sflush_r+0x36>
 800cb16:	2b1d      	cmp	r3, #29
 800cb18:	d001      	beq.n	800cb1e <__sflush_r+0xb2>
 800cb1a:	2b16      	cmp	r3, #22
 800cb1c:	d101      	bne.n	800cb22 <__sflush_r+0xb6>
 800cb1e:	602f      	str	r7, [r5, #0]
 800cb20:	e7b1      	b.n	800ca86 <__sflush_r+0x1a>
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb28:	81a3      	strh	r3, [r4, #12]
 800cb2a:	e7ad      	b.n	800ca88 <__sflush_r+0x1c>
 800cb2c:	690f      	ldr	r7, [r1, #16]
 800cb2e:	2f00      	cmp	r7, #0
 800cb30:	d0a9      	beq.n	800ca86 <__sflush_r+0x1a>
 800cb32:	0793      	lsls	r3, r2, #30
 800cb34:	680e      	ldr	r6, [r1, #0]
 800cb36:	bf08      	it	eq
 800cb38:	694b      	ldreq	r3, [r1, #20]
 800cb3a:	600f      	str	r7, [r1, #0]
 800cb3c:	bf18      	it	ne
 800cb3e:	2300      	movne	r3, #0
 800cb40:	eba6 0807 	sub.w	r8, r6, r7
 800cb44:	608b      	str	r3, [r1, #8]
 800cb46:	f1b8 0f00 	cmp.w	r8, #0
 800cb4a:	dd9c      	ble.n	800ca86 <__sflush_r+0x1a>
 800cb4c:	6a21      	ldr	r1, [r4, #32]
 800cb4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb50:	4643      	mov	r3, r8
 800cb52:	463a      	mov	r2, r7
 800cb54:	4628      	mov	r0, r5
 800cb56:	47b0      	blx	r6
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	dc06      	bgt.n	800cb6a <__sflush_r+0xfe>
 800cb5c:	89a3      	ldrh	r3, [r4, #12]
 800cb5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb62:	81a3      	strh	r3, [r4, #12]
 800cb64:	f04f 30ff 	mov.w	r0, #4294967295
 800cb68:	e78e      	b.n	800ca88 <__sflush_r+0x1c>
 800cb6a:	4407      	add	r7, r0
 800cb6c:	eba8 0800 	sub.w	r8, r8, r0
 800cb70:	e7e9      	b.n	800cb46 <__sflush_r+0xda>
 800cb72:	bf00      	nop
 800cb74:	dfbffffe 	.word	0xdfbffffe

0800cb78 <_fflush_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	690b      	ldr	r3, [r1, #16]
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	460c      	mov	r4, r1
 800cb80:	b913      	cbnz	r3, 800cb88 <_fflush_r+0x10>
 800cb82:	2500      	movs	r5, #0
 800cb84:	4628      	mov	r0, r5
 800cb86:	bd38      	pop	{r3, r4, r5, pc}
 800cb88:	b118      	cbz	r0, 800cb92 <_fflush_r+0x1a>
 800cb8a:	6a03      	ldr	r3, [r0, #32]
 800cb8c:	b90b      	cbnz	r3, 800cb92 <_fflush_r+0x1a>
 800cb8e:	f7fd f8d5 	bl	8009d3c <__sinit>
 800cb92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d0f3      	beq.n	800cb82 <_fflush_r+0xa>
 800cb9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb9c:	07d0      	lsls	r0, r2, #31
 800cb9e:	d404      	bmi.n	800cbaa <_fflush_r+0x32>
 800cba0:	0599      	lsls	r1, r3, #22
 800cba2:	d402      	bmi.n	800cbaa <_fflush_r+0x32>
 800cba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cba6:	f7fd f9f1 	bl	8009f8c <__retarget_lock_acquire_recursive>
 800cbaa:	4628      	mov	r0, r5
 800cbac:	4621      	mov	r1, r4
 800cbae:	f7ff ff5d 	bl	800ca6c <__sflush_r>
 800cbb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbb4:	07da      	lsls	r2, r3, #31
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	d4e4      	bmi.n	800cb84 <_fflush_r+0xc>
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	059b      	lsls	r3, r3, #22
 800cbbe:	d4e1      	bmi.n	800cb84 <_fflush_r+0xc>
 800cbc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbc2:	f7fd f9e4 	bl	8009f8e <__retarget_lock_release_recursive>
 800cbc6:	e7dd      	b.n	800cb84 <_fflush_r+0xc>

0800cbc8 <__swbuf_r>:
 800cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbca:	460e      	mov	r6, r1
 800cbcc:	4614      	mov	r4, r2
 800cbce:	4605      	mov	r5, r0
 800cbd0:	b118      	cbz	r0, 800cbda <__swbuf_r+0x12>
 800cbd2:	6a03      	ldr	r3, [r0, #32]
 800cbd4:	b90b      	cbnz	r3, 800cbda <__swbuf_r+0x12>
 800cbd6:	f7fd f8b1 	bl	8009d3c <__sinit>
 800cbda:	69a3      	ldr	r3, [r4, #24]
 800cbdc:	60a3      	str	r3, [r4, #8]
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	071a      	lsls	r2, r3, #28
 800cbe2:	d525      	bpl.n	800cc30 <__swbuf_r+0x68>
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	b31b      	cbz	r3, 800cc30 <__swbuf_r+0x68>
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	6922      	ldr	r2, [r4, #16]
 800cbec:	1a98      	subs	r0, r3, r2
 800cbee:	6963      	ldr	r3, [r4, #20]
 800cbf0:	b2f6      	uxtb	r6, r6
 800cbf2:	4283      	cmp	r3, r0
 800cbf4:	4637      	mov	r7, r6
 800cbf6:	dc04      	bgt.n	800cc02 <__swbuf_r+0x3a>
 800cbf8:	4621      	mov	r1, r4
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	f7ff ffbc 	bl	800cb78 <_fflush_r>
 800cc00:	b9e0      	cbnz	r0, 800cc3c <__swbuf_r+0x74>
 800cc02:	68a3      	ldr	r3, [r4, #8]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	60a3      	str	r3, [r4, #8]
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	6022      	str	r2, [r4, #0]
 800cc0e:	701e      	strb	r6, [r3, #0]
 800cc10:	6962      	ldr	r2, [r4, #20]
 800cc12:	1c43      	adds	r3, r0, #1
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d004      	beq.n	800cc22 <__swbuf_r+0x5a>
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	07db      	lsls	r3, r3, #31
 800cc1c:	d506      	bpl.n	800cc2c <__swbuf_r+0x64>
 800cc1e:	2e0a      	cmp	r6, #10
 800cc20:	d104      	bne.n	800cc2c <__swbuf_r+0x64>
 800cc22:	4621      	mov	r1, r4
 800cc24:	4628      	mov	r0, r5
 800cc26:	f7ff ffa7 	bl	800cb78 <_fflush_r>
 800cc2a:	b938      	cbnz	r0, 800cc3c <__swbuf_r+0x74>
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc30:	4621      	mov	r1, r4
 800cc32:	4628      	mov	r0, r5
 800cc34:	f000 f806 	bl	800cc44 <__swsetup_r>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d0d5      	beq.n	800cbe8 <__swbuf_r+0x20>
 800cc3c:	f04f 37ff 	mov.w	r7, #4294967295
 800cc40:	e7f4      	b.n	800cc2c <__swbuf_r+0x64>
	...

0800cc44 <__swsetup_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4b2a      	ldr	r3, [pc, #168]	; (800ccf0 <__swsetup_r+0xac>)
 800cc48:	4605      	mov	r5, r0
 800cc4a:	6818      	ldr	r0, [r3, #0]
 800cc4c:	460c      	mov	r4, r1
 800cc4e:	b118      	cbz	r0, 800cc58 <__swsetup_r+0x14>
 800cc50:	6a03      	ldr	r3, [r0, #32]
 800cc52:	b90b      	cbnz	r3, 800cc58 <__swsetup_r+0x14>
 800cc54:	f7fd f872 	bl	8009d3c <__sinit>
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc5e:	0718      	lsls	r0, r3, #28
 800cc60:	d422      	bmi.n	800cca8 <__swsetup_r+0x64>
 800cc62:	06d9      	lsls	r1, r3, #27
 800cc64:	d407      	bmi.n	800cc76 <__swsetup_r+0x32>
 800cc66:	2309      	movs	r3, #9
 800cc68:	602b      	str	r3, [r5, #0]
 800cc6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc6e:	81a3      	strh	r3, [r4, #12]
 800cc70:	f04f 30ff 	mov.w	r0, #4294967295
 800cc74:	e034      	b.n	800cce0 <__swsetup_r+0x9c>
 800cc76:	0758      	lsls	r0, r3, #29
 800cc78:	d512      	bpl.n	800cca0 <__swsetup_r+0x5c>
 800cc7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc7c:	b141      	cbz	r1, 800cc90 <__swsetup_r+0x4c>
 800cc7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc82:	4299      	cmp	r1, r3
 800cc84:	d002      	beq.n	800cc8c <__swsetup_r+0x48>
 800cc86:	4628      	mov	r0, r5
 800cc88:	f7fe f810 	bl	800acac <_free_r>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	6363      	str	r3, [r4, #52]	; 0x34
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc96:	81a3      	strh	r3, [r4, #12]
 800cc98:	2300      	movs	r3, #0
 800cc9a:	6063      	str	r3, [r4, #4]
 800cc9c:	6923      	ldr	r3, [r4, #16]
 800cc9e:	6023      	str	r3, [r4, #0]
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	f043 0308 	orr.w	r3, r3, #8
 800cca6:	81a3      	strh	r3, [r4, #12]
 800cca8:	6923      	ldr	r3, [r4, #16]
 800ccaa:	b94b      	cbnz	r3, 800ccc0 <__swsetup_r+0x7c>
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ccb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccb6:	d003      	beq.n	800ccc0 <__swsetup_r+0x7c>
 800ccb8:	4621      	mov	r1, r4
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f000 fc72 	bl	800d5a4 <__smakebuf_r>
 800ccc0:	89a0      	ldrh	r0, [r4, #12]
 800ccc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccc6:	f010 0301 	ands.w	r3, r0, #1
 800ccca:	d00a      	beq.n	800cce2 <__swsetup_r+0x9e>
 800cccc:	2300      	movs	r3, #0
 800ccce:	60a3      	str	r3, [r4, #8]
 800ccd0:	6963      	ldr	r3, [r4, #20]
 800ccd2:	425b      	negs	r3, r3
 800ccd4:	61a3      	str	r3, [r4, #24]
 800ccd6:	6923      	ldr	r3, [r4, #16]
 800ccd8:	b943      	cbnz	r3, 800ccec <__swsetup_r+0xa8>
 800ccda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccde:	d1c4      	bne.n	800cc6a <__swsetup_r+0x26>
 800cce0:	bd38      	pop	{r3, r4, r5, pc}
 800cce2:	0781      	lsls	r1, r0, #30
 800cce4:	bf58      	it	pl
 800cce6:	6963      	ldrpl	r3, [r4, #20]
 800cce8:	60a3      	str	r3, [r4, #8]
 800ccea:	e7f4      	b.n	800ccd6 <__swsetup_r+0x92>
 800ccec:	2000      	movs	r0, #0
 800ccee:	e7f7      	b.n	800cce0 <__swsetup_r+0x9c>
 800ccf0:	20000098 	.word	0x20000098

0800ccf4 <memmove>:
 800ccf4:	4288      	cmp	r0, r1
 800ccf6:	b510      	push	{r4, lr}
 800ccf8:	eb01 0402 	add.w	r4, r1, r2
 800ccfc:	d902      	bls.n	800cd04 <memmove+0x10>
 800ccfe:	4284      	cmp	r4, r0
 800cd00:	4623      	mov	r3, r4
 800cd02:	d807      	bhi.n	800cd14 <memmove+0x20>
 800cd04:	1e43      	subs	r3, r0, #1
 800cd06:	42a1      	cmp	r1, r4
 800cd08:	d008      	beq.n	800cd1c <memmove+0x28>
 800cd0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd12:	e7f8      	b.n	800cd06 <memmove+0x12>
 800cd14:	4402      	add	r2, r0
 800cd16:	4601      	mov	r1, r0
 800cd18:	428a      	cmp	r2, r1
 800cd1a:	d100      	bne.n	800cd1e <memmove+0x2a>
 800cd1c:	bd10      	pop	{r4, pc}
 800cd1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd26:	e7f7      	b.n	800cd18 <memmove+0x24>

0800cd28 <strncmp>:
 800cd28:	b510      	push	{r4, lr}
 800cd2a:	b16a      	cbz	r2, 800cd48 <strncmp+0x20>
 800cd2c:	3901      	subs	r1, #1
 800cd2e:	1884      	adds	r4, r0, r2
 800cd30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d103      	bne.n	800cd44 <strncmp+0x1c>
 800cd3c:	42a0      	cmp	r0, r4
 800cd3e:	d001      	beq.n	800cd44 <strncmp+0x1c>
 800cd40:	2a00      	cmp	r2, #0
 800cd42:	d1f5      	bne.n	800cd30 <strncmp+0x8>
 800cd44:	1ad0      	subs	r0, r2, r3
 800cd46:	bd10      	pop	{r4, pc}
 800cd48:	4610      	mov	r0, r2
 800cd4a:	e7fc      	b.n	800cd46 <strncmp+0x1e>

0800cd4c <_sbrk_r>:
 800cd4c:	b538      	push	{r3, r4, r5, lr}
 800cd4e:	4d06      	ldr	r5, [pc, #24]	; (800cd68 <_sbrk_r+0x1c>)
 800cd50:	2300      	movs	r3, #0
 800cd52:	4604      	mov	r4, r0
 800cd54:	4608      	mov	r0, r1
 800cd56:	602b      	str	r3, [r5, #0]
 800cd58:	f7f5 ffde 	bl	8002d18 <_sbrk>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	d102      	bne.n	800cd66 <_sbrk_r+0x1a>
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	b103      	cbz	r3, 800cd66 <_sbrk_r+0x1a>
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	20005928 	.word	0x20005928
 800cd6c:	00000000 	.word	0x00000000

0800cd70 <nan>:
 800cd70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd78 <nan+0x8>
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	00000000 	.word	0x00000000
 800cd7c:	7ff80000 	.word	0x7ff80000

0800cd80 <__assert_func>:
 800cd80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd82:	4614      	mov	r4, r2
 800cd84:	461a      	mov	r2, r3
 800cd86:	4b09      	ldr	r3, [pc, #36]	; (800cdac <__assert_func+0x2c>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	68d8      	ldr	r0, [r3, #12]
 800cd8e:	b14c      	cbz	r4, 800cda4 <__assert_func+0x24>
 800cd90:	4b07      	ldr	r3, [pc, #28]	; (800cdb0 <__assert_func+0x30>)
 800cd92:	9100      	str	r1, [sp, #0]
 800cd94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd98:	4906      	ldr	r1, [pc, #24]	; (800cdb4 <__assert_func+0x34>)
 800cd9a:	462b      	mov	r3, r5
 800cd9c:	f000 fbca 	bl	800d534 <fiprintf>
 800cda0:	f000 fc5e 	bl	800d660 <abort>
 800cda4:	4b04      	ldr	r3, [pc, #16]	; (800cdb8 <__assert_func+0x38>)
 800cda6:	461c      	mov	r4, r3
 800cda8:	e7f3      	b.n	800cd92 <__assert_func+0x12>
 800cdaa:	bf00      	nop
 800cdac:	20000098 	.word	0x20000098
 800cdb0:	0800df72 	.word	0x0800df72
 800cdb4:	0800df7f 	.word	0x0800df7f
 800cdb8:	0800dfad 	.word	0x0800dfad

0800cdbc <_calloc_r>:
 800cdbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdbe:	fba1 2402 	umull	r2, r4, r1, r2
 800cdc2:	b94c      	cbnz	r4, 800cdd8 <_calloc_r+0x1c>
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	9201      	str	r2, [sp, #4]
 800cdc8:	f7fd ffe4 	bl	800ad94 <_malloc_r>
 800cdcc:	9a01      	ldr	r2, [sp, #4]
 800cdce:	4605      	mov	r5, r0
 800cdd0:	b930      	cbnz	r0, 800cde0 <_calloc_r+0x24>
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	b003      	add	sp, #12
 800cdd6:	bd30      	pop	{r4, r5, pc}
 800cdd8:	220c      	movs	r2, #12
 800cdda:	6002      	str	r2, [r0, #0]
 800cddc:	2500      	movs	r5, #0
 800cdde:	e7f8      	b.n	800cdd2 <_calloc_r+0x16>
 800cde0:	4621      	mov	r1, r4
 800cde2:	f7fd f856 	bl	8009e92 <memset>
 800cde6:	e7f4      	b.n	800cdd2 <_calloc_r+0x16>

0800cde8 <rshift>:
 800cde8:	6903      	ldr	r3, [r0, #16]
 800cdea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cdee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdf2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cdf6:	f100 0414 	add.w	r4, r0, #20
 800cdfa:	dd45      	ble.n	800ce88 <rshift+0xa0>
 800cdfc:	f011 011f 	ands.w	r1, r1, #31
 800ce00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce08:	d10c      	bne.n	800ce24 <rshift+0x3c>
 800ce0a:	f100 0710 	add.w	r7, r0, #16
 800ce0e:	4629      	mov	r1, r5
 800ce10:	42b1      	cmp	r1, r6
 800ce12:	d334      	bcc.n	800ce7e <rshift+0x96>
 800ce14:	1a9b      	subs	r3, r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	1eea      	subs	r2, r5, #3
 800ce1a:	4296      	cmp	r6, r2
 800ce1c:	bf38      	it	cc
 800ce1e:	2300      	movcc	r3, #0
 800ce20:	4423      	add	r3, r4
 800ce22:	e015      	b.n	800ce50 <rshift+0x68>
 800ce24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce28:	f1c1 0820 	rsb	r8, r1, #32
 800ce2c:	40cf      	lsrs	r7, r1
 800ce2e:	f105 0e04 	add.w	lr, r5, #4
 800ce32:	46a1      	mov	r9, r4
 800ce34:	4576      	cmp	r6, lr
 800ce36:	46f4      	mov	ip, lr
 800ce38:	d815      	bhi.n	800ce66 <rshift+0x7e>
 800ce3a:	1a9a      	subs	r2, r3, r2
 800ce3c:	0092      	lsls	r2, r2, #2
 800ce3e:	3a04      	subs	r2, #4
 800ce40:	3501      	adds	r5, #1
 800ce42:	42ae      	cmp	r6, r5
 800ce44:	bf38      	it	cc
 800ce46:	2200      	movcc	r2, #0
 800ce48:	18a3      	adds	r3, r4, r2
 800ce4a:	50a7      	str	r7, [r4, r2]
 800ce4c:	b107      	cbz	r7, 800ce50 <rshift+0x68>
 800ce4e:	3304      	adds	r3, #4
 800ce50:	1b1a      	subs	r2, r3, r4
 800ce52:	42a3      	cmp	r3, r4
 800ce54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce58:	bf08      	it	eq
 800ce5a:	2300      	moveq	r3, #0
 800ce5c:	6102      	str	r2, [r0, #16]
 800ce5e:	bf08      	it	eq
 800ce60:	6143      	streq	r3, [r0, #20]
 800ce62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce66:	f8dc c000 	ldr.w	ip, [ip]
 800ce6a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce6e:	ea4c 0707 	orr.w	r7, ip, r7
 800ce72:	f849 7b04 	str.w	r7, [r9], #4
 800ce76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce7a:	40cf      	lsrs	r7, r1
 800ce7c:	e7da      	b.n	800ce34 <rshift+0x4c>
 800ce7e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce82:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce86:	e7c3      	b.n	800ce10 <rshift+0x28>
 800ce88:	4623      	mov	r3, r4
 800ce8a:	e7e1      	b.n	800ce50 <rshift+0x68>

0800ce8c <__hexdig_fun>:
 800ce8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce90:	2b09      	cmp	r3, #9
 800ce92:	d802      	bhi.n	800ce9a <__hexdig_fun+0xe>
 800ce94:	3820      	subs	r0, #32
 800ce96:	b2c0      	uxtb	r0, r0
 800ce98:	4770      	bx	lr
 800ce9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce9e:	2b05      	cmp	r3, #5
 800cea0:	d801      	bhi.n	800cea6 <__hexdig_fun+0x1a>
 800cea2:	3847      	subs	r0, #71	; 0x47
 800cea4:	e7f7      	b.n	800ce96 <__hexdig_fun+0xa>
 800cea6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ceaa:	2b05      	cmp	r3, #5
 800ceac:	d801      	bhi.n	800ceb2 <__hexdig_fun+0x26>
 800ceae:	3827      	subs	r0, #39	; 0x27
 800ceb0:	e7f1      	b.n	800ce96 <__hexdig_fun+0xa>
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	4770      	bx	lr
	...

0800ceb8 <__gethex>:
 800ceb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cebc:	4617      	mov	r7, r2
 800cebe:	680a      	ldr	r2, [r1, #0]
 800cec0:	b085      	sub	sp, #20
 800cec2:	f102 0b02 	add.w	fp, r2, #2
 800cec6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ceca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cece:	4681      	mov	r9, r0
 800ced0:	468a      	mov	sl, r1
 800ced2:	9302      	str	r3, [sp, #8]
 800ced4:	32fe      	adds	r2, #254	; 0xfe
 800ced6:	eb02 030b 	add.w	r3, r2, fp
 800ceda:	46d8      	mov	r8, fp
 800cedc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cee0:	9301      	str	r3, [sp, #4]
 800cee2:	2830      	cmp	r0, #48	; 0x30
 800cee4:	d0f7      	beq.n	800ced6 <__gethex+0x1e>
 800cee6:	f7ff ffd1 	bl	800ce8c <__hexdig_fun>
 800ceea:	4604      	mov	r4, r0
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d138      	bne.n	800cf62 <__gethex+0xaa>
 800cef0:	49a7      	ldr	r1, [pc, #668]	; (800d190 <__gethex+0x2d8>)
 800cef2:	2201      	movs	r2, #1
 800cef4:	4640      	mov	r0, r8
 800cef6:	f7ff ff17 	bl	800cd28 <strncmp>
 800cefa:	4606      	mov	r6, r0
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d169      	bne.n	800cfd4 <__gethex+0x11c>
 800cf00:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cf04:	465d      	mov	r5, fp
 800cf06:	f7ff ffc1 	bl	800ce8c <__hexdig_fun>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d064      	beq.n	800cfd8 <__gethex+0x120>
 800cf0e:	465a      	mov	r2, fp
 800cf10:	7810      	ldrb	r0, [r2, #0]
 800cf12:	2830      	cmp	r0, #48	; 0x30
 800cf14:	4690      	mov	r8, r2
 800cf16:	f102 0201 	add.w	r2, r2, #1
 800cf1a:	d0f9      	beq.n	800cf10 <__gethex+0x58>
 800cf1c:	f7ff ffb6 	bl	800ce8c <__hexdig_fun>
 800cf20:	2301      	movs	r3, #1
 800cf22:	fab0 f480 	clz	r4, r0
 800cf26:	0964      	lsrs	r4, r4, #5
 800cf28:	465e      	mov	r6, fp
 800cf2a:	9301      	str	r3, [sp, #4]
 800cf2c:	4642      	mov	r2, r8
 800cf2e:	4615      	mov	r5, r2
 800cf30:	3201      	adds	r2, #1
 800cf32:	7828      	ldrb	r0, [r5, #0]
 800cf34:	f7ff ffaa 	bl	800ce8c <__hexdig_fun>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d1f8      	bne.n	800cf2e <__gethex+0x76>
 800cf3c:	4994      	ldr	r1, [pc, #592]	; (800d190 <__gethex+0x2d8>)
 800cf3e:	2201      	movs	r2, #1
 800cf40:	4628      	mov	r0, r5
 800cf42:	f7ff fef1 	bl	800cd28 <strncmp>
 800cf46:	b978      	cbnz	r0, 800cf68 <__gethex+0xb0>
 800cf48:	b946      	cbnz	r6, 800cf5c <__gethex+0xa4>
 800cf4a:	1c6e      	adds	r6, r5, #1
 800cf4c:	4632      	mov	r2, r6
 800cf4e:	4615      	mov	r5, r2
 800cf50:	3201      	adds	r2, #1
 800cf52:	7828      	ldrb	r0, [r5, #0]
 800cf54:	f7ff ff9a 	bl	800ce8c <__hexdig_fun>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d1f8      	bne.n	800cf4e <__gethex+0x96>
 800cf5c:	1b73      	subs	r3, r6, r5
 800cf5e:	009e      	lsls	r6, r3, #2
 800cf60:	e004      	b.n	800cf6c <__gethex+0xb4>
 800cf62:	2400      	movs	r4, #0
 800cf64:	4626      	mov	r6, r4
 800cf66:	e7e1      	b.n	800cf2c <__gethex+0x74>
 800cf68:	2e00      	cmp	r6, #0
 800cf6a:	d1f7      	bne.n	800cf5c <__gethex+0xa4>
 800cf6c:	782b      	ldrb	r3, [r5, #0]
 800cf6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf72:	2b50      	cmp	r3, #80	; 0x50
 800cf74:	d13d      	bne.n	800cff2 <__gethex+0x13a>
 800cf76:	786b      	ldrb	r3, [r5, #1]
 800cf78:	2b2b      	cmp	r3, #43	; 0x2b
 800cf7a:	d02f      	beq.n	800cfdc <__gethex+0x124>
 800cf7c:	2b2d      	cmp	r3, #45	; 0x2d
 800cf7e:	d031      	beq.n	800cfe4 <__gethex+0x12c>
 800cf80:	1c69      	adds	r1, r5, #1
 800cf82:	f04f 0b00 	mov.w	fp, #0
 800cf86:	7808      	ldrb	r0, [r1, #0]
 800cf88:	f7ff ff80 	bl	800ce8c <__hexdig_fun>
 800cf8c:	1e42      	subs	r2, r0, #1
 800cf8e:	b2d2      	uxtb	r2, r2
 800cf90:	2a18      	cmp	r2, #24
 800cf92:	d82e      	bhi.n	800cff2 <__gethex+0x13a>
 800cf94:	f1a0 0210 	sub.w	r2, r0, #16
 800cf98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf9c:	f7ff ff76 	bl	800ce8c <__hexdig_fun>
 800cfa0:	f100 3cff 	add.w	ip, r0, #4294967295
 800cfa4:	fa5f fc8c 	uxtb.w	ip, ip
 800cfa8:	f1bc 0f18 	cmp.w	ip, #24
 800cfac:	d91d      	bls.n	800cfea <__gethex+0x132>
 800cfae:	f1bb 0f00 	cmp.w	fp, #0
 800cfb2:	d000      	beq.n	800cfb6 <__gethex+0xfe>
 800cfb4:	4252      	negs	r2, r2
 800cfb6:	4416      	add	r6, r2
 800cfb8:	f8ca 1000 	str.w	r1, [sl]
 800cfbc:	b1dc      	cbz	r4, 800cff6 <__gethex+0x13e>
 800cfbe:	9b01      	ldr	r3, [sp, #4]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	bf14      	ite	ne
 800cfc4:	f04f 0800 	movne.w	r8, #0
 800cfc8:	f04f 0806 	moveq.w	r8, #6
 800cfcc:	4640      	mov	r0, r8
 800cfce:	b005      	add	sp, #20
 800cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd4:	4645      	mov	r5, r8
 800cfd6:	4626      	mov	r6, r4
 800cfd8:	2401      	movs	r4, #1
 800cfda:	e7c7      	b.n	800cf6c <__gethex+0xb4>
 800cfdc:	f04f 0b00 	mov.w	fp, #0
 800cfe0:	1ca9      	adds	r1, r5, #2
 800cfe2:	e7d0      	b.n	800cf86 <__gethex+0xce>
 800cfe4:	f04f 0b01 	mov.w	fp, #1
 800cfe8:	e7fa      	b.n	800cfe0 <__gethex+0x128>
 800cfea:	230a      	movs	r3, #10
 800cfec:	fb03 0002 	mla	r0, r3, r2, r0
 800cff0:	e7d0      	b.n	800cf94 <__gethex+0xdc>
 800cff2:	4629      	mov	r1, r5
 800cff4:	e7e0      	b.n	800cfb8 <__gethex+0x100>
 800cff6:	eba5 0308 	sub.w	r3, r5, r8
 800cffa:	3b01      	subs	r3, #1
 800cffc:	4621      	mov	r1, r4
 800cffe:	2b07      	cmp	r3, #7
 800d000:	dc0a      	bgt.n	800d018 <__gethex+0x160>
 800d002:	4648      	mov	r0, r9
 800d004:	f7fd ff52 	bl	800aeac <_Balloc>
 800d008:	4604      	mov	r4, r0
 800d00a:	b940      	cbnz	r0, 800d01e <__gethex+0x166>
 800d00c:	4b61      	ldr	r3, [pc, #388]	; (800d194 <__gethex+0x2dc>)
 800d00e:	4602      	mov	r2, r0
 800d010:	21e4      	movs	r1, #228	; 0xe4
 800d012:	4861      	ldr	r0, [pc, #388]	; (800d198 <__gethex+0x2e0>)
 800d014:	f7ff feb4 	bl	800cd80 <__assert_func>
 800d018:	3101      	adds	r1, #1
 800d01a:	105b      	asrs	r3, r3, #1
 800d01c:	e7ef      	b.n	800cffe <__gethex+0x146>
 800d01e:	f100 0a14 	add.w	sl, r0, #20
 800d022:	2300      	movs	r3, #0
 800d024:	495a      	ldr	r1, [pc, #360]	; (800d190 <__gethex+0x2d8>)
 800d026:	f8cd a004 	str.w	sl, [sp, #4]
 800d02a:	469b      	mov	fp, r3
 800d02c:	45a8      	cmp	r8, r5
 800d02e:	d342      	bcc.n	800d0b6 <__gethex+0x1fe>
 800d030:	9801      	ldr	r0, [sp, #4]
 800d032:	f840 bb04 	str.w	fp, [r0], #4
 800d036:	eba0 000a 	sub.w	r0, r0, sl
 800d03a:	1080      	asrs	r0, r0, #2
 800d03c:	6120      	str	r0, [r4, #16]
 800d03e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d042:	4658      	mov	r0, fp
 800d044:	f7fe f824 	bl	800b090 <__hi0bits>
 800d048:	683d      	ldr	r5, [r7, #0]
 800d04a:	eba8 0000 	sub.w	r0, r8, r0
 800d04e:	42a8      	cmp	r0, r5
 800d050:	dd59      	ble.n	800d106 <__gethex+0x24e>
 800d052:	eba0 0805 	sub.w	r8, r0, r5
 800d056:	4641      	mov	r1, r8
 800d058:	4620      	mov	r0, r4
 800d05a:	f7fe fbb3 	bl	800b7c4 <__any_on>
 800d05e:	4683      	mov	fp, r0
 800d060:	b1b8      	cbz	r0, 800d092 <__gethex+0x1da>
 800d062:	f108 33ff 	add.w	r3, r8, #4294967295
 800d066:	1159      	asrs	r1, r3, #5
 800d068:	f003 021f 	and.w	r2, r3, #31
 800d06c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d070:	f04f 0b01 	mov.w	fp, #1
 800d074:	fa0b f202 	lsl.w	r2, fp, r2
 800d078:	420a      	tst	r2, r1
 800d07a:	d00a      	beq.n	800d092 <__gethex+0x1da>
 800d07c:	455b      	cmp	r3, fp
 800d07e:	dd06      	ble.n	800d08e <__gethex+0x1d6>
 800d080:	f1a8 0102 	sub.w	r1, r8, #2
 800d084:	4620      	mov	r0, r4
 800d086:	f7fe fb9d 	bl	800b7c4 <__any_on>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d138      	bne.n	800d100 <__gethex+0x248>
 800d08e:	f04f 0b02 	mov.w	fp, #2
 800d092:	4641      	mov	r1, r8
 800d094:	4620      	mov	r0, r4
 800d096:	f7ff fea7 	bl	800cde8 <rshift>
 800d09a:	4446      	add	r6, r8
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	42b3      	cmp	r3, r6
 800d0a0:	da41      	bge.n	800d126 <__gethex+0x26e>
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	4648      	mov	r0, r9
 800d0a6:	f7fd ff41 	bl	800af2c <_Bfree>
 800d0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d0b4:	e78a      	b.n	800cfcc <__gethex+0x114>
 800d0b6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d0ba:	2a2e      	cmp	r2, #46	; 0x2e
 800d0bc:	d014      	beq.n	800d0e8 <__gethex+0x230>
 800d0be:	2b20      	cmp	r3, #32
 800d0c0:	d106      	bne.n	800d0d0 <__gethex+0x218>
 800d0c2:	9b01      	ldr	r3, [sp, #4]
 800d0c4:	f843 bb04 	str.w	fp, [r3], #4
 800d0c8:	f04f 0b00 	mov.w	fp, #0
 800d0cc:	9301      	str	r3, [sp, #4]
 800d0ce:	465b      	mov	r3, fp
 800d0d0:	7828      	ldrb	r0, [r5, #0]
 800d0d2:	9303      	str	r3, [sp, #12]
 800d0d4:	f7ff feda 	bl	800ce8c <__hexdig_fun>
 800d0d8:	9b03      	ldr	r3, [sp, #12]
 800d0da:	f000 000f 	and.w	r0, r0, #15
 800d0de:	4098      	lsls	r0, r3
 800d0e0:	ea4b 0b00 	orr.w	fp, fp, r0
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	e7a1      	b.n	800d02c <__gethex+0x174>
 800d0e8:	45a8      	cmp	r8, r5
 800d0ea:	d8e8      	bhi.n	800d0be <__gethex+0x206>
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	9303      	str	r3, [sp, #12]
 800d0f2:	f7ff fe19 	bl	800cd28 <strncmp>
 800d0f6:	4926      	ldr	r1, [pc, #152]	; (800d190 <__gethex+0x2d8>)
 800d0f8:	9b03      	ldr	r3, [sp, #12]
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d1df      	bne.n	800d0be <__gethex+0x206>
 800d0fe:	e795      	b.n	800d02c <__gethex+0x174>
 800d100:	f04f 0b03 	mov.w	fp, #3
 800d104:	e7c5      	b.n	800d092 <__gethex+0x1da>
 800d106:	da0b      	bge.n	800d120 <__gethex+0x268>
 800d108:	eba5 0800 	sub.w	r8, r5, r0
 800d10c:	4621      	mov	r1, r4
 800d10e:	4642      	mov	r2, r8
 800d110:	4648      	mov	r0, r9
 800d112:	f7fe f925 	bl	800b360 <__lshift>
 800d116:	eba6 0608 	sub.w	r6, r6, r8
 800d11a:	4604      	mov	r4, r0
 800d11c:	f100 0a14 	add.w	sl, r0, #20
 800d120:	f04f 0b00 	mov.w	fp, #0
 800d124:	e7ba      	b.n	800d09c <__gethex+0x1e4>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	42b3      	cmp	r3, r6
 800d12a:	dd73      	ble.n	800d214 <__gethex+0x35c>
 800d12c:	1b9e      	subs	r6, r3, r6
 800d12e:	42b5      	cmp	r5, r6
 800d130:	dc34      	bgt.n	800d19c <__gethex+0x2e4>
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2b02      	cmp	r3, #2
 800d136:	d023      	beq.n	800d180 <__gethex+0x2c8>
 800d138:	2b03      	cmp	r3, #3
 800d13a:	d025      	beq.n	800d188 <__gethex+0x2d0>
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d115      	bne.n	800d16c <__gethex+0x2b4>
 800d140:	42b5      	cmp	r5, r6
 800d142:	d113      	bne.n	800d16c <__gethex+0x2b4>
 800d144:	2d01      	cmp	r5, #1
 800d146:	d10b      	bne.n	800d160 <__gethex+0x2a8>
 800d148:	9a02      	ldr	r2, [sp, #8]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6013      	str	r3, [r2, #0]
 800d14e:	2301      	movs	r3, #1
 800d150:	6123      	str	r3, [r4, #16]
 800d152:	f8ca 3000 	str.w	r3, [sl]
 800d156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d158:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d15c:	601c      	str	r4, [r3, #0]
 800d15e:	e735      	b.n	800cfcc <__gethex+0x114>
 800d160:	1e69      	subs	r1, r5, #1
 800d162:	4620      	mov	r0, r4
 800d164:	f7fe fb2e 	bl	800b7c4 <__any_on>
 800d168:	2800      	cmp	r0, #0
 800d16a:	d1ed      	bne.n	800d148 <__gethex+0x290>
 800d16c:	4621      	mov	r1, r4
 800d16e:	4648      	mov	r0, r9
 800d170:	f7fd fedc 	bl	800af2c <_Bfree>
 800d174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d176:	2300      	movs	r3, #0
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d17e:	e725      	b.n	800cfcc <__gethex+0x114>
 800d180:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1f2      	bne.n	800d16c <__gethex+0x2b4>
 800d186:	e7df      	b.n	800d148 <__gethex+0x290>
 800d188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d1dc      	bne.n	800d148 <__gethex+0x290>
 800d18e:	e7ed      	b.n	800d16c <__gethex+0x2b4>
 800d190:	0800de04 	.word	0x0800de04
 800d194:	0800dc9d 	.word	0x0800dc9d
 800d198:	0800dfae 	.word	0x0800dfae
 800d19c:	f106 38ff 	add.w	r8, r6, #4294967295
 800d1a0:	f1bb 0f00 	cmp.w	fp, #0
 800d1a4:	d133      	bne.n	800d20e <__gethex+0x356>
 800d1a6:	f1b8 0f00 	cmp.w	r8, #0
 800d1aa:	d004      	beq.n	800d1b6 <__gethex+0x2fe>
 800d1ac:	4641      	mov	r1, r8
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f7fe fb08 	bl	800b7c4 <__any_on>
 800d1b4:	4683      	mov	fp, r0
 800d1b6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d1c0:	f008 081f 	and.w	r8, r8, #31
 800d1c4:	fa03 f308 	lsl.w	r3, r3, r8
 800d1c8:	4213      	tst	r3, r2
 800d1ca:	4631      	mov	r1, r6
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	bf18      	it	ne
 800d1d0:	f04b 0b02 	orrne.w	fp, fp, #2
 800d1d4:	1bad      	subs	r5, r5, r6
 800d1d6:	f7ff fe07 	bl	800cde8 <rshift>
 800d1da:	687e      	ldr	r6, [r7, #4]
 800d1dc:	f04f 0802 	mov.w	r8, #2
 800d1e0:	f1bb 0f00 	cmp.w	fp, #0
 800d1e4:	d04a      	beq.n	800d27c <__gethex+0x3c4>
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d016      	beq.n	800d21a <__gethex+0x362>
 800d1ec:	2b03      	cmp	r3, #3
 800d1ee:	d018      	beq.n	800d222 <__gethex+0x36a>
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d109      	bne.n	800d208 <__gethex+0x350>
 800d1f4:	f01b 0f02 	tst.w	fp, #2
 800d1f8:	d006      	beq.n	800d208 <__gethex+0x350>
 800d1fa:	f8da 3000 	ldr.w	r3, [sl]
 800d1fe:	ea4b 0b03 	orr.w	fp, fp, r3
 800d202:	f01b 0f01 	tst.w	fp, #1
 800d206:	d10f      	bne.n	800d228 <__gethex+0x370>
 800d208:	f048 0810 	orr.w	r8, r8, #16
 800d20c:	e036      	b.n	800d27c <__gethex+0x3c4>
 800d20e:	f04f 0b01 	mov.w	fp, #1
 800d212:	e7d0      	b.n	800d1b6 <__gethex+0x2fe>
 800d214:	f04f 0801 	mov.w	r8, #1
 800d218:	e7e2      	b.n	800d1e0 <__gethex+0x328>
 800d21a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d21c:	f1c3 0301 	rsb	r3, r3, #1
 800d220:	930f      	str	r3, [sp, #60]	; 0x3c
 800d222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d224:	2b00      	cmp	r3, #0
 800d226:	d0ef      	beq.n	800d208 <__gethex+0x350>
 800d228:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d22c:	f104 0214 	add.w	r2, r4, #20
 800d230:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d23a:	2300      	movs	r3, #0
 800d23c:	4694      	mov	ip, r2
 800d23e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d242:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d246:	d01e      	beq.n	800d286 <__gethex+0x3ce>
 800d248:	3101      	adds	r1, #1
 800d24a:	f8cc 1000 	str.w	r1, [ip]
 800d24e:	f1b8 0f02 	cmp.w	r8, #2
 800d252:	f104 0214 	add.w	r2, r4, #20
 800d256:	d13d      	bne.n	800d2d4 <__gethex+0x41c>
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	42ab      	cmp	r3, r5
 800d25e:	d10b      	bne.n	800d278 <__gethex+0x3c0>
 800d260:	1169      	asrs	r1, r5, #5
 800d262:	2301      	movs	r3, #1
 800d264:	f005 051f 	and.w	r5, r5, #31
 800d268:	fa03 f505 	lsl.w	r5, r3, r5
 800d26c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d270:	421d      	tst	r5, r3
 800d272:	bf18      	it	ne
 800d274:	f04f 0801 	movne.w	r8, #1
 800d278:	f048 0820 	orr.w	r8, r8, #32
 800d27c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d27e:	601c      	str	r4, [r3, #0]
 800d280:	9b02      	ldr	r3, [sp, #8]
 800d282:	601e      	str	r6, [r3, #0]
 800d284:	e6a2      	b.n	800cfcc <__gethex+0x114>
 800d286:	4290      	cmp	r0, r2
 800d288:	f842 3c04 	str.w	r3, [r2, #-4]
 800d28c:	d8d6      	bhi.n	800d23c <__gethex+0x384>
 800d28e:	68a2      	ldr	r2, [r4, #8]
 800d290:	4593      	cmp	fp, r2
 800d292:	db17      	blt.n	800d2c4 <__gethex+0x40c>
 800d294:	6861      	ldr	r1, [r4, #4]
 800d296:	4648      	mov	r0, r9
 800d298:	3101      	adds	r1, #1
 800d29a:	f7fd fe07 	bl	800aeac <_Balloc>
 800d29e:	4682      	mov	sl, r0
 800d2a0:	b918      	cbnz	r0, 800d2aa <__gethex+0x3f2>
 800d2a2:	4b1b      	ldr	r3, [pc, #108]	; (800d310 <__gethex+0x458>)
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	2184      	movs	r1, #132	; 0x84
 800d2a8:	e6b3      	b.n	800d012 <__gethex+0x15a>
 800d2aa:	6922      	ldr	r2, [r4, #16]
 800d2ac:	3202      	adds	r2, #2
 800d2ae:	f104 010c 	add.w	r1, r4, #12
 800d2b2:	0092      	lsls	r2, r2, #2
 800d2b4:	300c      	adds	r0, #12
 800d2b6:	f7fc fe6b 	bl	8009f90 <memcpy>
 800d2ba:	4621      	mov	r1, r4
 800d2bc:	4648      	mov	r0, r9
 800d2be:	f7fd fe35 	bl	800af2c <_Bfree>
 800d2c2:	4654      	mov	r4, sl
 800d2c4:	6922      	ldr	r2, [r4, #16]
 800d2c6:	1c51      	adds	r1, r2, #1
 800d2c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d2cc:	6121      	str	r1, [r4, #16]
 800d2ce:	2101      	movs	r1, #1
 800d2d0:	6151      	str	r1, [r2, #20]
 800d2d2:	e7bc      	b.n	800d24e <__gethex+0x396>
 800d2d4:	6921      	ldr	r1, [r4, #16]
 800d2d6:	4559      	cmp	r1, fp
 800d2d8:	dd0b      	ble.n	800d2f2 <__gethex+0x43a>
 800d2da:	2101      	movs	r1, #1
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f7ff fd83 	bl	800cde8 <rshift>
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	3601      	adds	r6, #1
 800d2e6:	42b3      	cmp	r3, r6
 800d2e8:	f6ff aedb 	blt.w	800d0a2 <__gethex+0x1ea>
 800d2ec:	f04f 0801 	mov.w	r8, #1
 800d2f0:	e7c2      	b.n	800d278 <__gethex+0x3c0>
 800d2f2:	f015 051f 	ands.w	r5, r5, #31
 800d2f6:	d0f9      	beq.n	800d2ec <__gethex+0x434>
 800d2f8:	9b01      	ldr	r3, [sp, #4]
 800d2fa:	441a      	add	r2, r3
 800d2fc:	f1c5 0520 	rsb	r5, r5, #32
 800d300:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d304:	f7fd fec4 	bl	800b090 <__hi0bits>
 800d308:	42a8      	cmp	r0, r5
 800d30a:	dbe6      	blt.n	800d2da <__gethex+0x422>
 800d30c:	e7ee      	b.n	800d2ec <__gethex+0x434>
 800d30e:	bf00      	nop
 800d310:	0800dc9d 	.word	0x0800dc9d

0800d314 <L_shift>:
 800d314:	f1c2 0208 	rsb	r2, r2, #8
 800d318:	0092      	lsls	r2, r2, #2
 800d31a:	b570      	push	{r4, r5, r6, lr}
 800d31c:	f1c2 0620 	rsb	r6, r2, #32
 800d320:	6843      	ldr	r3, [r0, #4]
 800d322:	6804      	ldr	r4, [r0, #0]
 800d324:	fa03 f506 	lsl.w	r5, r3, r6
 800d328:	432c      	orrs	r4, r5
 800d32a:	40d3      	lsrs	r3, r2
 800d32c:	6004      	str	r4, [r0, #0]
 800d32e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d332:	4288      	cmp	r0, r1
 800d334:	d3f4      	bcc.n	800d320 <L_shift+0xc>
 800d336:	bd70      	pop	{r4, r5, r6, pc}

0800d338 <__match>:
 800d338:	b530      	push	{r4, r5, lr}
 800d33a:	6803      	ldr	r3, [r0, #0]
 800d33c:	3301      	adds	r3, #1
 800d33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d342:	b914      	cbnz	r4, 800d34a <__match+0x12>
 800d344:	6003      	str	r3, [r0, #0]
 800d346:	2001      	movs	r0, #1
 800d348:	bd30      	pop	{r4, r5, pc}
 800d34a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d34e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d352:	2d19      	cmp	r5, #25
 800d354:	bf98      	it	ls
 800d356:	3220      	addls	r2, #32
 800d358:	42a2      	cmp	r2, r4
 800d35a:	d0f0      	beq.n	800d33e <__match+0x6>
 800d35c:	2000      	movs	r0, #0
 800d35e:	e7f3      	b.n	800d348 <__match+0x10>

0800d360 <__hexnan>:
 800d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	680b      	ldr	r3, [r1, #0]
 800d366:	6801      	ldr	r1, [r0, #0]
 800d368:	115e      	asrs	r6, r3, #5
 800d36a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d36e:	f013 031f 	ands.w	r3, r3, #31
 800d372:	b087      	sub	sp, #28
 800d374:	bf18      	it	ne
 800d376:	3604      	addne	r6, #4
 800d378:	2500      	movs	r5, #0
 800d37a:	1f37      	subs	r7, r6, #4
 800d37c:	4682      	mov	sl, r0
 800d37e:	4690      	mov	r8, r2
 800d380:	9301      	str	r3, [sp, #4]
 800d382:	f846 5c04 	str.w	r5, [r6, #-4]
 800d386:	46b9      	mov	r9, r7
 800d388:	463c      	mov	r4, r7
 800d38a:	9502      	str	r5, [sp, #8]
 800d38c:	46ab      	mov	fp, r5
 800d38e:	784a      	ldrb	r2, [r1, #1]
 800d390:	1c4b      	adds	r3, r1, #1
 800d392:	9303      	str	r3, [sp, #12]
 800d394:	b342      	cbz	r2, 800d3e8 <__hexnan+0x88>
 800d396:	4610      	mov	r0, r2
 800d398:	9105      	str	r1, [sp, #20]
 800d39a:	9204      	str	r2, [sp, #16]
 800d39c:	f7ff fd76 	bl	800ce8c <__hexdig_fun>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d14f      	bne.n	800d444 <__hexnan+0xe4>
 800d3a4:	9a04      	ldr	r2, [sp, #16]
 800d3a6:	9905      	ldr	r1, [sp, #20]
 800d3a8:	2a20      	cmp	r2, #32
 800d3aa:	d818      	bhi.n	800d3de <__hexnan+0x7e>
 800d3ac:	9b02      	ldr	r3, [sp, #8]
 800d3ae:	459b      	cmp	fp, r3
 800d3b0:	dd13      	ble.n	800d3da <__hexnan+0x7a>
 800d3b2:	454c      	cmp	r4, r9
 800d3b4:	d206      	bcs.n	800d3c4 <__hexnan+0x64>
 800d3b6:	2d07      	cmp	r5, #7
 800d3b8:	dc04      	bgt.n	800d3c4 <__hexnan+0x64>
 800d3ba:	462a      	mov	r2, r5
 800d3bc:	4649      	mov	r1, r9
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f7ff ffa8 	bl	800d314 <L_shift>
 800d3c4:	4544      	cmp	r4, r8
 800d3c6:	d950      	bls.n	800d46a <__hexnan+0x10a>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f1a4 0904 	sub.w	r9, r4, #4
 800d3ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3d2:	f8cd b008 	str.w	fp, [sp, #8]
 800d3d6:	464c      	mov	r4, r9
 800d3d8:	461d      	mov	r5, r3
 800d3da:	9903      	ldr	r1, [sp, #12]
 800d3dc:	e7d7      	b.n	800d38e <__hexnan+0x2e>
 800d3de:	2a29      	cmp	r2, #41	; 0x29
 800d3e0:	d155      	bne.n	800d48e <__hexnan+0x12e>
 800d3e2:	3102      	adds	r1, #2
 800d3e4:	f8ca 1000 	str.w	r1, [sl]
 800d3e8:	f1bb 0f00 	cmp.w	fp, #0
 800d3ec:	d04f      	beq.n	800d48e <__hexnan+0x12e>
 800d3ee:	454c      	cmp	r4, r9
 800d3f0:	d206      	bcs.n	800d400 <__hexnan+0xa0>
 800d3f2:	2d07      	cmp	r5, #7
 800d3f4:	dc04      	bgt.n	800d400 <__hexnan+0xa0>
 800d3f6:	462a      	mov	r2, r5
 800d3f8:	4649      	mov	r1, r9
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f7ff ff8a 	bl	800d314 <L_shift>
 800d400:	4544      	cmp	r4, r8
 800d402:	d934      	bls.n	800d46e <__hexnan+0x10e>
 800d404:	f1a8 0204 	sub.w	r2, r8, #4
 800d408:	4623      	mov	r3, r4
 800d40a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d40e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d412:	429f      	cmp	r7, r3
 800d414:	d2f9      	bcs.n	800d40a <__hexnan+0xaa>
 800d416:	1b3b      	subs	r3, r7, r4
 800d418:	f023 0303 	bic.w	r3, r3, #3
 800d41c:	3304      	adds	r3, #4
 800d41e:	3e03      	subs	r6, #3
 800d420:	3401      	adds	r4, #1
 800d422:	42a6      	cmp	r6, r4
 800d424:	bf38      	it	cc
 800d426:	2304      	movcc	r3, #4
 800d428:	4443      	add	r3, r8
 800d42a:	2200      	movs	r2, #0
 800d42c:	f843 2b04 	str.w	r2, [r3], #4
 800d430:	429f      	cmp	r7, r3
 800d432:	d2fb      	bcs.n	800d42c <__hexnan+0xcc>
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	b91b      	cbnz	r3, 800d440 <__hexnan+0xe0>
 800d438:	4547      	cmp	r7, r8
 800d43a:	d126      	bne.n	800d48a <__hexnan+0x12a>
 800d43c:	2301      	movs	r3, #1
 800d43e:	603b      	str	r3, [r7, #0]
 800d440:	2005      	movs	r0, #5
 800d442:	e025      	b.n	800d490 <__hexnan+0x130>
 800d444:	3501      	adds	r5, #1
 800d446:	2d08      	cmp	r5, #8
 800d448:	f10b 0b01 	add.w	fp, fp, #1
 800d44c:	dd06      	ble.n	800d45c <__hexnan+0xfc>
 800d44e:	4544      	cmp	r4, r8
 800d450:	d9c3      	bls.n	800d3da <__hexnan+0x7a>
 800d452:	2300      	movs	r3, #0
 800d454:	f844 3c04 	str.w	r3, [r4, #-4]
 800d458:	2501      	movs	r5, #1
 800d45a:	3c04      	subs	r4, #4
 800d45c:	6822      	ldr	r2, [r4, #0]
 800d45e:	f000 000f 	and.w	r0, r0, #15
 800d462:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d466:	6020      	str	r0, [r4, #0]
 800d468:	e7b7      	b.n	800d3da <__hexnan+0x7a>
 800d46a:	2508      	movs	r5, #8
 800d46c:	e7b5      	b.n	800d3da <__hexnan+0x7a>
 800d46e:	9b01      	ldr	r3, [sp, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d0df      	beq.n	800d434 <__hexnan+0xd4>
 800d474:	f1c3 0320 	rsb	r3, r3, #32
 800d478:	f04f 32ff 	mov.w	r2, #4294967295
 800d47c:	40da      	lsrs	r2, r3
 800d47e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d482:	4013      	ands	r3, r2
 800d484:	f846 3c04 	str.w	r3, [r6, #-4]
 800d488:	e7d4      	b.n	800d434 <__hexnan+0xd4>
 800d48a:	3f04      	subs	r7, #4
 800d48c:	e7d2      	b.n	800d434 <__hexnan+0xd4>
 800d48e:	2004      	movs	r0, #4
 800d490:	b007      	add	sp, #28
 800d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d496 <__ascii_mbtowc>:
 800d496:	b082      	sub	sp, #8
 800d498:	b901      	cbnz	r1, 800d49c <__ascii_mbtowc+0x6>
 800d49a:	a901      	add	r1, sp, #4
 800d49c:	b142      	cbz	r2, 800d4b0 <__ascii_mbtowc+0x1a>
 800d49e:	b14b      	cbz	r3, 800d4b4 <__ascii_mbtowc+0x1e>
 800d4a0:	7813      	ldrb	r3, [r2, #0]
 800d4a2:	600b      	str	r3, [r1, #0]
 800d4a4:	7812      	ldrb	r2, [r2, #0]
 800d4a6:	1e10      	subs	r0, r2, #0
 800d4a8:	bf18      	it	ne
 800d4aa:	2001      	movne	r0, #1
 800d4ac:	b002      	add	sp, #8
 800d4ae:	4770      	bx	lr
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	e7fb      	b.n	800d4ac <__ascii_mbtowc+0x16>
 800d4b4:	f06f 0001 	mvn.w	r0, #1
 800d4b8:	e7f8      	b.n	800d4ac <__ascii_mbtowc+0x16>

0800d4ba <_realloc_r>:
 800d4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4be:	4680      	mov	r8, r0
 800d4c0:	4614      	mov	r4, r2
 800d4c2:	460e      	mov	r6, r1
 800d4c4:	b921      	cbnz	r1, 800d4d0 <_realloc_r+0x16>
 800d4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	f7fd bc62 	b.w	800ad94 <_malloc_r>
 800d4d0:	b92a      	cbnz	r2, 800d4de <_realloc_r+0x24>
 800d4d2:	f7fd fbeb 	bl	800acac <_free_r>
 800d4d6:	4625      	mov	r5, r4
 800d4d8:	4628      	mov	r0, r5
 800d4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4de:	f000 f8c6 	bl	800d66e <_malloc_usable_size_r>
 800d4e2:	4284      	cmp	r4, r0
 800d4e4:	4607      	mov	r7, r0
 800d4e6:	d802      	bhi.n	800d4ee <_realloc_r+0x34>
 800d4e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4ec:	d812      	bhi.n	800d514 <_realloc_r+0x5a>
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	f7fd fc4f 	bl	800ad94 <_malloc_r>
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d0ed      	beq.n	800d4d8 <_realloc_r+0x1e>
 800d4fc:	42bc      	cmp	r4, r7
 800d4fe:	4622      	mov	r2, r4
 800d500:	4631      	mov	r1, r6
 800d502:	bf28      	it	cs
 800d504:	463a      	movcs	r2, r7
 800d506:	f7fc fd43 	bl	8009f90 <memcpy>
 800d50a:	4631      	mov	r1, r6
 800d50c:	4640      	mov	r0, r8
 800d50e:	f7fd fbcd 	bl	800acac <_free_r>
 800d512:	e7e1      	b.n	800d4d8 <_realloc_r+0x1e>
 800d514:	4635      	mov	r5, r6
 800d516:	e7df      	b.n	800d4d8 <_realloc_r+0x1e>

0800d518 <__ascii_wctomb>:
 800d518:	b149      	cbz	r1, 800d52e <__ascii_wctomb+0x16>
 800d51a:	2aff      	cmp	r2, #255	; 0xff
 800d51c:	bf85      	ittet	hi
 800d51e:	238a      	movhi	r3, #138	; 0x8a
 800d520:	6003      	strhi	r3, [r0, #0]
 800d522:	700a      	strbls	r2, [r1, #0]
 800d524:	f04f 30ff 	movhi.w	r0, #4294967295
 800d528:	bf98      	it	ls
 800d52a:	2001      	movls	r0, #1
 800d52c:	4770      	bx	lr
 800d52e:	4608      	mov	r0, r1
 800d530:	4770      	bx	lr
	...

0800d534 <fiprintf>:
 800d534:	b40e      	push	{r1, r2, r3}
 800d536:	b503      	push	{r0, r1, lr}
 800d538:	4601      	mov	r1, r0
 800d53a:	ab03      	add	r3, sp, #12
 800d53c:	4805      	ldr	r0, [pc, #20]	; (800d554 <fiprintf+0x20>)
 800d53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d542:	6800      	ldr	r0, [r0, #0]
 800d544:	9301      	str	r3, [sp, #4]
 800d546:	f7ff f977 	bl	800c838 <_vfiprintf_r>
 800d54a:	b002      	add	sp, #8
 800d54c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d550:	b003      	add	sp, #12
 800d552:	4770      	bx	lr
 800d554:	20000098 	.word	0x20000098

0800d558 <__swhatbuf_r>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	460c      	mov	r4, r1
 800d55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d560:	2900      	cmp	r1, #0
 800d562:	b096      	sub	sp, #88	; 0x58
 800d564:	4615      	mov	r5, r2
 800d566:	461e      	mov	r6, r3
 800d568:	da0d      	bge.n	800d586 <__swhatbuf_r+0x2e>
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d570:	f04f 0100 	mov.w	r1, #0
 800d574:	bf0c      	ite	eq
 800d576:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d57a:	2340      	movne	r3, #64	; 0x40
 800d57c:	2000      	movs	r0, #0
 800d57e:	6031      	str	r1, [r6, #0]
 800d580:	602b      	str	r3, [r5, #0]
 800d582:	b016      	add	sp, #88	; 0x58
 800d584:	bd70      	pop	{r4, r5, r6, pc}
 800d586:	466a      	mov	r2, sp
 800d588:	f000 f848 	bl	800d61c <_fstat_r>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	dbec      	blt.n	800d56a <__swhatbuf_r+0x12>
 800d590:	9901      	ldr	r1, [sp, #4]
 800d592:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d596:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d59a:	4259      	negs	r1, r3
 800d59c:	4159      	adcs	r1, r3
 800d59e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5a2:	e7eb      	b.n	800d57c <__swhatbuf_r+0x24>

0800d5a4 <__smakebuf_r>:
 800d5a4:	898b      	ldrh	r3, [r1, #12]
 800d5a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5a8:	079d      	lsls	r5, r3, #30
 800d5aa:	4606      	mov	r6, r0
 800d5ac:	460c      	mov	r4, r1
 800d5ae:	d507      	bpl.n	800d5c0 <__smakebuf_r+0x1c>
 800d5b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	6123      	str	r3, [r4, #16]
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	6163      	str	r3, [r4, #20]
 800d5bc:	b002      	add	sp, #8
 800d5be:	bd70      	pop	{r4, r5, r6, pc}
 800d5c0:	ab01      	add	r3, sp, #4
 800d5c2:	466a      	mov	r2, sp
 800d5c4:	f7ff ffc8 	bl	800d558 <__swhatbuf_r>
 800d5c8:	9900      	ldr	r1, [sp, #0]
 800d5ca:	4605      	mov	r5, r0
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f7fd fbe1 	bl	800ad94 <_malloc_r>
 800d5d2:	b948      	cbnz	r0, 800d5e8 <__smakebuf_r+0x44>
 800d5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5d8:	059a      	lsls	r2, r3, #22
 800d5da:	d4ef      	bmi.n	800d5bc <__smakebuf_r+0x18>
 800d5dc:	f023 0303 	bic.w	r3, r3, #3
 800d5e0:	f043 0302 	orr.w	r3, r3, #2
 800d5e4:	81a3      	strh	r3, [r4, #12]
 800d5e6:	e7e3      	b.n	800d5b0 <__smakebuf_r+0xc>
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	6020      	str	r0, [r4, #0]
 800d5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5f0:	81a3      	strh	r3, [r4, #12]
 800d5f2:	9b00      	ldr	r3, [sp, #0]
 800d5f4:	6163      	str	r3, [r4, #20]
 800d5f6:	9b01      	ldr	r3, [sp, #4]
 800d5f8:	6120      	str	r0, [r4, #16]
 800d5fa:	b15b      	cbz	r3, 800d614 <__smakebuf_r+0x70>
 800d5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d600:	4630      	mov	r0, r6
 800d602:	f000 f81d 	bl	800d640 <_isatty_r>
 800d606:	b128      	cbz	r0, 800d614 <__smakebuf_r+0x70>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	f023 0303 	bic.w	r3, r3, #3
 800d60e:	f043 0301 	orr.w	r3, r3, #1
 800d612:	81a3      	strh	r3, [r4, #12]
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	431d      	orrs	r5, r3
 800d618:	81a5      	strh	r5, [r4, #12]
 800d61a:	e7cf      	b.n	800d5bc <__smakebuf_r+0x18>

0800d61c <_fstat_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4d07      	ldr	r5, [pc, #28]	; (800d63c <_fstat_r+0x20>)
 800d620:	2300      	movs	r3, #0
 800d622:	4604      	mov	r4, r0
 800d624:	4608      	mov	r0, r1
 800d626:	4611      	mov	r1, r2
 800d628:	602b      	str	r3, [r5, #0]
 800d62a:	f7f5 fb4c 	bl	8002cc6 <_fstat>
 800d62e:	1c43      	adds	r3, r0, #1
 800d630:	d102      	bne.n	800d638 <_fstat_r+0x1c>
 800d632:	682b      	ldr	r3, [r5, #0]
 800d634:	b103      	cbz	r3, 800d638 <_fstat_r+0x1c>
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	bd38      	pop	{r3, r4, r5, pc}
 800d63a:	bf00      	nop
 800d63c:	20005928 	.word	0x20005928

0800d640 <_isatty_r>:
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	4d06      	ldr	r5, [pc, #24]	; (800d65c <_isatty_r+0x1c>)
 800d644:	2300      	movs	r3, #0
 800d646:	4604      	mov	r4, r0
 800d648:	4608      	mov	r0, r1
 800d64a:	602b      	str	r3, [r5, #0]
 800d64c:	f7f5 fb4b 	bl	8002ce6 <_isatty>
 800d650:	1c43      	adds	r3, r0, #1
 800d652:	d102      	bne.n	800d65a <_isatty_r+0x1a>
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	b103      	cbz	r3, 800d65a <_isatty_r+0x1a>
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	20005928 	.word	0x20005928

0800d660 <abort>:
 800d660:	b508      	push	{r3, lr}
 800d662:	2006      	movs	r0, #6
 800d664:	f000 f834 	bl	800d6d0 <raise>
 800d668:	2001      	movs	r0, #1
 800d66a:	f7f5 fadd 	bl	8002c28 <_exit>

0800d66e <_malloc_usable_size_r>:
 800d66e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d672:	1f18      	subs	r0, r3, #4
 800d674:	2b00      	cmp	r3, #0
 800d676:	bfbc      	itt	lt
 800d678:	580b      	ldrlt	r3, [r1, r0]
 800d67a:	18c0      	addlt	r0, r0, r3
 800d67c:	4770      	bx	lr

0800d67e <_raise_r>:
 800d67e:	291f      	cmp	r1, #31
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4604      	mov	r4, r0
 800d684:	460d      	mov	r5, r1
 800d686:	d904      	bls.n	800d692 <_raise_r+0x14>
 800d688:	2316      	movs	r3, #22
 800d68a:	6003      	str	r3, [r0, #0]
 800d68c:	f04f 30ff 	mov.w	r0, #4294967295
 800d690:	bd38      	pop	{r3, r4, r5, pc}
 800d692:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d694:	b112      	cbz	r2, 800d69c <_raise_r+0x1e>
 800d696:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d69a:	b94b      	cbnz	r3, 800d6b0 <_raise_r+0x32>
 800d69c:	4620      	mov	r0, r4
 800d69e:	f000 f831 	bl	800d704 <_getpid_r>
 800d6a2:	462a      	mov	r2, r5
 800d6a4:	4601      	mov	r1, r0
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ac:	f000 b818 	b.w	800d6e0 <_kill_r>
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d00a      	beq.n	800d6ca <_raise_r+0x4c>
 800d6b4:	1c59      	adds	r1, r3, #1
 800d6b6:	d103      	bne.n	800d6c0 <_raise_r+0x42>
 800d6b8:	2316      	movs	r3, #22
 800d6ba:	6003      	str	r3, [r0, #0]
 800d6bc:	2001      	movs	r0, #1
 800d6be:	e7e7      	b.n	800d690 <_raise_r+0x12>
 800d6c0:	2400      	movs	r4, #0
 800d6c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	4798      	blx	r3
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	e7e0      	b.n	800d690 <_raise_r+0x12>
	...

0800d6d0 <raise>:
 800d6d0:	4b02      	ldr	r3, [pc, #8]	; (800d6dc <raise+0xc>)
 800d6d2:	4601      	mov	r1, r0
 800d6d4:	6818      	ldr	r0, [r3, #0]
 800d6d6:	f7ff bfd2 	b.w	800d67e <_raise_r>
 800d6da:	bf00      	nop
 800d6dc:	20000098 	.word	0x20000098

0800d6e0 <_kill_r>:
 800d6e0:	b538      	push	{r3, r4, r5, lr}
 800d6e2:	4d07      	ldr	r5, [pc, #28]	; (800d700 <_kill_r+0x20>)
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	4608      	mov	r0, r1
 800d6ea:	4611      	mov	r1, r2
 800d6ec:	602b      	str	r3, [r5, #0]
 800d6ee:	f7f5 fa8b 	bl	8002c08 <_kill>
 800d6f2:	1c43      	adds	r3, r0, #1
 800d6f4:	d102      	bne.n	800d6fc <_kill_r+0x1c>
 800d6f6:	682b      	ldr	r3, [r5, #0]
 800d6f8:	b103      	cbz	r3, 800d6fc <_kill_r+0x1c>
 800d6fa:	6023      	str	r3, [r4, #0]
 800d6fc:	bd38      	pop	{r3, r4, r5, pc}
 800d6fe:	bf00      	nop
 800d700:	20005928 	.word	0x20005928

0800d704 <_getpid_r>:
 800d704:	f7f5 ba78 	b.w	8002bf8 <_getpid>

0800d708 <atan>:
 800d708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	ec55 4b10 	vmov	r4, r5, d0
 800d710:	4bc3      	ldr	r3, [pc, #780]	; (800da20 <atan+0x318>)
 800d712:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d716:	429e      	cmp	r6, r3
 800d718:	46ab      	mov	fp, r5
 800d71a:	dd18      	ble.n	800d74e <atan+0x46>
 800d71c:	4bc1      	ldr	r3, [pc, #772]	; (800da24 <atan+0x31c>)
 800d71e:	429e      	cmp	r6, r3
 800d720:	dc01      	bgt.n	800d726 <atan+0x1e>
 800d722:	d109      	bne.n	800d738 <atan+0x30>
 800d724:	b144      	cbz	r4, 800d738 <atan+0x30>
 800d726:	4622      	mov	r2, r4
 800d728:	462b      	mov	r3, r5
 800d72a:	4620      	mov	r0, r4
 800d72c:	4629      	mov	r1, r5
 800d72e:	f7f2 fdad 	bl	800028c <__adddf3>
 800d732:	4604      	mov	r4, r0
 800d734:	460d      	mov	r5, r1
 800d736:	e006      	b.n	800d746 <atan+0x3e>
 800d738:	f1bb 0f00 	cmp.w	fp, #0
 800d73c:	f300 8131 	bgt.w	800d9a2 <atan+0x29a>
 800d740:	a59b      	add	r5, pc, #620	; (adr r5, 800d9b0 <atan+0x2a8>)
 800d742:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d746:	ec45 4b10 	vmov	d0, r4, r5
 800d74a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74e:	4bb6      	ldr	r3, [pc, #728]	; (800da28 <atan+0x320>)
 800d750:	429e      	cmp	r6, r3
 800d752:	dc14      	bgt.n	800d77e <atan+0x76>
 800d754:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d758:	429e      	cmp	r6, r3
 800d75a:	dc0d      	bgt.n	800d778 <atan+0x70>
 800d75c:	a396      	add	r3, pc, #600	; (adr r3, 800d9b8 <atan+0x2b0>)
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	ee10 0a10 	vmov	r0, s0
 800d766:	4629      	mov	r1, r5
 800d768:	f7f2 fd90 	bl	800028c <__adddf3>
 800d76c:	4baf      	ldr	r3, [pc, #700]	; (800da2c <atan+0x324>)
 800d76e:	2200      	movs	r2, #0
 800d770:	f7f3 f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 800d774:	2800      	cmp	r0, #0
 800d776:	d1e6      	bne.n	800d746 <atan+0x3e>
 800d778:	f04f 3aff 	mov.w	sl, #4294967295
 800d77c:	e02b      	b.n	800d7d6 <atan+0xce>
 800d77e:	f000 f963 	bl	800da48 <fabs>
 800d782:	4bab      	ldr	r3, [pc, #684]	; (800da30 <atan+0x328>)
 800d784:	429e      	cmp	r6, r3
 800d786:	ec55 4b10 	vmov	r4, r5, d0
 800d78a:	f300 80bf 	bgt.w	800d90c <atan+0x204>
 800d78e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d792:	429e      	cmp	r6, r3
 800d794:	f300 80a0 	bgt.w	800d8d8 <atan+0x1d0>
 800d798:	ee10 2a10 	vmov	r2, s0
 800d79c:	ee10 0a10 	vmov	r0, s0
 800d7a0:	462b      	mov	r3, r5
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	f7f2 fd72 	bl	800028c <__adddf3>
 800d7a8:	4ba0      	ldr	r3, [pc, #640]	; (800da2c <atan+0x324>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f7f2 fd6c 	bl	8000288 <__aeabi_dsub>
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	460f      	mov	r7, r1
 800d7b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	4629      	mov	r1, r5
 800d7be:	f7f2 fd65 	bl	800028c <__adddf3>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	f7f3 f83f 	bl	800084c <__aeabi_ddiv>
 800d7ce:	f04f 0a00 	mov.w	sl, #0
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	460d      	mov	r5, r1
 800d7d6:	4622      	mov	r2, r4
 800d7d8:	462b      	mov	r3, r5
 800d7da:	4620      	mov	r0, r4
 800d7dc:	4629      	mov	r1, r5
 800d7de:	f7f2 ff0b 	bl	80005f8 <__aeabi_dmul>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	4689      	mov	r9, r1
 800d7ea:	f7f2 ff05 	bl	80005f8 <__aeabi_dmul>
 800d7ee:	a374      	add	r3, pc, #464	; (adr r3, 800d9c0 <atan+0x2b8>)
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	4606      	mov	r6, r0
 800d7f6:	460f      	mov	r7, r1
 800d7f8:	f7f2 fefe 	bl	80005f8 <__aeabi_dmul>
 800d7fc:	a372      	add	r3, pc, #456	; (adr r3, 800d9c8 <atan+0x2c0>)
 800d7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d802:	f7f2 fd43 	bl	800028c <__adddf3>
 800d806:	4632      	mov	r2, r6
 800d808:	463b      	mov	r3, r7
 800d80a:	f7f2 fef5 	bl	80005f8 <__aeabi_dmul>
 800d80e:	a370      	add	r3, pc, #448	; (adr r3, 800d9d0 <atan+0x2c8>)
 800d810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d814:	f7f2 fd3a 	bl	800028c <__adddf3>
 800d818:	4632      	mov	r2, r6
 800d81a:	463b      	mov	r3, r7
 800d81c:	f7f2 feec 	bl	80005f8 <__aeabi_dmul>
 800d820:	a36d      	add	r3, pc, #436	; (adr r3, 800d9d8 <atan+0x2d0>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	f7f2 fd31 	bl	800028c <__adddf3>
 800d82a:	4632      	mov	r2, r6
 800d82c:	463b      	mov	r3, r7
 800d82e:	f7f2 fee3 	bl	80005f8 <__aeabi_dmul>
 800d832:	a36b      	add	r3, pc, #428	; (adr r3, 800d9e0 <atan+0x2d8>)
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	f7f2 fd28 	bl	800028c <__adddf3>
 800d83c:	4632      	mov	r2, r6
 800d83e:	463b      	mov	r3, r7
 800d840:	f7f2 feda 	bl	80005f8 <__aeabi_dmul>
 800d844:	a368      	add	r3, pc, #416	; (adr r3, 800d9e8 <atan+0x2e0>)
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	f7f2 fd1f 	bl	800028c <__adddf3>
 800d84e:	4642      	mov	r2, r8
 800d850:	464b      	mov	r3, r9
 800d852:	f7f2 fed1 	bl	80005f8 <__aeabi_dmul>
 800d856:	a366      	add	r3, pc, #408	; (adr r3, 800d9f0 <atan+0x2e8>)
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	4680      	mov	r8, r0
 800d85e:	4689      	mov	r9, r1
 800d860:	4630      	mov	r0, r6
 800d862:	4639      	mov	r1, r7
 800d864:	f7f2 fec8 	bl	80005f8 <__aeabi_dmul>
 800d868:	a363      	add	r3, pc, #396	; (adr r3, 800d9f8 <atan+0x2f0>)
 800d86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86e:	f7f2 fd0b 	bl	8000288 <__aeabi_dsub>
 800d872:	4632      	mov	r2, r6
 800d874:	463b      	mov	r3, r7
 800d876:	f7f2 febf 	bl	80005f8 <__aeabi_dmul>
 800d87a:	a361      	add	r3, pc, #388	; (adr r3, 800da00 <atan+0x2f8>)
 800d87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d880:	f7f2 fd02 	bl	8000288 <__aeabi_dsub>
 800d884:	4632      	mov	r2, r6
 800d886:	463b      	mov	r3, r7
 800d888:	f7f2 feb6 	bl	80005f8 <__aeabi_dmul>
 800d88c:	a35e      	add	r3, pc, #376	; (adr r3, 800da08 <atan+0x300>)
 800d88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d892:	f7f2 fcf9 	bl	8000288 <__aeabi_dsub>
 800d896:	4632      	mov	r2, r6
 800d898:	463b      	mov	r3, r7
 800d89a:	f7f2 fead 	bl	80005f8 <__aeabi_dmul>
 800d89e:	a35c      	add	r3, pc, #368	; (adr r3, 800da10 <atan+0x308>)
 800d8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a4:	f7f2 fcf0 	bl	8000288 <__aeabi_dsub>
 800d8a8:	4632      	mov	r2, r6
 800d8aa:	463b      	mov	r3, r7
 800d8ac:	f7f2 fea4 	bl	80005f8 <__aeabi_dmul>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4640      	mov	r0, r8
 800d8b6:	4649      	mov	r1, r9
 800d8b8:	f7f2 fce8 	bl	800028c <__adddf3>
 800d8bc:	4622      	mov	r2, r4
 800d8be:	462b      	mov	r3, r5
 800d8c0:	f7f2 fe9a 	bl	80005f8 <__aeabi_dmul>
 800d8c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	d14b      	bne.n	800d966 <atan+0x25e>
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	f7f2 fcd9 	bl	8000288 <__aeabi_dsub>
 800d8d6:	e72c      	b.n	800d732 <atan+0x2a>
 800d8d8:	ee10 0a10 	vmov	r0, s0
 800d8dc:	4b53      	ldr	r3, [pc, #332]	; (800da2c <atan+0x324>)
 800d8de:	2200      	movs	r2, #0
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	f7f2 fcd1 	bl	8000288 <__aeabi_dsub>
 800d8e6:	4b51      	ldr	r3, [pc, #324]	; (800da2c <atan+0x324>)
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	460f      	mov	r7, r1
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f7f2 fccb 	bl	800028c <__adddf3>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	f7f2 ffa5 	bl	800084c <__aeabi_ddiv>
 800d902:	f04f 0a01 	mov.w	sl, #1
 800d906:	4604      	mov	r4, r0
 800d908:	460d      	mov	r5, r1
 800d90a:	e764      	b.n	800d7d6 <atan+0xce>
 800d90c:	4b49      	ldr	r3, [pc, #292]	; (800da34 <atan+0x32c>)
 800d90e:	429e      	cmp	r6, r3
 800d910:	da1d      	bge.n	800d94e <atan+0x246>
 800d912:	ee10 0a10 	vmov	r0, s0
 800d916:	4b48      	ldr	r3, [pc, #288]	; (800da38 <atan+0x330>)
 800d918:	2200      	movs	r2, #0
 800d91a:	4629      	mov	r1, r5
 800d91c:	f7f2 fcb4 	bl	8000288 <__aeabi_dsub>
 800d920:	4b45      	ldr	r3, [pc, #276]	; (800da38 <atan+0x330>)
 800d922:	4606      	mov	r6, r0
 800d924:	460f      	mov	r7, r1
 800d926:	2200      	movs	r2, #0
 800d928:	4620      	mov	r0, r4
 800d92a:	4629      	mov	r1, r5
 800d92c:	f7f2 fe64 	bl	80005f8 <__aeabi_dmul>
 800d930:	4b3e      	ldr	r3, [pc, #248]	; (800da2c <atan+0x324>)
 800d932:	2200      	movs	r2, #0
 800d934:	f7f2 fcaa 	bl	800028c <__adddf3>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4630      	mov	r0, r6
 800d93e:	4639      	mov	r1, r7
 800d940:	f7f2 ff84 	bl	800084c <__aeabi_ddiv>
 800d944:	f04f 0a02 	mov.w	sl, #2
 800d948:	4604      	mov	r4, r0
 800d94a:	460d      	mov	r5, r1
 800d94c:	e743      	b.n	800d7d6 <atan+0xce>
 800d94e:	462b      	mov	r3, r5
 800d950:	ee10 2a10 	vmov	r2, s0
 800d954:	4939      	ldr	r1, [pc, #228]	; (800da3c <atan+0x334>)
 800d956:	2000      	movs	r0, #0
 800d958:	f7f2 ff78 	bl	800084c <__aeabi_ddiv>
 800d95c:	f04f 0a03 	mov.w	sl, #3
 800d960:	4604      	mov	r4, r0
 800d962:	460d      	mov	r5, r1
 800d964:	e737      	b.n	800d7d6 <atan+0xce>
 800d966:	4b36      	ldr	r3, [pc, #216]	; (800da40 <atan+0x338>)
 800d968:	4e36      	ldr	r6, [pc, #216]	; (800da44 <atan+0x33c>)
 800d96a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d972:	f7f2 fc89 	bl	8000288 <__aeabi_dsub>
 800d976:	4622      	mov	r2, r4
 800d978:	462b      	mov	r3, r5
 800d97a:	f7f2 fc85 	bl	8000288 <__aeabi_dsub>
 800d97e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d982:	4602      	mov	r2, r0
 800d984:	460b      	mov	r3, r1
 800d986:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d98a:	f7f2 fc7d 	bl	8000288 <__aeabi_dsub>
 800d98e:	f1bb 0f00 	cmp.w	fp, #0
 800d992:	4604      	mov	r4, r0
 800d994:	460d      	mov	r5, r1
 800d996:	f6bf aed6 	bge.w	800d746 <atan+0x3e>
 800d99a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d99e:	461d      	mov	r5, r3
 800d9a0:	e6d1      	b.n	800d746 <atan+0x3e>
 800d9a2:	a51d      	add	r5, pc, #116	; (adr r5, 800da18 <atan+0x310>)
 800d9a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d9a8:	e6cd      	b.n	800d746 <atan+0x3e>
 800d9aa:	bf00      	nop
 800d9ac:	f3af 8000 	nop.w
 800d9b0:	54442d18 	.word	0x54442d18
 800d9b4:	bff921fb 	.word	0xbff921fb
 800d9b8:	8800759c 	.word	0x8800759c
 800d9bc:	7e37e43c 	.word	0x7e37e43c
 800d9c0:	e322da11 	.word	0xe322da11
 800d9c4:	3f90ad3a 	.word	0x3f90ad3a
 800d9c8:	24760deb 	.word	0x24760deb
 800d9cc:	3fa97b4b 	.word	0x3fa97b4b
 800d9d0:	a0d03d51 	.word	0xa0d03d51
 800d9d4:	3fb10d66 	.word	0x3fb10d66
 800d9d8:	c54c206e 	.word	0xc54c206e
 800d9dc:	3fb745cd 	.word	0x3fb745cd
 800d9e0:	920083ff 	.word	0x920083ff
 800d9e4:	3fc24924 	.word	0x3fc24924
 800d9e8:	5555550d 	.word	0x5555550d
 800d9ec:	3fd55555 	.word	0x3fd55555
 800d9f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d9f4:	bfa2b444 	.word	0xbfa2b444
 800d9f8:	52defd9a 	.word	0x52defd9a
 800d9fc:	3fadde2d 	.word	0x3fadde2d
 800da00:	af749a6d 	.word	0xaf749a6d
 800da04:	3fb3b0f2 	.word	0x3fb3b0f2
 800da08:	fe231671 	.word	0xfe231671
 800da0c:	3fbc71c6 	.word	0x3fbc71c6
 800da10:	9998ebc4 	.word	0x9998ebc4
 800da14:	3fc99999 	.word	0x3fc99999
 800da18:	54442d18 	.word	0x54442d18
 800da1c:	3ff921fb 	.word	0x3ff921fb
 800da20:	440fffff 	.word	0x440fffff
 800da24:	7ff00000 	.word	0x7ff00000
 800da28:	3fdbffff 	.word	0x3fdbffff
 800da2c:	3ff00000 	.word	0x3ff00000
 800da30:	3ff2ffff 	.word	0x3ff2ffff
 800da34:	40038000 	.word	0x40038000
 800da38:	3ff80000 	.word	0x3ff80000
 800da3c:	bff00000 	.word	0xbff00000
 800da40:	0800e030 	.word	0x0800e030
 800da44:	0800e010 	.word	0x0800e010

0800da48 <fabs>:
 800da48:	ec51 0b10 	vmov	r0, r1, d0
 800da4c:	ee10 2a10 	vmov	r2, s0
 800da50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da54:	ec43 2b10 	vmov	d0, r2, r3
 800da58:	4770      	bx	lr
	...

0800da5c <_init>:
 800da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5e:	bf00      	nop
 800da60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da62:	bc08      	pop	{r3}
 800da64:	469e      	mov	lr, r3
 800da66:	4770      	bx	lr

0800da68 <_fini>:
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	bf00      	nop
 800da6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6e:	bc08      	pop	{r3}
 800da70:	469e      	mov	lr, r3
 800da72:	4770      	bx	lr
